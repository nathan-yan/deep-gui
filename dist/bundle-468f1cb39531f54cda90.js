/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/@createjs/core/src/events/Event.js":
/*!*********************************************************!*\
  !*** ./node_modules/@createjs/core/src/events/Event.js ***!
  \*********************************************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_exports__, __webpack_require__.r, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => __WEBPACK_DEFAULT_EXPORT__
/* harmony export */ });
/**
 * @license Event
 * Visit http://createjs.com/ for documentation, updates and examples.
 *
 * Copyright (c) 2017 gskinner.com, inc.
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Contains properties and methods shared by all events for use with {@link core.EventDispatcher}.
 * Note that Event objects are often reused, so you should never
 * rely on an event object's state outside of the call stack it was received in.
 *
 * @memberof core
 * @example
 * const evt = new Event("myEvent");
 * const dispatcher = new EventDispatcher();
 * dispatcher.on("myEvent", event => console.log(event.type));
 * dispatcher.dispatchEvent(evt); // logs "myEvent"
 *
 * @param {string} type The event type.
 * @param {boolean} [bubbles=false] Indicates whether the event will bubble through the display list.
 * @param {boolean} [cancelable=false] Indicates whether the default behaviour of this event can be cancelled.
 */
class Event {

	constructor (type, bubbles = false, cancelable = false) {
		/**
		 * The type of event.
		 * @type string
		 */
		this.type = type;

		/**
		 * The object that generated an event.
		 *
		 * @type Object
		 * @default null
		 * @readonly
		 */
		this.target = null;

		/**
		 * The current target that a bubbling event is being dispatched from. For non-bubbling events, this will
		 * always be the same as target. For example, if childObj.parent = parentObj, and a bubbling event
		 * is generated from childObj, then a listener on parentObj would receive the event with
		 * target=childObj (the original target) and currentTarget=parentObj (where the listener was added).
		 *
		 * @type Object
		 * @default null
		 * @readonly
		 */
		this.currentTarget = null;

		/**
		 * For bubbling events, this indicates the current event phase:
		 * <OL>
		 * 	<LI> capture phase: starting from the top parent to the target</LI>
		 * 	<LI> at target phase: currently being dispatched from the target</LI>
		 * 	<LI> bubbling phase: from the target to the top parent</LI>
		 * </OL>
		 *
		 * @type number
		 * @default 0
		 * @readonly
		 */
		this.eventPhase = 0;

		/**
		 * Indicates whether the event will bubble through the display list.
		 *
		 * @type boolean
		 * @readonly
		 */
		this.bubbles = bubbles;

		/**
		 * Indicates whether the default behaviour of this event can be cancelled via {@link core.Event#preventDefault}.
		 *
		 * @type boolean
		 * @readonly
		 */
		this.cancelable = cancelable;

		/**
		 * The epoch time at which this event was created.
		 *
		 * @type number
		 * @readonly
		 */
		this.timeStamp = new Date().getTime();

		/**
		 * Indicates if {@link core.Event#preventDefault} has been called on this event.
		 *
		 * @type boolean
		 * @default false
		 * @readonly
		 */
		this.defaultPrevented = false;

		/**
		 * Indicates if {@link core.Event#stopPropagation} or {@link core.Event#stopImmediatePropagation} has been called on this event.
		 *
		 * @type boolean
		 * @default false
		 * @readonly
		 */
		this.propagationStopped = false;

		/**
		 * Indicates if {@link core.Event#stopImmediatePropagation} has been called on this event.
		 *
		 * @type boolean
		 * @default false
		 * @readonly
		 */
		this.immediatePropagationStopped = false;

		/**
		 * Indicates if {@link core.Event#remove} has been called on this event.
		 *
		 * @type boolean
		 * @default false
		 * @readonly
		 */
		this.removed = false;
	}

	/**
	 * Sets {@link core.Event#defaultPrevented} to true if the event is cancelable.
	 * Mirrors the DOM level 2 event standard. In general, cancelable events that have `preventDefault()` called will
	 * cancel the default behaviour associated with the event.
	 * @return {core.Event} this, chainable
	 */
	preventDefault () {
		this.defaultPrevented = this.cancelable;
		return this;
	}

	/**
	 * Sets {@link core.Event#propagationStopped} to true.
	 * Mirrors the DOM event standard.
	 * @return {core.Event} this, chainable
	 */
	stopPropagation () {
		this.propagationStopped = true;
		return this;
	}

	/**
	 * Sets {@link core.Event#propagationStopped} and {@link core.Event#immediatePropagationStopped} to true.
	 * Mirrors the DOM event standard.
	 * @return {core.Event} this, chainable
	 */
	stopImmediatePropagation () {
		this.immediatePropagationStopped = this.propagationStopped = true;
		return this;
	}

	/**
	 * Causes the active listener to be removed via removeEventListener();
	 *
	 * @example
	 * myBtn.addEventListener("click", event => {
	 *   event.remove(); // removes this listener.
	 * });
	 *
	 * @return {core.Event} this, chainable
	 */
	remove () {
		this.removed = true;
		return this;
	}

	/**
	 * Returns a clone of the Event instance.
	 *
	 * @return {core.Event} a clone of the Event instance.
	 */
	clone () {
		const event = new Event(this.type, this.bubbles, this.cancelable);
		for (let n in this) {
			if (this.hasOwnProperty(n)) {
				event[n] = this[n];
			}
		}
		return event;
	}

	/**
	 * Provides a return {core.Event} this, chainable shortcut method for setting a number of properties on the instance.
	 *
	 * @param {Object} props A generic object containing properties to copy to the instance.
	 * @return {core.Event} this, chainable
	 */
	set (props) {
		for (let n in props) { this[n] = props[n]; }
		return this;
	}

	/**
	 * Returns a string representation of this object.
	 *
	 * @return {string} A string representation of the instance.
	 */
	toString () {
		return `[${this.constructor.name} (type=${this.type})]`;
	}

}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Event);


/***/ }),

/***/ "./node_modules/@createjs/core/src/events/EventDispatcher.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@createjs/core/src/events/EventDispatcher.js ***!
  \*******************************************************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_exports__, __webpack_require__.r, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => __WEBPACK_DEFAULT_EXPORT__
/* harmony export */ });
/* harmony import */ var _Event__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Event */ "./node_modules/@createjs/core/src/events/Event.js");
/**
 * @license EventDispatcher
 * Visit http://createjs.com/ for documentation, updates and examples.
 *
 * Copyright (c) 2017 gskinner.com, inc.
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */



/**
 * EventDispatcher provides methods for managing queues of event listeners and dispatching events.
 *
 * You can either extend EventDispatcher or mix its methods into an existing prototype or instance by using the
 * EventDispatcher {@link core.EventDispatcher.initialize} method.
 *
 * Together with the CreateJS Event class, EventDispatcher provides an extended event model that is based on the
 * DOM Level 2 event model, including addEventListener, removeEventListener, and dispatchEvent. It supports
 * bubbling / capture, preventDefault, stopPropagation, stopImmediatePropagation, and handleEvent.
 *
 * EventDispatcher also exposes a {@link core.EventDispatcher#on} method, which makes it easier
 * to create scoped listeners, listeners that only run once, and listeners with associated arbitrary data. The
 * {@link core.EventDispatcher#off} method is merely an alias to {@link core.EventDispatcher#removeEventListener}.
 *
 * Another addition to the DOM Level 2 model is the {@link core.EventDispatcher#removeAllEventListeners}
 * method, which can be used to listeners for all events, or listeners for a specific event. The Event object also
 * includes a {@link core.Event#remove} method which removes the active listener.
 *
 * @memberof core
 * @example
 * // add EventDispatcher capabilities to the "MyClass" class.
 * EventDispatcher.initialize(MyClass.prototype);
 *
 * // Add an event.
 * instance.addEventListener("eventName", event => console.log(event.target + " was clicked."));
 *
 * // scope ("this") can be be a challenge with events.
 * // using the {@link core.EventDispatcher#on} method to subscribe to events simplifies this.
 * instance.addEventListener("click", event => console.log(instance === this)); // false, scope is ambiguous.
 * instance.on("click", event => console.log(instance === this)); // true, `on` uses dispatcher scope by default.
 */
class EventDispatcher {

	/**
	 * Static initializer to mix EventDispatcher methods into a target object or prototype.
	 *
	 * @static
	 * @example
	 * EventDispatcher.initialize(MyClass.prototype); // add to the prototype of the class
	 * EventDispatcher.initialize(myInstance); // add to a specific instance
	 *
	 * @param {Object} target The target object to inject EventDispatcher methods into.
	 */
	static initialize (target) {
		const p = EventDispatcher.prototype;
		target.addEventListener = p.addEventListener;
		target.on = p.on;
		target.removeEventListener = target.off = p.removeEventListener;
		target.removeAllEventListeners = p.removeAllEventListeners;
		target.hasEventListener = p.hasEventListener;
		target.dispatchEvent = p.dispatchEvent;
		target._dispatchEvent = p._dispatchEvent;
		target.willTrigger = p.willTrigger;
	}

	constructor () {
		/**
		 * @private
		 * @default null
		 * @type Object
		 */
		this._listeners = null;

		/**
		 * @private
		 * @default null
		 * @type Object
		 */
		this._captureListeners = null;
	}

	/**
	 * Adds the specified event listener. Note that adding multiple listeners to the same function will result in
	 * multiple callbacks getting fired.
	 *
	 * @example
	 * displayObject.addEventListener("click", event => console.log('clicked', event));
	 *
	 * @param {string} type The string type of the event.
	 * @param {Function|Object} listener An object with a handleEvent method, or a function that will be called when the event is dispatched.
	 * @param {boolean} [useCapture=false] For events that bubble, indicates whether to listen for the event in the capture or bubbling/target phase.
	 * @return {Function|Object} Returns the listener for chaining or assignment.
	 */
	addEventListener (type, listener, useCapture = false) {
		let listeners;
		if (useCapture) {
			listeners = this._captureListeners = this._captureListeners || {};
		} else {
			listeners = this._listeners = this._listeners || {};
		}
		let arr = listeners[type];
		if (arr) {
			this.removeEventListener(type, listener, useCapture);
			arr = listeners[type]; // remove may have deleted the array
		}
		if (arr) { arr.push(listener);  }
		else { listeners[type] = [listener]; }
		return listener;
	}

	/**
	 * A shortcut method for using addEventListener that makes it easier to specify an execution scope, have a listener
	 * only run once, associate arbitrary data with the listener, and remove the listener.
	 *
	 * This method works by creating an anonymous wrapper function and subscribing it with `addEventListener`.
	 * The wrapper function is returned for use with `removeEventListener` (or `off`).
	 *
	 * To remove a listener added with `on`, you must pass in the returned wrapper function as the listener, or use
	 * {@link core.Event#remove}. Likewise, each time you call `on` a NEW wrapper function is subscribed, so multiple calls
	 * to `on` with the same params will create multiple listeners.
	 *
	 * @example
	 * const listener = myBtn.on("click", handleClick, null, false, { count: 3 });
	 * function handleClick (evt, data) {
	 *   data.count -= 1;
	 *   console.log(this == myBtn); // true - scope defaults to the dispatcher
	 *   if (data.count == 0) {
	 *     alert("clicked 3 times!");
	 *     myBtn.off("click", listener);
	 *     // alternately: evt.remove();
	 *   }
	 * }
	 *
	 * @param {string} type The string type of the event.
	 * @param {Function|Object} listener An object with a handleEvent method, or a function that will be called when the event is dispatched.
	 * @param {Object} [scope=null] The scope to execute the listener in. Defaults to the dispatcher/currentTarget for function listeners, and to the listener itself for object listeners (ie. using handleEvent).
	 * @param {boolean} [once=false] If true, the listener will remove itself after the first time it is triggered.
	 * @param {*} [data={}] Arbitrary data that will be included as the second parameter when the listener is called.
	 * @param {boolean} [useCapture=false] For events that bubble, indicates whether to listen for the event in the capture or bubbling/target phase.
	 * @return {Function} Returns the anonymous function that was created and assigned as the listener. This is needed to remove the listener later using .removeEventListener.
	 */
	on (type, listener, scope = null, once = false, data = {}, useCapture = false) {
		if (listener.handleEvent) {
			scope = scope || listener;
			listener = listener.handleEvent;
		}
		scope = scope || this;
		return this.addEventListener(type, evt => {
			listener.call(scope, evt, data);
			once && evt.remove();
		}, useCapture);
	}

	/**
	 * Removes the specified event listener.
	 *
	 * You must pass the exact function reference used when the event was added. If a proxy
	 * function, or function closure is used as the callback, the proxy/closure reference must be used - a new proxy or
	 * closure will not work.
	 *
	 * @example
	 * displayObject.removeEventListener("click", handleClick);
	 *
	 * @param {string} type The string type of the event.
	 * @param {Function|Object} listener The listener function or object.
	 * @param {boolean} [useCapture=false] For events that bubble, indicates whether to listen for the event in the capture or bubbling/target phase.
	 */
	removeEventListener (type, listener, useCapture = false) {
		const listeners = useCapture ? this._captureListeners : this._listeners;
		if (!listeners) { return; }
		const arr = listeners[type];
		if (!arr) { return; }
		const l = arr.length;
		for (let i = 0; i < l; i++) {
			if (arr[i] === listener) {
				if (l === 1) { delete(listeners[type]); } // allows for faster checks.
				else { arr.splice(i, 1); }
				break;
			}
		}
	}

	/**
	 * A shortcut to the removeEventListener method, with the same parameters and return value. This is a companion to the
	 * `on` method.
	 *
	 * To remove a listener added with `on`, you must pass in the returned wrapper function as the listener. See
	 * {@link core.EventDispatcher#on} for an example.
	 *
	 * @param {string} type The string type of the event.
	 * @param {Function|Object} listener The listener function or object.
	 * @param {boolean} [useCapture=false] For events that bubble, indicates whether to listen for the event in the capture or bubbling/target phase.
	 */
	off (type, listener, useCapture = false) {
		this.removeEventListener(type, listener, useCapture);
	}

	/**
	 * Removes all listeners for the specified type, or all listeners of all types.
	 *
	 * @example
	 * // remove all listeners
	 * displayObject.removeAllEventListeners();
	 *
	 * // remove all click listeners
	 * displayObject.removeAllEventListeners("click");
	 *
	 * @param {string} [type=null] The string type of the event. If omitted, all listeners for all types will be removed.
	 */
	removeAllEventListeners (type = null) {
		if (type) {
			if (this._listeners) { delete(this._listeners[type]); }
			if (this._captureListeners) { delete(this._captureListeners[type]); }
		} else {
			this._listeners = this._captureListeners = null;
		}
	}

	/**
	 * Dispatches the specified event to all listeners.
	 *
	 * @example
	 * // use a string event
	 * this.dispatchEvent("complete")
	 *
	 * // use an Event instance
	 * const event = new createjs.Event("progress");
	 * this.dispatchEvent(event);
	 *
	 * @param {Object|Event|string} eventObj An object with a "type" property, or a string type.
	 * While a generic object will work, it is recommended to use a CreateJS Event instance. If a string is used,
	 * dispatchEvent will construct an Event instance if necessary with the specified type. This latter approach can
	 * be used to avoid event object instantiation for non-bubbling events that may not have any listeners.
	 * @param {boolean} [bubbles=false] Specifies the `bubbles` value when a string was passed to eventObj.
	 * @param {boolean} [cancelable=false] Specifies the `cancelable` value when a string was passed to eventObj.
	 * @return {boolean} Returns false if `preventDefault()` was called on a cancelable event, true otherwise.
	 */
	dispatchEvent (eventObj, bubbles = false, cancelable = false) {
		if (typeof eventObj === "string") {
			// skip everything if there's no listeners and it doesn't bubble:
			const listeners = this._listeners;
			if (!bubbles && (!listeners || !listeners[eventObj])) { return true; }
			eventObj = new _Event__WEBPACK_IMPORTED_MODULE_0__.default(eventObj, bubbles, cancelable);
		} else if (eventObj.target && eventObj.clone) {
			// redispatching an active event object, so clone it:
			eventObj = eventObj.clone();
		}

		// TODO: it would be nice to eliminate this. Maybe in favour of evtObj instanceof Event? Or !!evtObj.createEvent
		try { eventObj.target = this; } catch (e) {} // try/catch allows redispatching of native events

		if (!eventObj.bubbles || !this.parent) {
			this._dispatchEvent(eventObj, 2);
		} else {
			let top = this;
			const list = [top];
			while (top.parent) { list.push(top = top.parent); }
			const l = list.length;
			let i;

			// capture & atTarget
			for (i = l - 1; i >= 0 && !eventObj.propagationStopped; i--) {
				list[i]._dispatchEvent(eventObj, 1+(i==0));
			}
			// bubbling
			for (i = 1; i < l && !eventObj.propagationStopped; i++) {
				list[i]._dispatchEvent(eventObj, 3);
			}
		}
		return !eventObj.defaultPrevented;
	}

	/**
	 * Indicates whether there is at least one listener for the specified event type.
	 *
	 * @param {string} type The string type of the event.
	 * @return {boolean} Returns true if there is at least one listener for the specified event.
	 */
	hasEventListener (type) {
		const listeners = this._listeners, captureListeners = this._captureListeners;
		return !!((listeners && listeners[type]) || (captureListeners && captureListeners[type]));
	}

	/**
	 * Indicates whether there is at least one listener for the specified event type on this object or any of its
	 * ancestors (parent, parent's parent, etc). A return value of true indicates that if a bubbling event of the
	 * specified type is dispatched from this object, it will trigger at least one listener.
	 *
	 * This is similar to {@link core.EventDispatcher#hasEventListener}, but it searches the entire
	 * event flow for a listener, not just this object.
	 *
	 * @param {string} type The string type of the event.
	 * @return {boolean} Returns `true` if there is at least one listener for the specified event.
	 */
	willTrigger (type) {
		let o = this;
		while (o) {
			if (o.hasEventListener(type)) { return true; }
			o = o.parent;
		}
		return false;
	}

	/**
	 * @return {String} a string representation of the instance.
	 */
	toString () {
		return `[${this.constructor.name + this.name ? ` ${this.name}` : ""}]`;
	}

	/**
	 * @private
	 * @param {Object|Event|string} eventObj
	 * @param {Object} eventPhase
	 */
	_dispatchEvent (eventObj, eventPhase) {
		const listeners = eventPhase === 1 ? this._captureListeners : this._listeners;
		if (eventObj && listeners) {
			let arr = listeners[eventObj.type];
			let l;
			if (!arr || (l = arr.length) === 0) { return; }
			try { eventObj.currentTarget = this; } catch (e) {}
			try { eventObj.eventPhase = eventPhase; } catch (e) {}
			eventObj.removed = false;

			arr = arr.slice(); // to avoid issues with items being removed or added during the dispatch
			for (let i = 0; i < l && !eventObj.immediatePropagationStopped; i++) {
				let o = arr[i];
				if (o.handleEvent) { o.handleEvent(eventObj); }
				else { o(eventObj); }
				if (eventObj.removed) {
					this.off(eventObj.type, o, eventPhase === 1);
					eventObj.removed = false;
				}
			}
		}
	}

}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (EventDispatcher);


/***/ }),

/***/ "./node_modules/@createjs/core/src/main.js":
/*!*************************************************!*\
  !*** ./node_modules/@createjs/core/src/main.js ***!
  \*************************************************/
/*! namespace exports */
/*! export Event [provided] [no usage info] [missing usage info prevents renaming] -> ./node_modules/@createjs/core/src/events/Event.js .default */
/*! export EventDispatcher [provided] [no usage info] [missing usage info prevents renaming] -> ./node_modules/@createjs/core/src/events/EventDispatcher.js .default */
/*! export Ticker [provided] [no usage info] [missing usage info prevents renaming] -> ./node_modules/@createjs/core/src/utils/Ticker.js .default */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_exports__, __webpack_require__.d, __webpack_require__.r, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Event": () => /* reexport safe */ _events_Event__WEBPACK_IMPORTED_MODULE_0__.default,
/* harmony export */   "EventDispatcher": () => /* reexport safe */ _events_EventDispatcher__WEBPACK_IMPORTED_MODULE_1__.default,
/* harmony export */   "Ticker": () => /* reexport safe */ _utils_Ticker__WEBPACK_IMPORTED_MODULE_2__.default
/* harmony export */ });
/* harmony import */ var _events_Event__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./events/Event */ "./node_modules/@createjs/core/src/events/Event.js");
/* harmony import */ var _events_EventDispatcher__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./events/EventDispatcher */ "./node_modules/@createjs/core/src/events/EventDispatcher.js");
/* harmony import */ var _utils_Ticker__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/Ticker */ "./node_modules/@createjs/core/src/utils/Ticker.js");
/**
 * The core classes of CreateJS.
 * @namespace core
 *
 * @example
 * import { EventDispatcher, Event } from "@createjs/core";
 * const dispatcher = new EventDispatcher();
 * dispatcher.on("myEvent", foo);
 * dispatcher.dispatchEvent(new Event("myEvent"));
 * // foo() is called.
 */

// events


// utils



/***/ }),

/***/ "./node_modules/@createjs/core/src/utils/Ticker.js":
/*!*********************************************************!*\
  !*** ./node_modules/@createjs/core/src/utils/Ticker.js ***!
  \*********************************************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_exports__, __webpack_require__.r, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => __WEBPACK_DEFAULT_EXPORT__
/* harmony export */ });
/* harmony import */ var _events_EventDispatcher__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../events/EventDispatcher */ "./node_modules/@createjs/core/src/events/EventDispatcher.js");
/* harmony import */ var _events_Event__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../events/Event */ "./node_modules/@createjs/core/src/events/Event.js");
/**
 * @license Ticker
 * Visit http://createjs.com/ for documentation, updates and examples.
 *
 * Copyright (c) 2017 gskinner.com, inc.
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */




/**
 * The Ticker provides a centralized tick or heartbeat broadcast at a set interval. Listeners can subscribe to the tick
 * event to be notified when a set time interval has elapsed.
 *
 * Note that the interval that the tick event is called is a target interval, and may be broadcast at a slower interval
 * when under high CPU load. The Ticker class uses a static interface (ex. `Ticker.framerate = 30;`) and
 * can not be instantiated.
 *
 * @todo Pass timingMode, maxDelta, paused values as instantiation arguments?
 *
 * @memberof core
 * @example
 * Ticker.addEventListener("tick", event => {
 *   // Actions carried out each tick (aka frame)
 *   if (!event.paused) {
 *     // Actions carried out when the Ticker is not paused.
 *   }
 * });
 * @example
 * // Ticker export explanation
 * import Ticker, { Ticker as TickerClass, getTicker } from "@createjs/core";
 * Ticker.name, Ticker.RAF // -> createjs.global, undefined
 * TickerClass.RAF // -> raf
 * Ticker === getTicker("createjs.global") // -> true
 *
 * @extends core.EventDispatcher
 * @param {string} name The name assigned to this instance.
 */
class Ticker extends _events_EventDispatcher__WEBPACK_IMPORTED_MODULE_0__.default {

	/**
	 * In this mode, Ticker uses the requestAnimationFrame API, but attempts to synch the ticks to target framerate. It
	 * uses a simple heuristic that compares the time of the RAF return to the target time for the current frame and
	 * dispatches the tick when the time is within a certain threshold.
	 *
	 * This mode has a higher variance for time between frames than {{#crossLink "Ticker/TIMEOUT:property"}}{{/crossLink}},
	 * but does not require that content be time based as with {{#crossLink "Ticker/RAF:property"}}{{/crossLink}} while
	 * gaining the benefits of that API (screen synch, background throttling).
	 *
	 * Variance is usually lowest for framerates that are a divisor of the RAF frequency. This is usually 60, so
	 * framerates of 10, 12, 15, 20, and 30 work well.
	 *
	 * Falls back to {{#crossLink "Ticker/TIMEOUT:property"}}{{/crossLink}} if the requestAnimationFrame API is not
	 * supported.
	 *
	 * @static
	 * @type {string}
	 * @default "synched"
	 * @readonly
	 */
	static get RAF_SYNCHED () { return "synched"; }

	/**
	 * In this mode, Ticker passes through the requestAnimationFrame heartbeat, ignoring the target framerate completely.
	 * Because requestAnimationFrame frequency is not deterministic, any content using this mode should be time based.
	 * You can leverage {@link core.Ticker#getTime} and the {@link core.Ticker#event:tick}
	 * event object's "delta" properties to make this easier.
	 *
	 * Falls back on {@link core.Ticker.TIMEOUT} if the requestAnimationFrame API is not supported.
	 *
	 * @static
	 * @type {string}
	 * @default "raf"
	 * @readonly
	 */
	static get RAF () { return "raf"; }

	/**
	 * In this mode, Ticker uses the setTimeout API. This provides predictable, adaptive frame timing, but does not
	 * provide the benefits of requestAnimationFrame (screen synch, background throttling).
	 *
	 * @static
	 * @type {string}
	 * @default "timeout"
	 * @readonly
	 */
	static get TIMEOUT () { return "timeout"; }

	constructor (name) {
		super();

		/**
		 * The name of this instance.
		 * @type {string}
		 */
		this.name = name;

		/**
		 * Specifies the timing api (setTimeout or requestAnimationFrame) and mode to use.
		 *
		 * @see {@link core.Ticker.TIMEOUT}
		 * @see {@link core.Ticker.RAF}
		 * @see {@link core.Ticker.RAF_SYNCHED}
		 *
		 * @type {string}
		 * @default Ticker.TIMEOUT
		 */
		this.timingMode = Ticker.TIMEOUT;

		/**
		 * Specifies a maximum value for the delta property in the tick event object. This is useful when building time
		 * based animations and systems to prevent issues caused by large time gaps caused by background tabs, system sleep,
		 * alert dialogs, or other blocking routines. Double the expected frame duration is often an effective value
		 * (ex. maxDelta=50 when running at 40fps).
		 *
		 * This does not impact any other values (ex. time, runTime, etc), so you may experience issues if you enable maxDelta
		 * when using both delta and other values.
		 *
		 * If 0, there is no maximum.
		 *
		 * @type {number}
		 * @default 0
		 */
		this.maxDelta = 0;

		/**
		 * When the ticker is paused, all listeners will still receive a tick event, but the `paused` property
		 * of the event will be `true`. Also, while paused the `runTime` will not increase.
		 *
		 * @example
		 * Ticker.addEventListener("tick", event => console.log(event.paused, Ticker.getTime(false), Ticker.getTime(true)));
		 * Ticker.paused = true;
		 *
		 * @see {@link core.Ticker#event:tick}
		 * @see {@link core.Ticker#getTime}
		 * @see {@link core.Ticker#getEventTime}
		 *
		 * @type {boolean}
		 * @default false
		 */
		this.paused = false;

		/**
		 * @private
		 * @type {boolean}
		 * @default false
		 */
		this._inited = false;

		/**
		 * @private
		 * @type {number}
		 * @default 0
		 */
		this._startTime = 0;

		/**
		 * @private
		 * @type {number}
		 * @default 0
		 */
		this._pausedTime = 0;

		/**
		 * The number of ticks that have passed.
		 *
		 * @private
		 * @type {number}
		 * @default 0
		 */
		this._ticks = 0;

		/**
		 * The number of ticks that have passed while Ticker has been paused.
		 *
		 * @private
		 * @type {number}
		 * @default
		 */
		this._pausedTicks = 0;

		/**
		 * @private
		 * @type {number}
		 * @default
		 */
		this._interval = 50;

		/**
		 * @private
		 * @type {number}
		 * @default
		 */
		this._lastTime = 0;

		/**
		 * @private
		 * @type {Array}
		 * @default null
		 */
		this._times = null;

		/**
		 * @private
		 * @type {Array}
		 * @default null
		 */
		this._tickTimes = null;

		/**
		 * Stores the timeout or requestAnimationFrame id.
		 *
		 * @private
		 * @type {number}
		 * @default null
		 */
		this._timerId = null;

		/**
		 * True if currently using requestAnimationFrame, false if using setTimeout. This may be different than timingMode
		 * if that property changed and a tick hasn't fired.
		 *
		 * @private
		 * @type {boolean}
		 * @default true
		 */
		this._raf = true;
	}

	/**
	 * Indicates the target time (in milliseconds) between ticks. Default is 50 (20 FPS).
	 * Note that actual time between ticks may be more than specified depending on CPU load.
	 * This property is ignored if the ticker is using the `RAF` timing mode.
	 *
	 * @type {number}
	 */
	get interval () { return this._interval; }
	set interval (interval) {
		this._interval = interval;
		if (!this._inited) { return; }
		this._setupTick();
	}

	/**
	 * Indicates the target frame rate in frames per second (FPS). Effectively just a shortcut to `interval`, where
	 * `framerate == 1000/interval`.
	 *
	 * @type {number}
	 */
	get framerate () { return 1000 / this._interval; }
	set framerate (framerate) { this.interval = 1000 / framerate; }

	/**
	 * Starts the tick. This is called automatically when the first listener is added.
	 */
	init () {
		if (this._inited) { return; }
		this._inited = true;
		this._times = [];
		this._tickTimes = [];
		this._startTime = this._getTime();
		this._times.push(this._lastTime = 0);
		this._setupTick();
	}

	/**
	 * Stops the Ticker and removes all listeners. Use init() to restart the Ticker.
	 */
	reset () {
		if (this._raf) {
			let f = window.cancelAnimationFrame || window.webkitCancelAnimationFrame || window.mozCancelAnimationFrame || window.oCancelAnimationFrame || window.msCancelAnimationFrame;
			f && f(this._timerId);
		} else {
			clearTimeout(this._timerId);
		}
		this.removeAllEventListeners("tick");
		this._timerId = this._times = this._tickTimes = null;
		this._startTime = this._lastTime = this._ticks = 0;
		this._inited = false;
	}

	/**
	 * Init the Ticker instance if it hasn't been already.
	 */
	addEventListener (type, listener, useCapture) {
		!this._inited && this.init();
		return super.addEventListener(type, listener, useCapture);
	}

	/**
	 * Returns the average time spent within a tick. This can vary significantly from the value provided by getMeasuredFPS
	 * because it only measures the time spent within the tick execution stack.
	 *
	 * Example 1: With a target FPS of 20, getMeasuredFPS() returns 20fps, which indicates an average of 50ms between
	 * the end of one tick and the end of the next. However, getMeasuredTickTime() returns 15ms. This indicates that
	 * there may be up to 35ms of "idle" time between the end of one tick and the start of the next.
	 *
	 * Example 2: With a target FPS of 30, getFPS() returns 10fps, which indicates an average of 100ms between the end of
	 * one tick and the end of the next. However, getMeasuredTickTime() returns 20ms. This would indicate that something
	 * other than the tick is using ~80ms (another script, DOM rendering, etc).
	 *
	 * @param {number} [ticks=null] The number of previous ticks over which to measure the average time spent in a tick.
	 * Defaults to the number of ticks per second. To get only the last tick's time, pass in 1.
	 * @return {number} The average time spent in a tick in milliseconds.
	 */
	getMeasuredTickTime (ticks = null) {
		const times = this._tickTimes;
		if (!times || times.length < 1) { return -1; }
		// by default, calculate average for the past ~1 second:
		ticks = Math.min(times.length, ticks || (this.framerate | 0));
		return times.reduce((a, b) => a + b, 0) / ticks;
	}

	/**
	 * Returns the actual frames / ticks per second.
	 *
	 * @param {number} [ticks=null] The number of previous ticks over which to measure the actual frames / ticks per second.
	 * Defaults to the number of ticks per second.
	 * @return {number} The actual frames / ticks per second. Depending on performance, this may differ
	 * from the target frames per second.
	 */
	getMeasuredFPS (ticks = null) {
		const times = this._times;
		if (!times || times.length < 2) { return -1; }
		// by default, calculate fps for the past ~1 second:
		ticks = Math.min(times.length - 1, ticks || (this.framerate | 0));
		return 1000 / ((times[0] - times[ticks]) / ticks);
	}

	/**
	 * Returns the number of milliseconds that have elapsed since Ticker was initialized via {@link core.Ticker#init}.
	 * Returns -1 if Ticker has not been initialized. For example, you could use
	 * this in a time synchronized animation to determine the exact amount of time that has elapsed.
	 *
	 * @param {boolean} [runTime=false] If true only time elapsed while Ticker was not paused will be returned.
	 * If false, the value returned will be total time elapsed since the first tick event listener was added.
	 * @return {number} Number of milliseconds that have elapsed since Ticker was initialized or -1.
	 */
	getTime (runTime = false) {
		return this._startTime ? this._getTime() - (runTime ? this._pausedTime : 0) : -1;
	}

	/**
	 * Similar to {@link core.Ticker#getTime}, but returns the time on the most recent {@link core.Ticker#event:tick}
	 * event object.
	 *
	 * @param {boolean} [runTime=false] If true, the runTime property will be returned instead of time.
	 * @returns {number} The time or runTime property from the most recent tick event or -1.
	 */
	getEventTime (runTime = false) {
		return this._startTime ? (this._lastTime || this._startTime) - (runTime ? this._pausedTime : 0) : -1;
	}

	/**
	 * Returns the number of ticks that have been broadcast by Ticker.
	 *
	 * @param {boolean} [pauseable=false] Indicates whether to include ticks that would have been broadcast
	 * while Ticker was paused. If true only tick events broadcast while Ticker is not paused will be returned.
	 * If false, tick events that would have been broadcast while Ticker was paused will be included in the return
	 * value.
	 * @return {number} of ticks that have been broadcast.
	 */
	getTicks (pauseable = false) {
		return this._ticks - (pauseable ? this._pausedTicks : 0);
	}

	/**
	 * @private
	 */
	_handleSynch () {
		this._timerId = null;
		this._setupTick();

		// run if enough time has elapsed, with a little bit of flexibility to be early:
		if (this._getTime() - this._lastTime >= (this._interval - 1) * 0.97) {
			this._tick();
		}
	}

	/**
	 * @private
	 */
	_handleRAF () {
		this._timerId = null;
		this._setupTick();
		this._tick();
	}

	/**
	 * @private
	 */
	_handleTimeout () {
		this._timerId = null;
		this._setupTick();
		this._tick();
	}

	/**
	 * @private
	 */
	_setupTick () {
		if (this._timerId != null) { return; } // avoid duplicates
		const mode = this.timingMode || (this._raf && Ticker.RAF);
		if (mode === Ticker.RAF_SYNCHED || mode === Ticker.RAF) {
			const f = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame;
			if (f) {
				this._timerId = f(mode === Ticker.RAF ? this._handleRAF.bind(this) : this._handleSynch.bind(this));
				this._raf = true;
				return;
			}
		}
		this._raf = false;
		this._timerId = setTimeout(this._handleTimeout.bind(this), this._interval);
	}

	/**
	 * @private
	 * @emits core.Ticker#event:tick
	 */
	_tick () {
		const paused = this.paused, time = this._getTime(), elapsedTime = time - this._lastTime;
		this._lastTime = time;
		this._ticks++;

		if (paused) {
			this._pausedTicks++;
			this._pausedTime += elapsedTime;
		}

		if (this.hasEventListener("tick")) {
			const event = new _events_Event__WEBPACK_IMPORTED_MODULE_1__.default("tick");
			const maxDelta = this.maxDelta;
			event.delta = (maxDelta && elapsedTime > maxDelta) ? maxDelta : elapsedTime;
			event.paused = paused;
			event.time = time;
			event.runTime = time - this._pausedTime;
			this.dispatchEvent(event);
		}

		this._tickTimes.unshift(this._getTime() - time);
		while (this._tickTimes.length > 100) { this._tickTimes.pop(); }

		this._times.unshift(time);
		while (this._times.length > 100) { this._times.pop(); }
	}

	/**
	 * @private
	 */
	_getTime () {
		const now = window.performance && window.performance.now;
		return ((now && now.call(performance)) || (new Date().getTime())) - this._startTime;
	}

	static on (type, listener, scope, once, data, useCapture) { return _instance.on(type, listener, scope, once, data, useCapture); }
	static removeEventListener (type, listener, useCapture) { _instance.removeEventListener(type, listener, useCapture); }
	static off (type, listener, useCapture) { _instance.off(type, listener, useCapture); }
	static removeAllEventListeners (type) { _instance.removeAllEventListeners(type); }
	static dispatchEvent (eventObj, bubbles, cancelable) { return _instance.dispatchEvent(eventObj, bubbles, cancelable); }
	static hasEventListener (type) { return _instance.hasEventListener(type); }
	static willTrigger (type) { return _instance.willTrigger(type); }
	static toString () { return _instance.toString(); }
	static init () { _instance.init(); }
	static reset () { _instance.reset(); }
	static addEventListener (type, listener, useCapture) { _instance.addEventListener(type, listener, useCapture); }
	static getMeasuredTickTime (ticks) { return _instance.getMeasuredTickTime(ticks); }
	static getMeasuredFPS (ticks) { return _instance.getMeasuredFPS(ticks); }
	static getTime (runTime) { return _instance.getTime(runTime); }
	static getEventTime (runTime) { return _instance.getEventTime(runTime); }
	static getTicks (pauseable) { return _instance.getTicks(pauseable); }

	static get interval () { return _instance.interval; }
	static set interval (interval) { _instance.interval = interval; }
	static get framerate () { return _instance.framerate; }
	static set framerate (framerate) { _instance.framerate = framerate; }
	static get name () { return _instance.name; }
	static set name (name) { _instance.name = name; }
	static get timingMode () { return _instance.timingMode; }
	static set timingMode (timingMode) { _instance.timingMode = timingMode; }
	static get maxDelta () { return _instance.maxDelta; }
	static set maxDelta (maxDelta) { _instance.maxDelta = maxDelta; }
	static get paused () { return _instance.paused; }
	static set paused (paused) { _instance.paused = paused; }

}

/**
 * Dispatched each tick. The event will be dispatched to each listener even when the Ticker has been paused.
 *
 * @example
 * Ticker.addEventListener("tick", event => console.log("Paused:", event.paused, event.delta));
 *
 * @event core.Ticker#tick
 * @type {Object}
 * @property {Object} target The object that dispatched the event.
 * @property {string} type The event type.
 * @property {boolean} paused Indicates whether the ticker is currently paused.
 * @property {number} delta The time elapsed in ms since the last tick.
 * @property {number} time The total time in ms since Ticker was initialized.
 * @property {number} runTime The total time in ms that Ticker was not paused since it was initialized. For example,
 * you could determine the amount of time that the Ticker has been paused since initialization with `time-runTime`.
 * @since 0.6.0
 */

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Ticker);

// the default Ticker instance
const _instance = new Ticker("createjs.global");


/***/ }),

/***/ "./node_modules/@createjs/easeljs/src/display/Bitmap.js":
/*!**************************************************************!*\
  !*** ./node_modules/@createjs/easeljs/src/display/Bitmap.js ***!
  \**************************************************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => /* binding */ Bitmap
/* harmony export */ });
/* harmony import */ var _DisplayObject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./DisplayObject */ "./node_modules/@createjs/easeljs/src/display/DisplayObject.js");
/* harmony import */ var _utils_VideoBuffer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/VideoBuffer */ "./node_modules/@createjs/easeljs/src/utils/VideoBuffer.js");
/**
 * @license Bitmap
 * Visit http://createjs.com/ for documentation, updates and examples.
 *
 * Copyright (c) 2017 gskinner.com, inc.
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */




/**
 * A Bitmap represents an Image, Canvas, or Video in the display list. A Bitmap can be instantiated using an existing
 * HTML element, or a string.
 *
 * <strong>Notes:</strong>
 * <ol>
 *     <li>When using a video source that may loop or seek, use a {@link easeljs.VideoBuffer} object to
 *      blinking / flashing.
 *     <li>When a string path or image tag that is not yet loaded is used, the stage may need to be redrawn before it
 *      will be displayed.</li>
 *     <li>Bitmaps with an SVG source currently will not respect an alpha value other than 0 or 1. To get around this,
 *     the Bitmap can be cached.</li>
 *     <li>Bitmaps with an SVG source will taint the canvas with cross-origin data, which prevents interactivity. This
 *     happens in all browsers except recent Firefox builds.</li>
 *     <li>Images loaded cross-origin will throw cross-origin security errors when interacted with using a mouse, using
 *     methods such as `getObjectUnderPoint`, or using filters, or caching. You can get around this by setting
 *     `crossOrigin` flags on your images before passing them to EaselJS, eg: `img.crossOrigin="Anonymous";`</li>
 * </ol>
 *
 * @memberof easeljs
 * @extends easeljs.DisplayObject
 * @example
 * const bitmap = new Bitmap("imagePath.jpg");
 *
 * @param {CanvasImageSource | String | Object} imageOrUri The source image to display. This can be a CanvasImageSource
 * (image, video, canvas), an object with a `getImage` method that returns a CanvasImageSource, or a string URL to an image.
 * If the latter, a new Image instance with the URL as its src will be used.
 */
class Bitmap extends _DisplayObject__WEBPACK_IMPORTED_MODULE_0__.default {

	constructor (imageOrUri) {
		super();

		/**
		 * The source image to display. This can be a CanvasImageSource
		 * (image, video, canvas), an object with a `getImage` method that returns a CanvasImageSource, or a string URL to an image.
		 * If the latter, a new Image instance with the URL as its src will be used.
		 * @property image
		 * @type {CanvasImageSource | Object}
		 */
		if (typeof imageOrUri === "string") {
			this.image = document.createElement("img");
			this.image.src = imageOrUri;
		} else {
			this.image = imageOrUri;
		}

		/**
		 * Specifies an area of the source image to draw. If omitted, the whole image will be drawn.
		 * Note that video sources must have a width / height set to work correctly with `sourceRect`.
		 * @type {easeljs.Rectangle}
		 * @default null
		 */
		this.sourceRect = null;

		/**
		 * Set as compatible with WebGL.
		 * @protected
		 * @type {Number}
		 */
		this._webGLRenderStyle = _DisplayObject__WEBPACK_IMPORTED_MODULE_0__.default._StageGL_BITMAP;
	}

	isVisible () {
		let image = this.image;
		let hasContent = this.cacheCanvas || (image && (image.naturalWidth || image.getContext || image.readyState >= 2));
		return !!(this.visible && this.alpha > 0 && this.scaleX != 0 && this.scaleY != 0 && hasContent);
	}

	draw (ctx, ignoreCache = false) {
		if (super.draw(ctx, ignoreCache)) { return true; }
		let img = this.image, rect = this.sourceRect;
		if (img instanceof _utils_VideoBuffer__WEBPACK_IMPORTED_MODULE_1__.default) { img = img.getImage(); }
		if (img == null) { return true; }
		if (rect) {
			// some browsers choke on out of bound values, so we'll fix them:
			let x1 = rect.x, y1 = rect.y, x2 = x1 + rect.width, y2 = y1 + rect.height, x = 0, y = 0, w = img.width, h = img.height;
			if (x1 < 0) { x -= x1; x1 = 0; }
			if (x2 > w) { x2 = w; }
			if (y1 < 0) { y -= y1; y1 = 0; }
			if (y2 > h) { y2 = h; }
			ctx.drawImage(img, x1, y1, x2-x1, y2-y1, x, y, x2-x1, y2-y1);
		} else {
			ctx.drawImage(img, 0, 0);
		}
		return true;
	}

	// Note, the doc sections below document using the specified APIs (from DisplayObject) from
	// Bitmap. This is why they have no method implementations.

	/**
	 * Because the content of a Bitmap is already in a simple format, cache is unnecessary for Bitmap instances.
	 * You should <b>not</b> cache Bitmap instances as it can degrade performance.
	 *
	 * <strong>However: If you want to use a filter on a Bitmap, you <em>MUST</em> cache it, or it will not work.</strong>
	 * To see the API for caching, please visit the {@link easeljs.DisplayObject#cache} method.
	 *
	 * @alias easeljs.Bitmap#cache
	 */

	/**
	 * Because the content of a Bitmap is already in a simple format, cache is unnecessary for Bitmap instances.
	 * You should <b>not</b> cache Bitmap instances as it can degrade performance.
	 *
	 * <strong>However: If you want to use a filter on a Bitmap, you <em>MUST</em> cache it, or it will not work.</strong>
	 * To see the API for caching, please visit the {@link easeljs.DisplayObject#cache} method.
	 *
	 * @alias easeljs.Bitmap#updateCache
	 */

	/**
	 * Because the content of a Bitmap is already in a simple format, cache is unnecessary for Bitmap instances.
	 * You should <b>not</b> cache Bitmap instances as it can degrade performance.
	 *
	 * <strong>However: If you want to use a filter on a Bitmap, you <em>MUST</em> cache it, or it will not work.</strong>
	 * To see the API for caching, please visit the {@link easeljs.DisplayObject#cache} method.
	 *
	 * @alias easeljs.Bitmap#uncache
	 */

	getBounds () {
		let rect = super.getBounds();
		if (rect) { return rect; }
		let image = this.image, o = this.sourceRect || image;
		let hasContent = (image && (image.naturalWidth || image.getContext || image.readyState >= 2));
		return hasContent ? this._rectangle.setValues(0, 0, o.width, o.height) : null;
	}

	/**
	 * Returns a clone of the Bitmap instance.
	 * @param {Boolean} [node] Whether the underlying DOM element should be cloned as well.
	 * @return {easeljs.Bitmap} A clone of the Bitmap instance.
	 */
	clone (node) {
		let img = this.image;
		if (img != null && node != null) { img = img.cloneNode(); }
		let bmp = new Bitmap(img);
		if (this.sourceRect) { bmp.sourceRect = this.sourceRect.clone(); }
		this._cloneProps(bmp);
		return bmp;
	}

}


/***/ }),

/***/ "./node_modules/@createjs/easeljs/src/display/BitmapText.js":
/*!******************************************************************!*\
  !*** ./node_modules/@createjs/easeljs/src/display/BitmapText.js ***!
  \******************************************************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => /* binding */ BitmapText
/* harmony export */ });
/* harmony import */ var _Container__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Container */ "./node_modules/@createjs/easeljs/src/display/Container.js");
/* harmony import */ var _Sprite__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Sprite */ "./node_modules/@createjs/easeljs/src/display/Sprite.js");
/**
 * @license BitmapText
 * Visit http://createjs.com/ for documentation, updates and examples.
 *
 * Copyright (c) 2017 gskinner.com, inc.
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */




/**
 * Displays text using bitmap glyphs defined in a sprite sheet. Multi-line text is supported using new line characters,
 * but automatic wrapping is not supported. See the {@link easeljs.BitmapText#spriteSheet} property for more information on defining glyphs.
 *
 * <strong>Important:</strong> While BitmapText extends Container, it is not designed to be used as one.
 * As such, methods like addChild and removeChild are disabled.
 *
 * @memberof easeljs
 * @extends easeljs.Container
 *
 * @param {String} [text=""] The text to display.
 * @param {SpriteSheet} [spriteSheet=null] The spritesheet that defines the character glyphs.
 */
class BitmapText extends _Container__WEBPACK_IMPORTED_MODULE_0__.default {

	constructor (text = "", spriteSheet = null) {
		super();

		/**
		 * The text to display.
		 * @type {String}
		 * @default ""
		 */
		this.text = text;

		/**
		 * A SpriteSheet instance that defines the glyphs for this bitmap text. Each glyph/character
		 * should have a single frame animation defined in the sprite sheet named the same as
		 * corresponding character.
		 *
		 * @example
		 * // the following animation definition would indicate that the frame at index 0 of the spritesheet should be drawn for the "A" character.
		 * "A": {frames: [0]}
		 * // The short form is also acceptable:
		 * "A": 0
		 *
		 * Note that if a character in the text is not found in the sprite sheet, it will also
		 * try to use the alternate case (upper or lower).
		 *
		 * @see {@link easeljs.SpriteSheet}
		 * @type {easeljs.SpriteSheet}
		 * @default null
		 */
		this.spriteSheet = spriteSheet;

		/**
		 * The height of each line of text. If 0, then it will use a line height calculated
		 * by checking for the height of the "1", "T", or "L" character (in that order). If
		 * those characters are not defined, it will use the height of the first frame of the
		 * sprite sheet.
		 * @type {Number}
		 * @default 0
		 */
		this.lineHeight = 0;

		/**
		 * This spacing (in pixels) will be added after each character in the output.
		 * @type {Number}
		 * @default 0
		 */
		this.letterSpacing = 0;

		/**
		 * If a space character is not defined in the sprite sheet, then empty pixels equal to
		 * spaceWidth will be inserted instead. If 0, then it will use a value calculated
		 * by checking for the width of the "1", "l", "E", or "A" character (in that order). If
		 * those characters are not defined, it will use the width of the first frame of the
		 * sprite sheet.
		 * @type {Number}
		 * @default 0
		 */
		this.spaceWidth = 0;

	 	/**
		 * @type {Object}
		 * @protected
		 */
		this._oldProps = {text:0,spriteSheet:0,lineHeight:0,letterSpacing:0,spaceWidth:0};

		/**
		 * Used to track the object which this class attached listeners to, helps optimize listener attachment.
		 * @type {easeljs.Stage}
		 * @protected
		 */
		this._oldStage = null;

		/**
		 * The event listener proxy triggered drawing draw for special circumstances.
		 * @type {Function}
		 * @protected
		 */
		this._drawAction = null;

	}

	draw (ctx, ignoreCache) {
		if (this.drawCache(ctx, ignoreCache)) { return; }
		this._updateState();
		super.draw(ctx, ignoreCache);
	}

	getBounds () {
		this._updateText();
		return super.getBounds();
	}

	isVisible () {
		let hasContent = this.cacheCanvas || (this.spriteSheet && this.spriteSheet.complete && this.text);
		return !!(this.visible && this.alpha > 0 && this.scaleX !== 0 && this.scaleY !== 0 && hasContent);
	}

	clone () {
		return this._cloneProps(new BitmapText(this.text, this.spriteSheet));
	}

	/**
	 * <strong>Disabled in BitmapText.</strong>
	 */
	addChild () {}

	/**
	 * <strong>Disabled in BitmapText.</strong>
	 */
	addChildAt () {}

	/**
	 * <strong>Disabled in BitmapText.</strong>
	 */
	removeChild () {}

	/**
	 * <strong>Disabled in BitmapText.</strong>
	 */
	removeChildAt () {}

	/**
	 * <strong>Disabled in BitmapText.</strong>
	 */
	removeAllChildren () {}

	_updateState () {
		this._updateText();
	}

 	/**
	 * @param {easeljs.BitmapText} o
	 * @return {easeljs.BitmapText}
	 * @protected
	 */
	_cloneProps (o) {
		super._cloneProps(o);
		o.lineHeight = this.lineHeight;
		o.letterSpacing = this.letterSpacing;
		o.spaceWidth = this.spaceWidth;
		return o;
	}

	/**
	 * @param {String} character
	 * @param {easeljs.SpriteSheet} spriteSheet
	 * @return {Number}
	 * @protected
	 */
	_getFrameIndex (character, spriteSheet) {
		let c, o = spriteSheet.getAnimation(character);
		if (!o) {
			(character != (c = character.toUpperCase())) || (character != (c = character.toLowerCase())) || (c = null);
			if (c) { o = spriteSheet.getAnimation(c); }
		}
		return o && o.frames[0];
	}

	/**
	 * @param {String} character
	 * @param {easeljs.SpriteSheet} spriteSheet
	 * @return {Object}
	 * @protected
	 */
	_getFrame (character, spriteSheet) {
		let index = this._getFrameIndex(character, spriteSheet);
		return index == null ? index : spriteSheet.getFrame(index);
	}

	/**
	 * @param {easeljs.SpriteSheet} ss
	 * @return {Number}
	 * @protected
	 */
	_getLineHeight (ss) {
		let frame = this._getFrame("1", ss) || this._getFrame("T", ss) || this._getFrame("L", ss) || ss.getFrame(0);
		return frame ? frame.rect.height : 1;
	}

	/**
	 * @param {easeljs.SpriteSheet} ss
	 * @return {Number}
	 * @protected
	 */
	_getSpaceWidth (ss) {
		let frame = this._getFrame("1", ss) || this._getFrame("l", ss) || this._getFrame("e", ss) || this._getFrame("a", ss) || ss.getFrame(0);
		return frame ? frame.rect.width : 1;
	}

	_tick (evtObj) {
		let stage = this.stage;
		stage && stage.on("drawstart", this._updateText, this, true);
		super._tick(evtObj);
	}

	/**
	 * @protected
	 */
	_updateText () {
		let x = 0, y = 0, o = this._oldProps, change = false, spaceW = this.spaceWidth, lineH = this.lineHeight, ss = this.spriteSheet;
		let pool = BitmapText._spritePool, kids = this.children, childIndex = 0, numKids = kids.length, sprite;

		for (let n in o) {
			if (o[n] != this[n]) {
				o[n] = this[n];
				change = true;
			}
		}
		if (!change) { return; }

		let hasSpace = !!this._getFrame(" ", ss);
		if (!hasSpace && !spaceW) { spaceW = this._getSpaceWidth(ss); }
		if (!lineH) { lineH = this._getLineHeight(ss); }

		for (let i = 0, l = this.text.length; i < l; i++) {
			let character = this.text.charAt(i);
			if (character === " " && !hasSpace) {
				x += spaceW;
				continue;
			} else if (character === "\n" || character === "\r") {
				if (character === "\r" && this.text.charAt(i+1) === "\n") { i++; } // crlf
				x = 0;
				y += lineH;
				continue;
			}

			let index = this._getFrameIndex(character, ss);
			if (index == null) { continue; }

			if (childIndex < numKids) {
				sprite = kids[childIndex];
			} else {
				kids.push(sprite = pool.length ? pool.pop() : new _Sprite__WEBPACK_IMPORTED_MODULE_1__.default());
				sprite.parent = this;
				numKids++;
			}
			sprite.spriteSheet = ss;
			sprite.gotoAndStop(index);
			sprite.x = x;
			sprite.y = y;
			childIndex++;

			x += sprite.getBounds().width + this.letterSpacing;
		}

		while (numKids > childIndex) {
			 // faster than removeChild.
			pool.push(sprite = kids.pop());
			sprite.parent = null;
			numKids--;
		}
		if (pool.length > BitmapText.maxPoolSize) { pool.length = BitmapText.maxPoolSize; }
	}

}

/**
 * BitmapText uses Sprite instances to draw text. To reduce the creation and destruction of instances (and thus garbage collection), it maintains
 * an internal object pool of sprite instances to reuse. Increasing this value can cause more sprites to be
 * retained, slightly increasing memory use, but reducing instantiation.
 * @type {Number}
 * @static
 * @default 100
 */
BitmapText.maxPoolSize = 100;
/**
 * Sprite object pool.
 * @type {Array}
 * @static
 * @private
 * @readonly
 */
BitmapText._spritePool = [];


/***/ }),

/***/ "./node_modules/@createjs/easeljs/src/display/Container.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@createjs/easeljs/src/display/Container.js ***!
  \*****************************************************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => /* binding */ Container
/* harmony export */ });
/* harmony import */ var _DisplayObject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./DisplayObject */ "./node_modules/@createjs/easeljs/src/display/DisplayObject.js");
/**
 * @license Container
 * Visit http://createjs.com/ for documentation, updates and examples.
 *
 * Copyright (c) 2017 gskinner.com, inc.
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */



/**
 * A Container is a nestable display list that allows you to work with compound display elements. For  example you could
 * group arm, leg, torso and head {{#crossLink "Bitmap"}}{{/crossLink}} instances together into a Person Container, and
 * transform them as a group, while still being able to move the individual parts relative to each other. Children of
 * containers have their `transform` and `alpha` properties concatenated with their parent
 * Container.
 *
 * For example, a {{#crossLink "Shape"}}{{/crossLink}} with x=100 and alpha=0.5, placed in a Container with `x=50`
 * and `alpha=0.7` will be rendered to the canvas at `x=150` and `alpha=0.35`.
 * Containers have some overhead, so you generally shouldn't create a Container to hold a single child.
 *
 * @memberof easeljs
 * @extends easeljs.DisplayObject
 * @example
 * import { Container } from "@createjs/easeljs";
 * const container = new Container();
 * container.addChild(bitmapInstance, shapeInstance);
 * container.x = 100;
 */
class Container extends _DisplayObject__WEBPACK_IMPORTED_MODULE_0__.default {

	constructor () {
		super();

		/**
		 * The array of children in the display list. You should usually use the child management methods such as
		 * {@link easeljs.Container#addChild}, {@link easeljs.Container#removeChild}, {@link easeljs.Container#swapChildren},
		 * etc, rather than accessing this directly, but it is included for advanced uses.
		 * @type {Array}
		 * @default []
		 */
		this.children = [];

		/**
		 * Indicates whether the children of this container are independently enabled for mouse/pointer interaction.
		 * If false, the children will be aggregated under the container - for example, a click on a child shape would
		 * trigger a click event on the container.
		 * @type {Boolean}
		 * @default true
		 */
		this.mouseChildren = true;

		/**
		 * If false, the tick will not be propagated to children of this Container. This can provide some performance benefits.
		 * In addition to preventing the {@link core.Ticker#event:tick} event from being dispatched, it will also prevent tick related updates
		 * on some display objects (ex. Sprite & MovieClip frame advancing, DOMElement visibility handling).
		 * @type {Boolean}
		 * @default true
		 */
		this.tickChildren = true;
	}

	/**
	 * Returns the number of children in the container.
	 * @type {Number}
	 * @readonly
	 */
	get numChildren () {
		return this.children.length;
	}

	isVisible () {
		let hasContent = this.cacheCanvas || this.children.length;
		return !!(this.visible && this.alpha > 0 && this.scaleX != 0 && this.scaleY != 0 && hasContent);
	}

	draw (ctx, ignoreCache = false) {
		if (super.draw(ctx, ignoreCache)) { return true; }

		// this ensures we don't have issues with display list changes that occur during a draw:
		let list = this.children.slice();
		for (let i=0,l=list.length; i<l; i++) {
			let child = list[i];
			if (!child.isVisible()) { continue; }

			// draw the child:
			ctx.save();
			child.updateContext(ctx);
			child.draw(ctx);
			ctx.restore();
		}
		return true;
	}

	/**
	 * Adds a child to the top of the display list.
	 *
	 * @example
	 * container.addChild(bitmapInstance);
	 * // You can also add multiple children at once:
	 * container.addChild(bitmapInstance, shapeInstance, textInstance);
	 *
	 * @param {...easeljs.DisplayObject} children The display object(s) to add.
	 * @return {easeljs.DisplayObject} The child that was added, or the last child if multiple children were added.
	 */
	addChild (...children) {
		const l = children.length;
		if (l === 0) { return null; }
		let child = children[0];
		if (l > 1) {
			for (let i = 0; i < l; i++) { child = this.addChild(children[i]); }
			return child;
		}
    // Note: a lot of duplication with addChildAt, but push is WAY faster than splice.
    let parent = child.parent, silent = parent === this;
    parent && parent._removeChildAt(parent.children.indexOf(child), silent);
		child.parent = this;
		this.children.push(child);
    if (!silent) { child.dispatchEvent("added"); }
		return child;
	}

	/**
	 * Adds a child to the display list at the specified index, bumping children at equal or greater indexes up one, and
	 * setting its parent to this container.
	 *
	 * @example
	 * container.addChildAt(child1, index);
	 * // You can also add multiple children, such as:
	 * container.addChildAt(child1, child2, ..., index);
	 * // The index must be between 0 and numChildren. For example, to add myShape under otherShape in the display list, you could use:
	 * container.addChildAt(myShape, container.getChildIndex(otherShape));
	 * // This would also bump otherShape's index up by one. Fails silently if the index is out of range.
	 *
	 * @param {...easeljs.DisplayObject} children The display object(s) to add.
	 * @param {Number} index The index to add the child at.
	 * @return {easeljs.DisplayObject} Returns the last child that was added, or the last child if multiple children were added.
	 */
	addChildAt (...children) {
		const l = children.length;
    if (l === 0) { return null; }
    let index = children.pop();
		if (index < 0 || index > this.children.length) { return children[l - 2]; }
		if (l > 2) {
			for (let i = 0; i < l - 1; i++) { this.addChildAt(children[i], index++); }
			return children[l - 2];
		}
		let child = children[0];
    let parent = child.parent, silent = parent === this;
    parent && parent._removeChildAt(parent.children.indexOf(child), silent);
		child.parent = this;
		this.children.splice(index++, 0, child);
    if (!silent) { child.dispatchEvent("added"); }
		return child;
	}

	/**
	 * Removes the specified child from the display list. Note that it is faster to use removeChildAt() if the index is
	 * already known.
	 *
	 * @example
	 * container.removeChild(child);
	 * // You can also remove multiple children:
	 * container.removeChild(child1, child2, ...);
	 *
	 * @param {...easeljs.DisplayObject} children The display object(s) to remove.
	 * @return {Boolean} true if the child (or children) was removed, or false if it was not in the display list.
	 */
	removeChild (...children) {
		const l = children.length;
    if (l === 0) { return true; }
		if (l > 1) {
			let good = true;
			for (let i = 0; i < l; i++) { good = good && this.removeChild(children[i]); }
			return good;
		}
		return this._removeChildAt(this.children.indexOf(children[0]));
	}

	/**
	 * Removes the child at the specified index from the display list, and sets its parent to null.
	 *
	 * @example
	 * container.removeChildAt(2);
	 * // You can also remove multiple children:
	 * container.removeChildAt(2, 7, ...)
	 *
	 * @param {...Number} indexes The indexes of children to remove.
	 * @return {Boolean} true if the child (or children) was removed, or false if any index was out of range.
	 */
	removeChildAt (...indexes) {
		const l = indexes.length;
    if (l === 0) { return true; }
		if (l > 1) {
			indexes.sort((a, b) => b - a);
			let good = true;
			for (let i = 0; i < l; i++) { good = good && this._removeChildAt(indexes[i]); }
			return good;
		}
		return this._removeChildAt(indexes[0]);
	}

	/**
	 * Removes all children from the display list.
	 */
	removeAllChildren () {
		let kids = this.children;
		while (kids.length) { this._removeChildAt(0); }
	}

	/**
	 * Returns the child at the specified index.
	 * @param {Number} index The index of the child to return.
	 * @return {easeljs.DisplayObject} The child at the specified index. Returns null if there is no child at the index.
	 */
	getChildAt (index) {
		return this.children[index];
	}

	/**
	 * Returns the child with the specified name.
	 * @param {String} name The name of the child to return.
	 * @return {easeljs.DisplayObject} The child with the specified name.
	 */
	getChildByName (name) {
		let kids = this.children;
		const l = kids.length;
		for (let i = 0; i < l; i++) {
			if (kids[i].name === name) { return kids[i]; }
		}
		return null;
	}

	/**
	 * Performs an array sort operation on the child list.
	 *
	 * @example
	 * // Display children with a higher y in front.
	 * container.sortChildren((obj1, obj2, options) => {
	 * 	 if (obj1.y > obj2.y) { return 1; }
	 *   if (obj1.y < obj2.y) { return -1; }
	 *   return 0;
	 * });
	 *
	 * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort}
	 * @param {Function} sortFunction the function to use to sort the child list.
	 */
	sortChildren (sortFunction) {
		this.children.sort(sortFunction);
	}

	/**
	 * Returns the index of the specified child in the display list, or -1 if it is not in the display list.
	 * @param {easeljs.DisplayObject} child The child to return the index of.
	 * @return {Number} The index of the specified child. -1 if the child is not found.
	 */
	getChildIndex (child) {
		return this.children.indexOf(child);
	}

	/**
	 * Swaps the children at the specified indexes. Fails silently if either index is out of range.
	 * @param {Number} index1
	 * @param {Number} index2
	 */
	swapChildrenAt (index1, index2) {
		let kids = this.children;
		let o1 = kids[index1];
		let o2 = kids[index2];
		if (!o1 || !o2) { return; }
		kids[index1] = o2;
		kids[index2] = o1;
	};

	/**
	 * Swaps the specified children's depth in the display list. Fails silently if either child is not a child of this
	 * Container.
	 * @param {easeljs.DisplayObject} child1
	 * @param {easeljs.DisplayObject} child2
	 */
	swapChildren (child1, child2) {
		let kids = this.children;
		const l = kids.length;
		let index1,index2;
		for (var i = 0; i < l; i++) {
			if (kids[i] === child1) { index1 = i; }
			if (kids[i] === child2) { index2 = i; }
			if (index1 != null && index2 != null) { break; }
		}
		if (i === l) { return; } // TODO: throw error?
		kids[index1] = child2;
		kids[index2] = child1;
	}

	/**
	 * Changes the depth of the specified child. Fails silently if the child is not a child of this container, or the index is out of range.
	 * @param {easeljs.DisplayObject} child
	 * @param {Number} index
	 */
	setChildIndex (child, index) {
		let kids = this.children;
		const l = kids.length;
		if (child.parent != this || index < 0 || index >= l) { return; }
		for (var i = 0; i < l; i++) {
			if (kids[i] === child) { break; }
		}
		if (i === l || i === index) { return; }
		kids.splice(i, 1);
		kids.splice(index, 0, child);
	}

	/**
	 * Returns true if the specified display object either is this container or is a descendent (child, grandchild, etc)
	 * of this container.
	 * @param {easeljs.DisplayObject} child The DisplayObject to be checked.
	 * @return {Boolean} true if the specified display object either is this container or is a descendent.
	 */
	contains (child) {
		while (child) {
			if (child === this) { return true; }
			child = child.parent;
		}
		return false;
	}

	/**
	 * Tests whether the display object intersects the specified local point (ie. draws a pixel with alpha > 0 at the
	 * specified position). This ignores the alpha, shadow and compositeOperation of the display object, and all
	 * transform properties including regX/Y.
	 * @param {Number} x The x position to check in the display object's local coordinates.
	 * @param {Number} y The y position to check in the display object's local coordinates.
	 * @return {Boolean} A Boolean indicating whether there is a visible section of a DisplayObject that overlaps the specified
	 * coordinates.
	 */
	hitTest (x, y) {
		// TODO: optimize to use the fast cache check where possible.
		return this.getObjectUnderPoint(x, y) != null;
	}

	/**
	 * Returns an array of all display objects under the specified coordinates that are in this container's display
	 * list. This routine ignores any display objects with {@link easeljs.DisplayObject#mouseEnabled} set to `false`.
	 * The array will be sorted in order of visual depth, with the top-most display object at index 0.
	 * This uses shape based hit detection, and can be an expensive operation to run, so it is best to use it carefully.
	 * For example, if testing for objects under the mouse, test on tick (instead of on {@link easeljs.DisplayObject#event:mousemove}),
	 * and only if the mouse's position has changed.
	 *
	 * <ul>
	 *   <li>By default (mode=0) this method evaluates all display objects.</li>
	 *   <li>By setting the `mode` parameter to `1`, the {@link easeljs.DisplayObject#mouseEnabled}
	 *       and {@link easeljs.DisplayObject#mouseChildren} properties will be respected.</li>
	 *   <li>Setting the `mode` to `2` additionally excludes display objects that do not have active mouse event
	 *       listeners or a {@link easeljs.DisplayObject#cursor} property. That is, only objects
	 *       that would normally intercept mouse interaction will be included. This can significantly improve performance
	 *       in some cases by reducing the number of display objects that need to be tested.</li>
	 * </ul>
	 *
	 * This method accounts for both {@link easeljs.DisplayObject#hitArea} and {@link easeljs.DisplayObject#mask}.
	 *
	 * @param {Number} x The x position in the container to test.
	 * @param {Number} y The y position in the container to test.
	 * @param {Number} [mode=0] The mode to use to determine which display objects to include. 0-all, 1-respect mouseEnabled/mouseChildren, 2-only mouse opaque objects.
	 * @return {Array<easeljs.DisplayObject>} An array of DisplayObjects under the specified coordinates.
	 */
	getObjectsUnderPoint (x, y, mode = 0) {
		let arr = [];
		let pt = this.localToGlobal(x, y);
		this._getObjectsUnderPoint(pt.x, pt.y, arr, mode > 0, mode === 1);
		return arr;
	}

	/**
	 * Similar to {@link easeljs.Container#getObjectsUnderPoint}, but returns only the top-most display
	 * object. This runs significantly faster than `getObjectsUnderPoint()`, but is still potentially an expensive
	 * operation.
	 *
	 * @param {Number} x The x position in the container to test.
	 * @param {Number} y The y position in the container to test.
	 * @param {Number} [mode=0] The mode to use to determine which display objects to include.  0-all, 1-respect mouseEnabled/mouseChildren, 2-only mouse opaque objects.
	 * @return {easeljs.DisplayObject} The top-most display object under the specified coordinates.
	 */
	getObjectUnderPoint (x, y, mode = 0) {
		let pt = this.localToGlobal(x, y);
		return this._getObjectsUnderPoint(pt.x, pt.y, null, mode > 0, mode === 1);
	}

	getBounds () {
		return this._getBounds(null, true);
	}

	getTransformedBounds () {
		return this._getBounds();
	}

	/**
	 * Returns a clone of this Container. Some properties that are specific to this instance's current context are
	 * reverted to their defaults (for example `.parent`).
	 * @param {Boolean} [recursive=false] If true, all of the descendants of this container will be cloned recursively. If false, the
	 * properties of the container will be cloned, but the new instance will not have any children.
	 * @return {easeljs.Container} A clone of the current Container instance.
	 */
	clone (recursive = false) {
		let o = this._cloneProps(new Container());
		if (recursive) { this._cloneChildren(o); }
		return o;
	}

	_tick (evtObj) {
		if (this.tickChildren) {
			for (let i = this.children.length - 1; i >= 0; i--) {
				let child = this.children[i];
				if (child.tickEnabled && child._tick) { child._tick(evtObj); }
			}
		}
		super._tick(evtObj);
	}

	/**
	 * Recursively clones all children of this container, and adds them to the target container.
	 * @protected
	 * @param {easeljs.Container} o The target container.
	 */
	_cloneChildren (o) {
		if (o.children.length) { o.removeAllChildren(); }
		let arr = o.children;
		const l = this.children.length;
		for (let i = 0; i < l; i++) {
			let clone = this.children[i].clone(true);
			clone.parent = o;
			arr.push(clone);
		}
	}

  /**
   * Removes the child at the specified index from the display list, and sets its parent to null.
   * Used by `removeChildAt`, `addChild`, and `addChildAt`.
   *
   * @protected
   * @param {Number} index The index of the child to remove.
   * @param {Boolean} [silent=false] Prevents dispatch of `removed` event if true.
   * @return {Boolean} true if the child (or children) was removed, or false if any index was out of range.
   */
  _removeChildAt (index, silent = false) {
		if (index < 0 || index > this.children.length - 1) { return false; }
		let child = this.children[index];
		if (child) { child.parent = null; }
		this.children.splice(index, 1);
		if (!silent) { child.dispatchEvent("removed"); }
		return true;
  }

	/**
	 * @protected
	 * @param {Number} x
	 * @param {Number} y
	 * @param {Array} arr
	 * @param {Boolean} mouse If true, it will respect mouse interaction properties like mouseEnabled, mouseChildren, and active listeners.
	 * @param {Boolean} activeListener If true, there is an active mouse event listener on a parent object.
	 * @param {Number} [currentDepth=0] Indicates the current depth of the search.
	 * @return {easeljs.DisplayObject}
	 */
	_getObjectsUnderPoint (x, y, arr, mouse, activeListener, currentDepth = 0) {
		if (!currentDepth && !this._testMask(this, x, y)) { return null; }
		let mtx, ctx = _DisplayObject__WEBPACK_IMPORTED_MODULE_0__.default._hitTestContext;
		activeListener = activeListener || (mouse && this._hasMouseEventListener());

		// draw children one at a time, and check if we get a hit:
		let children = this.children;
		const l = children.length;
		for (let i = l - 1; i >= 0; i--) {
			let child = children[i];
			let hitArea = child.hitArea;
			if (!child.visible || (!hitArea && !child.isVisible()) || (mouse && !child.mouseEnabled)) { continue; }
			if (!hitArea && !this._testMask(child, x, y)) { continue; }

			// if a child container has a hitArea then we only need to check its hitArea, so we can treat it as a normal DO:
			if (!hitArea && child instanceof Container) {
				let result = child._getObjectsUnderPoint(x, y, arr, mouse, activeListener, currentDepth + 1);
				if (!arr && result) { return (mouse && !this.mouseChildren) ? this : result; }
			} else {
				if (mouse && !activeListener && !child._hasMouseEventListener()) { continue; }

				// TODO: can we pass displayProps forward, to avoid having to calculate this backwards every time? It's kind of a mixed bag. When we're only hunting for DOs with event listeners, it may not make sense.
				let props = child.getConcatenatedDisplayProps(child._props);
				mtx = props.matrix;

				if (hitArea) {
					mtx.appendMatrix(hitArea.getMatrix(hitArea._props.matrix));
					props.alpha = hitArea.alpha;
				}

				ctx.globalAlpha = props.alpha;
				ctx.setTransform(mtx.a, mtx.b, mtx.c, mtx.d, mtx.tx-x, mtx.ty-y);
				(hitArea || child).draw(ctx);
				if (!this._testHit(ctx)) { continue; }
				ctx.setTransform(1, 0, 0, 1, 0, 0);
				ctx.clearRect(0, 0, 2, 2);
				if (arr) { arr.push(child); }
				else { return (mouse && !this.mouseChildren) ? this : child; }
			}
		}
		return null;
	}

	/**
	 * @protected
	 * @param {easeljs.DisplayObject} target
	 * @param {Number} x
	 * @param {Number} y
	 * @return {Boolean} Indicates whether the x/y is within the masked region.
	 */
	_testMask (target, x, y) {
		let mask = target.mask;
		if (!mask || !mask.graphics || mask.graphics.isEmpty()) { return true; }

		let mtx = this._props.matrix, parent = target.parent;
		mtx = parent ? parent.getConcatenatedMatrix(mtx) : mtx.identity();
		mtx = mask.getMatrix(mask._props.matrix).prependMatrix(mtx);

		let ctx = _DisplayObject__WEBPACK_IMPORTED_MODULE_0__.default._hitTestContext;
		ctx.setTransform(mtx.a, mtx.b, mtx.c, mtx.d, mtx.tx-x, mtx.ty-y);

		// draw the mask as a solid fill:
		mask.graphics.drawAsPath(ctx);
		ctx.fillStyle = "#000";
		ctx.fill();

		if (!this._testHit(ctx)) { return false; }
		ctx.setTransform(1, 0, 0, 1, 0, 0);
		ctx.clearRect(0, 0, 2, 2);

		return true;
	}

	/**
	 * @protected
	 * @param {easeljs.Matrix2D} matrix
	 * @param {Boolean} ignoreTransform If true, does not apply this object's transform.
	 * @return {easeljs.Rectangle}
	 */
	_getBounds (matrix, ignoreTransform) {
		let bounds = super.getBounds();
		if (bounds) { return this._transformBounds(bounds, matrix, ignoreTransform); }

		let mtx = this._props.matrix;
		mtx = ignoreTransform ? mtx.identity() : this.getMatrix(mtx);
		if (matrix) { mtx.prependMatrix(matrix); }

		const l = this.children.length;
		let rect = null;
		for (let i = 0; i < l; i++) {
			let child = this.children[i];
			if (!child.visible || !(bounds = child._getBounds(mtx))) { continue; }
			if (rect) { rect.extend(bounds.x, bounds.y, bounds.width, bounds.height); }
			else { rect = bounds.clone(); }
		}
		return rect;
	}

}


/***/ }),

/***/ "./node_modules/@createjs/easeljs/src/display/DOMElement.js":
/*!******************************************************************!*\
  !*** ./node_modules/@createjs/easeljs/src/display/DOMElement.js ***!
  \******************************************************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => /* binding */ DOMElement
/* harmony export */ });
/* harmony import */ var _DisplayObject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./DisplayObject */ "./node_modules/@createjs/easeljs/src/display/DisplayObject.js");
/* harmony import */ var _geom_DisplayProps__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../geom/DisplayProps */ "./node_modules/@createjs/easeljs/src/geom/DisplayProps.js");
/**
 * @license DOMElement
 * Visit http://createjs.com/ for documentation, updates and examples.
 *
 * Copyright (c) 2017 gskinner.com, inc.
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */




/**
 * <b>This class is still experimental, and more advanced use is likely to be buggy. Please report bugs.</b>
 *
 * A DOMElement allows you to associate a HTMLElement with the display list. It will be transformed
 * within the DOM as though it is child of the {{#crossLink "Container"}}{{/crossLink}} it is added to. However, it is
 * not rendered to canvas, and as such will retain whatever z-index it has relative to the canvas (ie. it will be
 * drawn in front of or behind the canvas).
 *
 * The position of a DOMElement is relative to their parent node in the DOM. It is recommended that
 * the DOM Object be added to a div that also contains the canvas so that they share the same position
 * on the page.
 *
 * DOMElement is useful for positioning HTML elements over top of canvas content, and for elements
 * that you want to display outside the bounds of the canvas. For example, a tooltip with rich HTML
 * content.
 *
 * <h4>Mouse Interaction</h4>
 *
 * DOMElement instances are not full EaselJS display objects, and do not participate in EaselJS mouse
 * events or support methods like hitTest. To get mouse events from a DOMElement, you must instead add handlers to
 * the htmlElement (note, this does not support EventDispatcher)
 *
 *      var domElement = new createjs.DOMElement(htmlElement);
 *      domElement.htmlElement.onclick = function() {
 *          console.log("clicked");
 *      }
 *
 * <strong>Important:</strong> This class needs to be notified it is about to be drawn, this will happen automatically
 * if you call stage.update, calling stage.draw or disabling tickEnabled will miss important steps and it will render
 * stale information.
 *
 * @memberof easeljs
 * @extends DisplayObject
 * @param {HTMLElement | String} htmlElement A reference or id for the DOM element to manage.
 */
class DOMElement extends _DisplayObject__WEBPACK_IMPORTED_MODULE_0__.default {

	constructor (htmlElement) {
		super();

		if (typeof htmlElement === "string") { htmlElement = document.getElementById(htmlElement); }
		this.mouseEnabled = false;

		let style = htmlElement.style;
		style.position = "absolute";
		style.transformOrigin = style.WebkitTransformOrigin = style.msTransformOrigin = style.MozTransformOrigin = style.OTransformOrigin = "0% 0%";

		/**
		 * The DOM object to manage.
		 * @type {HTMLElement}
		 */
		this.htmlElement = htmlElement;

		/**
		 * @type {easeljs.Matrix2D}
		 * @default null
		 * @protected
		 */
		this._oldProps = null;

		/**
		 * Used to track the object which this class attached listeners to, helps optimize listener attachment.
		 * @type {easeljs.Stage}
		 * @default null
		 * @protected
		 */
		this._oldStage = null;
		/**
		 * The event listener proxy triggered drawing draw for special circumstances.
		 * @type {Function}
		 * @default null
		 * @protected
		 */
		this._drawAction = null;
	}

	isVisible () {
		return this.htmlElement != null;
	}

	draw (ctx, ignoreCache) {
		// this relies on the _tick method because draw isn't called if the parent is not visible.
		// the actual update happens in _handleDrawEnd
		return true;
	}

	/**
	 * Disabled in DOMElement.
	 */
	cache () {}

	/**
	 * Disabled in DOMElement.
	 */
	uncache () {}

	/**
	 * Disabled in DOMElement.
	 */
	updateCache () {}

	/**
	 * Disabled in DOMElement.
	 */
	hitTest () {}

	/**
	 * Disabled in DOMElement.
	 */
	localToGlobal () {}

	/**
	 * Disabled in DOMElement.
	 */
	globalToLocal () {}

	/**
	 * Disabled in DOMElement.
	 */
	localToLocal () {}

	/**
	 * DOMElement cannot be cloned.
	 * @throws DOMElement cannot be cloned
	 */
	clone () {
		throw "DOMElement cannot be cloned.";
	}

	_tick (evtObj) {
		let stage = this.stage;
		if (stage != null && stage !== this._oldStage) {
			this._drawAction && stage.off("drawend", this._drawAction);
			this._drawAction = stage.on("drawend", this._handleDrawEnd, this);
			this._oldStage = stage;
		}
		super._tick(evtObj);
	}

	/**
	 * @param {core.Event} evt
	 * @protected
	 */
	_handleDrawEnd (evt) {
		let o = this.htmlElement;
		if (!o) { return; }
		let style = o.style;

		let props = this.getConcatenatedDisplayProps(this._props), mtx = props.matrix;

		let visibility = props.visible ? "visible" : "hidden";
		if (visibility != style.visibility) { style.visibility = visibility; }
		if (!props.visible) { return; }

		let oldProps = this._oldProps, oldMtx = oldProps&&oldProps.matrix;
		let n = 10000; // precision

		if (!oldMtx || !oldMtx.equals(mtx)) {
			let str = "matrix(" + (mtx.a*n|0)/n +","+ (mtx.b*n|0)/n +","+ (mtx.c*n|0)/n +","+ (mtx.d*n|0)/n +","+ (mtx.tx+0.5|0);
			style.transform = style.WebkitTransform = style.OTransform = style.msTransform = str +","+ (mtx.ty+0.5|0) +")";
			style.MozTransform = str +"px,"+ (mtx.ty+0.5|0) +"px)";
			if (!oldProps) { oldProps = this._oldProps = new _geom_DisplayProps__WEBPACK_IMPORTED_MODULE_1__.default(true, null); }
			oldProps.matrix.copy(mtx);
		}

		if (oldProps.alpha != props.alpha) {
			style.opacity = ""+(props.alpha*n|0)/n;
			oldProps.alpha = props.alpha;
		}
	}

}

/**
 * Interaction events should be added to `htmlElement`, and not the DOMElement instance, since DOMElement instances
 * are not full EaselJS display objects and do not participate in EaselJS mouse events.
 * @event easeljs.DOMElement#click
 */

/**
 * Interaction events should be added to `htmlElement`, and not the DOMElement instance, since DOMElement instances
 * are not full EaselJS display objects and do not participate in EaselJS mouse events.
 * @event easeljs.DOMElement#dblClick
 */

/**
 * Interaction events should be added to `htmlElement`, and not the DOMElement instance, since DOMElement instances
 * are not full EaselJS display objects and do not participate in EaselJS mouse events.
 * @event easeljs.DOMElement#mousedown
 */

/**
 * Interaction events should be added to `htmlElement`, and not the DOMElement instance, since DOMElement instances
 * are not full EaselJS display objects and do not participate in EaselJS mouse events.
 * @event easeljs.DOMElement#mouseover
 */

/**
 * Disabled in DOMElement.
 * @event easeljs.DOMElement#tick
 */


/***/ }),

/***/ "./node_modules/@createjs/easeljs/src/display/DisplayObject.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@createjs/easeljs/src/display/DisplayObject.js ***!
  \*********************************************************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => /* binding */ DisplayObject
/* harmony export */ });
/* harmony import */ var _createjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @createjs/core */ "./node_modules/@createjs/core/src/main.js");
/* harmony import */ var _Shadow__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Shadow */ "./node_modules/@createjs/easeljs/src/display/Shadow.js");
/* harmony import */ var _utils_uid__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/uid */ "./node_modules/@createjs/easeljs/src/utils/uid.js");
/* harmony import */ var _geom_DisplayProps__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../geom/DisplayProps */ "./node_modules/@createjs/easeljs/src/geom/DisplayProps.js");
/* harmony import */ var _geom_Rectangle__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../geom/Rectangle */ "./node_modules/@createjs/easeljs/src/geom/Rectangle.js");
/* harmony import */ var _geom_Point__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../geom/Point */ "./node_modules/@createjs/easeljs/src/geom/Point.js");
/* harmony import */ var _geom_Matrix2D__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../geom/Matrix2D */ "./node_modules/@createjs/easeljs/src/geom/Matrix2D.js");
/* harmony import */ var _filters_BitmapCache__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../filters/BitmapCache */ "./node_modules/@createjs/easeljs/src/filters/BitmapCache.js");
/**
 * @license DisplayObject
 * Visit http://createjs.com/ for documentation, updates and examples.
 *
 * Copyright (c) 2017 gskinner.com, inc.
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */










/**
 * DisplayObject is an abstract class that should not be constructed directly. Instead construct subclasses such as
 * {@link easeljs.Container}, {@link easeljs.Bitmap}, and {@link easeljs.Shape}.
 * DisplayObject is the base class for all display classes in the EaselJS library. It defines the core properties and
 * methods that are shared between all display objects, such as transformation properties (x, y, scaleX, scaleY, etc),
 * caching, and mouse handlers.
 *
 * @memberof easeljs
 * @extends EventDispatcher
 */
class DisplayObject extends _createjs_core__WEBPACK_IMPORTED_MODULE_0__.EventDispatcher {

	constructor () {
		super();

		/**
		 * The alpha (transparency) for this display object. 0 is fully transparent, 1 is fully opaque.
		 * @type {Number}
		 * @default 1
		 */
		this.alpha = 1;

		/**
		 * If a cache is active, this returns the canvas that holds the image of this display object.
		 * Use this to display the result of a cache. This will be a HTMLCanvasElement unless special cache rules have been deliberately enabled for this cache.
		 * @see {@link easeljs.DisplayObject#cache}
		 * @type {HTMLCanvasElement | Object}
		 * @default null
		 * @readonly
		 */
		this.cacheCanvas = null;

		/**
		 * If a cache has been made, this returns the class that is managing the cacheCanvas and its properties.
		 * @see {@link easeljs.BitmapCache}
		 * @type {easeljs.BitmapCache}
		 * @default null
		 * @readonly
		 */
		this.bitmapCache = null;

		/**
		 * Unique ID for this display object. Makes display objects easier for some uses.
		 * @type {Number}
		 */
		this.id = (0,_utils_uid__WEBPACK_IMPORTED_MODULE_2__.default)();

		/**
		 * Indicates whether to include this object when running mouse interactions. Setting this to `false` for children
		 * of a {@link easeljs.Container} will cause events on the Container to not fire when that child is
		 * clicked. Setting this property to `false` does not prevent the {@link easeljs.Container#getObjectsUnderPoint}
		 * method from returning the child.
		 *
		 * <strong>Note:</strong> In EaselJS 0.7.0, the `mouseEnabled` property will not work properly with nested Containers.
		 *
		 * @type {Boolean}
		 * @default true
		 */
		this.mouseEnabled = true;

		/**
		 * If false, the tick will not run on this display object (or its children). This can provide some performance benefits.
		 * In addition to preventing the {@link core.Ticker#event:tick} event from being dispatched, it will also prevent tick related updates
		 * on some display objects (ex. Sprite & MovieClip frame advancing, DOMElement visibility handling).
		 * @type Boolean
		 * @default true
		 */
		this.tickEnabled = true;

		/**
		 * An optional name for this display object. Included in {@link easeljs.DisplayObject#toString}. Useful for debugging.
		 * @type {String}
		 * @default null
		 */
		this.name = null;

		/**
		 * A reference to the {@link easeljs.Container} or {@link easeljs.Stage} object that
		 * contains this display object, or null if it has not been added to one.
		 * @type {easeljs.Container}
		 * @default null
		 * @readonly
		 */
		this.parent = null;

		/**
		 * The left offset for this display object's registration point. For example, to make a 100x100px Bitmap rotate
		 * around its center, you would set regX and {@link easeljs.DisplayObject#regY} to 50.
		 * @type {Number}
		 * @default 0
		 */
		this.regX = 0;

		/**
		 * The y offset for this display object's registration point. For example, to make a 100x100px Bitmap rotate around
		 * its center, you would set {@link easeljs.DisplayObject#regX} and regY to 50.
		 * @type {Number}
		 * @default 0
		 */
		this.regY = 0;

		/**
		 * The rotation in degrees for this display object.
		 * @type {Number}
		 * @default 0
		 */
		this.rotation = 0;

		/**
		 * The factor to stretch this display object horizontally. For example, setting scaleX to 2 will stretch the display
		 * object to twice its nominal width. To horizontally flip an object, set the scale to a negative number.
		 * @type {Number}
		 * @default 1
		 */
		this.scaleX = 1;

		/**
		 * The factor to stretch this display object vertically. For example, setting scaleY to 0.5 will stretch the display
		 * object to half its nominal height. To vertically flip an object, set the scale to a negative number.
		 * @type {Number}
		 * @default 1
		 */
		this.scaleY = 1;

		/**
		 * The factor to skew this display object horizontally.
		 * @type {Number}
		 * @default 0
		 */
		this.skewX = 0;

		/**
		 * The factor to skew this display object vertically.
		 * @type {Number}
		 * @default 0
		 */
		this.skewY = 0;

		/**
		 * A shadow object that defines the shadow to render on this display object. Set to `null` to remove a shadow. If
		 * null, this property is inherited from the parent container.
		 * @type {easeljs.Shadow}
		 * @default null
		 */
		this.shadow = null;

		/**
		 * Indicates whether this display object should be rendered to the canvas and included when running the Stage
		 * {@link easeljs.Stage#getObjectsUnderPoint} method.
		 * @type {Boolean}
		 * @default true
		 */
		this.visible = true;

		/**
		 * The x (horizontal) position of the display object, relative to its parent.
		 * @type {Number}
		 * @default 0
		 */
		this.x = 0;

		/**
		 * The y (vertical) position of the display object, relative to its parent.
		 * @type {Number}
		 * @default 0
		 */
		this.y = 0;

		/**
		 * If set, defines the transformation for this display object, overriding all other transformation properties
		 * (x, y, rotation, scale, skew).
		 * @type {easeljs.Matrix2D}
		 * @default null
		 */
		this.transformMatrix = null;

		/**
		 * The composite operation indicates how the pixels of this display object will be composited with the elements
		 * behind it. If `null`, this property is inherited from the parent container.
		 * @see {@link http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#compositing "WHATWG spec on compositing"}
		 * @type {String}
		 * @default null
		 */
		this.compositeOperation = null;

		/**
		 * Indicates whether the display object should be drawn to a whole pixel when {@link easeljs.Stage#snapToPixelEnabled} is true.
		 * To enable/disable snapping on whole categories of display objects, set this value on the prototype (Ex. Text.prototype.snapToPixel = true).
		 * @type {Boolean}
		 * @default true
		 */
		this.snapToPixel = true;

		/**
		 * An array of Filter objects to apply to this display object. Filters are only applied / updated when {@link easeljs.DisplayObject#cache}
		 * or {@link easeljs.DisplayObject#updateCache} is called on the display object, and only apply to the area that is cached.
		 * @type {Array<easeljs.Filter>}
		 * @default null
		 */
		this.filters = null;

		/**
		 * A Shape instance that defines a vector mask (clipping path) for this display object.  The shape's transformation
		 * will be applied relative to the display object's parent coordinates (as if it were a child of the parent).
		 * @type {easeljs.Shape}
		 * @default null
		 */
		this.mask = null;

		/**
		 * A display object that will be tested when checking mouse interactions or testing {@link easeljs.Container#getObjectsUnderPoint}.
		 * The hit area will have its transformation applied relative to this display object's coordinate space (as though
		 * the hit test object were a child of this display object and relative to its regX/Y). The hitArea will be tested
		 * using only its own `alpha` value regardless of the alpha value on the target display object, or the target's
		 * ancestors (parents).
		 *
		 * If set on a {@link easeljs.Container}, children of the Container will not receive mouse events.
		 * This is similar to setting {@link easeljs.DisplayObject#mouseChildren} to false.
		 *
		 * Note that hitArea is NOT currently used by the `hitTest()` method, nor is it supported for {@link easeljs.Stage}.
		 *
		 * @type {easeljs.DisplayObject}
		 * @default null
		 */
		this.hitArea = null;

		/**
		 * A CSS cursor (ex. "pointer", "help", "text", etc) that will be displayed when the user hovers over this display
		 * object. You must enable mouseover events using the {@link easeljs.Stage#enableMouseOver} method to
		 * use this property. Setting a non-null cursor on a Container will override the cursor set on its descendants.
		 *
		 * @type {String}
		 * @default null
		 */
		this.cursor = null;

		/**
		 * @protected
		 * @type {easeljs.DisplayProps}
		 */
		this._props = new _geom_DisplayProps__WEBPACK_IMPORTED_MODULE_3__.default();

		/**
		 * @protected
		 * @type {easeljs.Rectangle}
		 */
		this._rectangle = new _geom_Rectangle__WEBPACK_IMPORTED_MODULE_4__.default();

		/**
		 * @protected
		 * @type {easeljs.Rectangle}
		 * @default null
		 */
		this._bounds = null;

		/**
		 * Where StageGL should look for required display properties, matters only for leaf display objects. Containers
		 * or cached objects won't use this property, it's for native display of terminal elements.
		 * @protected
		 * @type {Number}
		 * @default 0
		 */
		this._webGLRenderStyle = DisplayObject._StageGL_NONE;
	}

	/**
	 * Returns the {@link easeljs.Stage} instance that this display object will be rendered on, or null if it has not been added to one.
	 * @type {Stage}
	 * @readonly
	 */
	get stage () {
		// uses dynamic access to avoid circular dependencies;
		let o = this;
		while (o.parent) { o = o.parent; }
		if (/^\[Stage(GL)?(\s\(name=\w+\))?\]$/.test(o.toString())) { return o; }
		return null;
	}

	/**
	 * Set both the {@link easeljs.DisplayObject#scaleX} and the {@link easeljs.DisplayObject#scaleY} property to the same value.
	 * Note that when you get the value, if the `scaleX` and `scaleY` are different values, it will return only the `scaleX`.
	 * @type {Number}
	 * @default 1
	 */
	set scale (value) { this.scaleX = this.scaleY = value; }
	get scale () { return this.scaleX; }

	/**
	 * Returns true or false indicating whether the display object would be visible if drawn to a canvas.
	 * This does not account for whether it would be visible within the boundaries of the stage.
	 * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.
	 * @return {Boolean} Boolean indicating whether the display object would be visible if drawn to a canvas
	 */
	isVisible () {
		return !!(this.visible && this.alpha > 0 && this.scaleX != 0 && this.scaleY != 0);
	}

	/**
	 * Alias for drawCache(). Used by grandchildren (or deeper) in their draw method to directly
	 * call {@link easeljs.DisplayObject#drawCache}, bypassing their parent(s).
	 *
	 * @param {CanvasRenderingContext2D} ctx The canvas 2D context object to draw into.
	 * @param {Boolean} [ignoreCache=false] Indicates whether the draw operation should ignore any current cache. For example,
	 * used for drawing the cache (to prevent it from simply drawing an existing cache back into itself).
	 * @return {Boolean}
	 */
	draw (ctx, ignoreCache = false) {
		return this.drawCache(ctx, ignoreCache);
	}

	/**
	 * Draws the display object into the specified context ignoring its visible, alpha, shadow, and transform.
	 * Returns `true` if the draw was handled (useful for overriding functionality).
	 *
	 * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.
	 * @param {CanvasRenderingContext2D} ctx The canvas 2D context object to draw into.
	 * @param {Boolean} [ignoreCache=false] Indicates whether the draw operation should ignore any current cache. For example,
	 * used for drawing the cache (to prevent it from simply drawing an existing cache back into itself).
	 * @return {Boolean}
	 */
	drawCache (ctx, ignoreCache = false) {
		let cache = this.bitmapCache;
		if (cache && !ignoreCache) {
			return cache.draw(ctx);
		}
		return false;
	}

	/**
	 * Applies this display object's transformation, alpha, globalCompositeOperation, clipping path (mask), and shadow
	 * to the specified context. This is typically called prior to {@link easeljs.DisplayObject#draw}.
	 * @param {CanvasRenderingContext2D} ctx The canvas 2D to update.
	 */
	updateContext (ctx) {
		let o=this, mask=o.mask, mtx=o._props.matrix;

		if (mask && mask.graphics && !mask.graphics.isEmpty()) {
			mask.getMatrix(mtx);
			ctx.transform(mtx.a, mtx.b, mtx.c, mtx.d, mtx.tx, mtx.ty);

			mask.graphics.drawAsPath(ctx);
			ctx.clip();

			mtx.invert();
			ctx.transform(mtx.a,  mtx.b, mtx.c, mtx.d, mtx.tx, mtx.ty);
		}

		this.getMatrix(mtx);
		let tx = mtx.tx, ty = mtx.ty;
		if (DisplayObject._snapToPixelEnabled && o.snapToPixel) {
			tx = tx + (tx < 0 ? -0.5 : 0.5) | 0;
			ty = ty + (ty < 0 ? -0.5 : 0.5) | 0;
		}
		ctx.transform(mtx.a,  mtx.b, mtx.c, mtx.d, tx, ty);
		ctx.globalAlpha *= o.alpha;
		if (o.compositeOperation) { ctx.globalCompositeOperation = o.compositeOperation; }
		if (o.shadow) { this._applyShadow(ctx, o.shadow); }
	}

	/**
	 * Draws the display object into a new element, which is then used for subsequent draws. Intended for complex content
	 * that does not change frequently (ex. a Container with many children that do not move, or a complex vector Shape),
	 * this can provide for much faster rendering because the content does not need to be re-rendered each tick. The
	 * cached display object can be moved, rotated, faded, etc freely, however if its content changes, you must manually
	 * update the cache by calling `updateCache()` again. You must specify the cached area via the x, y, w,
	 * and h parameters. This defines the rectangle that will be rendered and cached using this display object's coordinates.
	 *
	 * Note that filters need to be defined <em>before</em> the cache is applied or you will have to call updateCache after
	 * application. Check out the {@link easeljs.Filter} class for more information. Some filters
	 * (ex. {@link easeljs.BlurFilter}) may not work as expected in conjunction with the scale param.
	 *
	 * Usually, the resulting cacheCanvas will have the dimensions width*scale by height*scale, however some filters (ex. BlurFilter)
	 * will add padding to the canvas dimensions.
	 *
	 * Actual implementation of the caching mechanism can change with a {@link easeljs.StageGL} and so
	 * all caching and filter behaviour has been moved to the {@link easeljs.BitmapCache}
	 *
	 * @example
	 * // If you defined a Shape that drew a circle at 0, 0 with a radius of 25:
	 * var shape = new createjs.Shape();
	 * shape.graphics.beginFill("#ff0000").drawCircle(0, 0, 25);
	 * shape.cache(-25, -25, 50, 50);
	 *
	 * @param {Number} x The x coordinate origin for the cache region.
	 * @param {Number} y The y coordinate origin for the cache region.
	 * @param {Number} width The width of the cache region.
	 * @param {Number} height The height of the cache region.
	 * @param {Number} [scale=1] The scale at which the cache will be created. For example, if you cache a vector shape using
	 * 	myShape.cache(0,0,100,100,2) then the resulting cacheCanvas will be 200x200 px. This lets you scale and rotate
	 * 	cached elements with greater fidelity. Default is 1.
	 * @param {Object} [options] When using alternate displays there may be extra caching opportunities or needs.
	 */
	cache (x, y, width, height, scale = 1, options) {
		if (!this.bitmapCache) {
			this.bitmapCache = new _filters_BitmapCache__WEBPACK_IMPORTED_MODULE_7__.default();
		}
		this.bitmapCache.define(this, x, y, width, height, scale, options);
	}

	/**
	 * Redraws the display object to its cache. Calling updateCache without an active cache will throw an error.
	 * If compositeOperation is null the current cache will be cleared prior to drawing. Otherwise the display object
	 * will be drawn over the existing cache using the specified compositeOperation.
	 *
	 * Actual implementation of the caching mechanism can change with a {@link easeljs.StageGL} and so
	 * all caching and filter behaviour has been moved to the {@link easeljs.BitmapCache}
	 *
	 * @example
	 * // clear current graphics
	 * shapeInstance.clear();
	 * // draw new instructions
	 * shapeInstance.setStrokeStyle(3).beginStroke("#FF0000").moveTo(100, 100).lineTo(200,200);
	 * // update cache, drawing new line on top of old one
	 * shapeInstance.updateCache();
	 *
	 * @see {@link http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#compositing "WHATWG spec on compositing"}
	 * @param {String} compositeOperation The compositeOperation to use, or null to clear the cache and redraw it.
	 */
	updateCache (compositeOperation) {
		if (!this.bitmapCache) {
			throw "No cache found. cache() must be called before updateCache()";
		}
		this.bitmapCache.update(compositeOperation);
	}

	/**
	 * Clears the current cache.
	 * @see {@link easeljs.DisplayObject.#cache}
	 */
	uncache () {
		if (this.bitmapCache) {
			this.bitmapCache.release();
			this.bitmapCache = undefined;
		}
	}

	/**
	 * Returns a data URL for the cache, or null if this display object is not cached.
	 * Only generated if the cache has changed, otherwise returns last result.
	 * @return {String} The image data url for the cache.
	 */
	getCacheDataURL () {
		return this.bitmapCache ? this.bitmapCache.getDataURL() : null;
	}

	/**
	 * Transforms the specified x and y position from the coordinate space of the display object
	 * to the global (stage) coordinate space. For example, this could be used to position an HTML label
	 * over a specific point on a nested display object. Returns a Point instance with x and y properties
	 * correlating to the transformed coordinates on the stage.
	 *
	 * @example
	 * displayObject.x = 300;
	 * displayObject.y = 200;
	 * stage.addChild(displayObject);
	 * let point = displayObject.localToGlobal(100, 100);
	 * // Results in x=400, y=300
	 *
	 * @param {Number} x The x position in the source display object to transform.
	 * @param {Number} y The y position in the source display object to transform.
	 * @param {easeljs.Point | Object} [pt=Point] An object to copy the result into. If omitted a new Point object with x/y properties will be returned.
	 * @return {easeljs.Point} A Point instance with x and y properties correlating to the transformed coordinates
	 * on the stage.
	 */
	localToGlobal (x, y, pt = new _geom_Point__WEBPACK_IMPORTED_MODULE_5__.default()) {
		return this.getConcatenatedMatrix(this._props.matrix).transformPoint(x, y, pt);
	}

	/**
	 * Transforms the specified x and y position from the global (stage) coordinate space to the
	 * coordinate space of the display object. For example, this could be used to determine
	 * the current mouse position within the display object. Returns a Point instance with x and y properties
	 * correlating to the transformed position in the display object's coordinate space.
	 *
	 * @example
	 * displayObject.x = 300;
	 * displayObject.y = 200;
	 * stage.addChild(displayObject);
	 * let point = displayObject.globalToLocal(100, 100);
	 * // Results in x=-200, y=-100
	 *
	 * @param {Number} x The x position on the stage to transform.
	 * @param {Number} y The y position on the stage to transform.
	 * @param {easeljs.Point | Object} [pt=Point] An object to copy the result into. If omitted a new Point object with x/y properties will be returned.
	 * @return {easeljs.Point} A Point instance with x and y properties correlating to the transformed position in the
	 * display object's coordinate space.
	 */
	globalToLocal (x, y, pt = new _geom_Point__WEBPACK_IMPORTED_MODULE_5__.default()) {
		return this.getConcatenatedMatrix(this._props.matrix).invert().transformPoint(x, y, pt);
	}

	/**
	 * Transforms the specified x and y position from the coordinate space of this display object to the coordinate
	 * space of the target display object. Returns a Point instance with x and y properties correlating to the
	 * transformed position in the target's coordinate space. Effectively the same as using the following code with
	 * {@link easeljs.DisplayObject#localToGlobal} and {@link easeljs.DisplayObject#globalToLocal}.
	 *
	 * @example
	 * // long way
	 * let pt = this.localToGlobal(x, y);
	 * pt = target.globalToLocal(pt.x, pt.y);
	 * // shorthand
	 * let pt = this.localToLocal(x, y, target);
	 *
	 * @param {Number} x The x position in the source display object to transform.
	 * @param {Number} y The y position on the source display object to transform.
	 * @param {easeljs.DisplayObject} target The target display object to which the coordinates will be transformed.
	 * @param {easeljs.Point | Object} [pt] An object to copy the result into. If omitted a new Point object with x/y properties will be returned.
	 * @return {easeljs.Point} Returns a Point instance with x and y properties correlating to the transformed position
	 * in the target's coordinate space.
	 */
	localToLocal (x, y, target, pt) {
		pt = this.localToGlobal(x, y, pt);
		return target.globalToLocal(pt.x, pt.y, pt);
	}

	/**
	 * Shortcut method to quickly set the transform properties on the display object. All parameters are optional.
	 * Omitted parameters will have the default value set.
	 *
	 * @example
	 * displayObject.setTransform(100, 100, 2, 2);
	 *
	 * @param {Number} [x=0] The horizontal translation (x position) in pixels
	 * @param {Number} [y=0] The vertical translation (y position) in pixels
	 * @param {Number} [scaleX=1] The horizontal scale, as a percentage of 1
	 * @param {Number} [scaleY=1] the vertical scale, as a percentage of 1
	 * @param {Number} [rotation=0] The rotation, in degrees
	 * @param {Number} [skewX=0] The horizontal skew factor
	 * @param {Number} [skewY=0] The vertical skew factor
	 * @param {Number} [regX=0] The horizontal registration point in pixels
	 * @param {Number} [regY=0] The vertical registration point in pixels
	 * @return {easeljs.DisplayObject} Returns this instance. Useful for chaining commands.
	*/
	setTransform (x=0, y=0, scaleX=1, scaleY=1, rotation=0, skewX=0, skewY=0, regX=0, regY=0) {
		this.x = x;
		this.y = y;
		this.scaleX = scaleX;
		this.scaleY = scaleY;
		this.rotation = rotation;
		this.skewX = skewX;
		this.skewY = skewY;
		this.regX = regX;
		this.regY = regY;
		return this;
	}

	/**
	 * Returns a matrix based on this object's current transform.
	 * @param {easeljs.Matrix2D} [matrix] A Matrix2D object to populate with the calculated values. If null, a new Matrix object is returned.
	 * @return {easeljs.Matrix2D} A matrix representing this display object's transform.
	 */
	getMatrix (matrix) {
		let o = this, mtx = matrix&&matrix.identity() || new _geom_Matrix2D__WEBPACK_IMPORTED_MODULE_6__.default();
		return o.transformMatrix ?  mtx.copy(o.transformMatrix) : mtx.appendTransform(o.x, o.y, o.scaleX, o.scaleY, o.rotation, o.skewX, o.skewY, o.regX, o.regY);
	}

	/**
	 * Generates a Matrix2D object representing the combined transform of the display object and all of its
	 * parent Containers up to the highest level ancestor (usually the {@link easeljs.Stage}). This can
	 * be used to transform positions between coordinate spaces, such as with {@link easeljs.DisplayObject#localToGlobal}
	 * and {@link easeljs.DisplayObject#globalToLocal}.
	 *
	 * @param {easeljs.Matrix2D} [matrix] A Matrix2D object to populate with the calculated values. If null, a new Matrix2D object is returned.
	 * @return {easeljs.Matrix2D} The combined matrix.
	 */
	getConcatenatedMatrix (matrix) {
		let o = this, mtx = this.getMatrix(matrix);
		while (o = o.parent) {
			mtx.prependMatrix(o.getMatrix(o._props.matrix));
		}
		return mtx;
	}

	/**
	 * Generates a DisplayProps object representing the combined display properties of the  object and all of its
	 * parent Containers up to the highest level ancestor (usually the {@link easeljs.Stage}).
	 * @param {easeljs.DisplayProps} [props] A DisplayProps object to populate with the calculated values. If null, a new DisplayProps object is returned.
	 * @return {easeljs.DisplayProps} The combined display properties.
	 */
	getConcatenatedDisplayProps (props) {
		props = props ? props.identity() : new _geom_DisplayProps__WEBPACK_IMPORTED_MODULE_3__.default();
		let o = this, mtx = o.getMatrix(props.matrix);
		do {
			props.prepend(o.visible, o.alpha, o.shadow, o.compositeOperation);

			// we do this to avoid problems with the matrix being used for both operations when o._props.matrix is passed in as the props param.
			// this could be simplified (ie. just done as part of the prepend above) if we switched to using a pool.
			if (o != this) { mtx.prependMatrix(o.getMatrix(o._props.matrix)); }
		} while (o = o.parent);
		return props;
	}

	/**
	 * Tests whether the display object intersects the specified point in local coordinates (ie. draws a pixel with alpha > 0 at
	 * the specified position). This ignores the alpha, shadow, hitArea, mask, and compositeOperation of the display object.
	 *
	 * Please note that shape-to-shape collision is not currently supported by EaselJS.
	 *
	 * @example
	 * stage.addEventListener("stagemousedown", event => {
	 *   let hit = shape.hitTest(event.stageX, event.stageY);
	 *   // hit == true when shape is clicked
	 * });
	 *
	 * @param {Number} x The x position to check in the display object's local coordinates.
	 * @param {Number} y The y position to check in the display object's local coordinates.
	 * @return {Boolean} A Boolean indicating whether a visible portion of the DisplayObject intersect the specified
	 * local Point.
	*/
	hitTest (x, y) {
		let ctx = DisplayObject._hitTestContext;
		ctx.setTransform(1, 0, 0, 1, -x, -y);
		this.draw(ctx);

		let hit = this._testHit(ctx);
		ctx.setTransform(1, 0, 0, 1, 0, 0);
		ctx.clearRect(0, 0, 2, 2);
		return hit;
	}

	/**
	 * Provides a chainable shortcut method for setting a number of properties on the instance.
	 *
	 * @example
	 * let graphics = new Graphics().beginFill("#ff0000").drawCircle(0, 0, 25);
	 * let shape = stage.addChild(new Shape()).set({ graphics, x: 100, y: 100, alpha: 0.5 });
	 *
	 * @param {Object} props A generic object containing properties to copy to the DisplayObject instance.
	 * @return {easeljs.DisplayObject} Returns the instance the method is called on (useful for chaining calls.)
	 * @chainable
	*/
	set (props) {
		for (let n in props) { this[n] = props[n]; }
		return this;
	}

	/**
	 * Returns a rectangle representing this object's bounds in its local coordinate system (ie. with no transformation).
	 * Objects that have been cached will return the bounds of the cache.
	 *
	 * Not all display objects can calculate their own bounds (ex. Shape). For these objects, you can use
	 * {@link easeljs.DisplayObject#setBounds} so that they are included when calculating Container bounds.
	 *
	 * <table>
	 * 	<tr><td><b>All</b></td><td>
	 * 		All display objects support setting bounds manually using setBounds(). Likewise, display objects that
	 * 		have been cached using cache() will return the bounds of their cache. Manual and cache bounds will override
	 * 		the automatic calculations listed below.
	 * 	</td></tr>
	 * 	<tr><td><b>Bitmap</b></td><td>
	 * 		Returns the width and height of the sourceRect (if specified) or image, extending from (x=0,y=0).
	 * 	</td></tr>
	 * 	<tr><td><b>Sprite</b></td><td>
	 * 		Returns the bounds of the current frame. May have non-zero x/y if a frame registration point was specified
	 * 		in the spritesheet data. See also {@link easeljs.SpriteSheet#getFrameBounds}
	 * 	</td></tr>
	 * 	<tr><td><b>Container</b></td><td>
	 * 		Returns the aggregate (combined) bounds of all children that return a non-null value from getBounds().
	 * 	</td></tr>
	 * 	<tr><td><b>Shape</b></td><td>
	 * 		Does not currently support automatic bounds calculations. Use setBounds() to manually define bounds.
	 * 	</td></tr>
	 * 	<tr><td><b>Text</b></td><td>
	 * 		Returns approximate bounds. Horizontal values (x/width) are quite accurate, but vertical values (y/height) are
	 * 		not, especially when using textBaseline values other than "top".
	 * 	</td></tr>
	 * 	<tr><td><b>BitmapText</b></td><td>
	 * 		Returns approximate bounds. Values will be more accurate if spritesheet frame registration points are close
	 * 		to (x=0,y=0).
	 * 	</td></tr>
	* </table>
	 *
	 * @example
	 * /* Bounds can be expensive to calculate for some objects (ex. text, or containers with many children), and
	 * are recalculated each time you call getBounds(). You can prevent recalculation on static objects by setting the
	 * bounds explicitly. *\/
	 * let bounds = obj.getBounds();
	 * obj.setBounds(bounds.x, bounds.y, bounds.width, bounds.height);
	 * // getBounds will now use the set values, instead of recalculating
	 *
	 * @example
	 * // To reduce memory impact, the returned Rectangle instance may be reused internally
	 * let bounds = obj.getBounds().clone();
	 * // OR:
	 * rect.copy(obj.getBounds());
	 *
	 * @return {easeljs.Rectangle} A Rectangle instance representing the bounds, or null if bounds are not available for this object.
	 */
	getBounds () {
		if (this._bounds) { return this._rectangle.copy(this._bounds); }
		let cacheCanvas = this.cacheCanvas;
		if (cacheCanvas) {
			let scale = this._cacheScale;
			return this._rectangle.setValues(this._cacheOffsetX, this._cacheOffsetY, cacheCanvas.width/scale, cacheCanvas.height/scale);
		}
		return null;
	}

	/**
	 * Returns a rectangle representing this object's bounds in its parent's coordinate system (ie. with transformations applied).
	 * Objects that have been cached will return the transformed bounds of the cache.
	 *
	 * Not all display objects can calculate their own bounds (ex. Shape). For these objects, you can use
	 * {@link easeljs.DisplayObject#setBounds} so that they are included when calculating Container bounds.
	 *
	 * To reduce memory impact, the returned Rectangle instance may be reused internally; clone the instance or copy its
	 * values if you need to retain it.
	 *
	 * Container instances calculate aggregate bounds for all children that return bounds via getBounds.
	 * @return {easeljs.Rectangle} A Rectangle instance representing the bounds, or null if bounds are not available for this object.
	 */
	getTransformedBounds () {
		return this._getBounds();
	}

	/**
	 * Allows you to manually specify the bounds of an object that either cannot calculate their own bounds (ex. Shape &
	 * Text) for future reference, or so the object can be included in Container bounds. Manually set bounds will always
	 * override calculated bounds.
	 *
	 * The bounds should be specified in the object's local (untransformed) coordinates. For example, a Shape instance
	 * with a 25px radius circle centered at 0,0 would have bounds of (-25, -25, 50, 50).
	 *
	 * @param {Number} x The x origin of the bounds. Pass null to remove the manual bounds.
	 * @param {Number} y The y origin of the bounds.
	 * @param {Number} width The width of the bounds.
	 * @param {Number} height The height of the bounds.
	 */
	setBounds (x, y, width, height) {
		if (x == null) { this._bounds = null; }
		this._bounds = (this._bounds || new _geom_Rectangle__WEBPACK_IMPORTED_MODULE_4__.default()).setValues(x, y, width, height);
	}

	/**
	 * Returns a clone of this DisplayObject. Some properties that are specific to this instance's current context are
	 * reverted to their defaults (for example .parent). Caches are not maintained across clones, and some elements
	 * are copied by reference (masks, individual filter instances, hit area)
	 *
	 * @return {easeljs.DisplayObject} A clone of the current DisplayObject instance.
	 */
	clone () {
		return this._cloneProps(new DisplayObject());
	}

	/**
	 * Returns a string representation of this object.
	 * @return {String} a string representation of the instance.
	 */
	toString () {
		return `[${this.constructor.name}${this.name ? ` (name=${this.name})` : ""}]`;
	}

	/**
	 * @protected
	 * @param {easeljs.DisplayObject} o The DisplayObject instance which will have properties from the current DisplayObject
	 * instance copied into.
	 * @return {easeljs.DisplayObject} o
	 */
	_cloneProps (o) {
		o.alpha = this.alpha;
		o.mouseEnabled = this.mouseEnabled;
		o.tickEnabled = this.tickEnabled;
		o.name = this.name;
		o.regX = this.regX;
		o.regY = this.regY;
		o.rotation = this.rotation;
		o.scaleX = this.scaleX;
		o.scaleY = this.scaleY;
		o.shadow = this.shadow;
		o.skewX = this.skewX;
		o.skewY = this.skewY;
		o.visible = this.visible;
		o.x  = this.x;
		o.y = this.y;
		o.compositeOperation = this.compositeOperation;
		o.snapToPixel = this.snapToPixel;
		o.filters = this.filters==null?null:this.filters.slice(0);
		o.mask = this.mask;
		o.hitArea = this.hitArea;
		o.cursor = this.cursor;
		o._bounds = this._bounds;
		return o;
	}

	/**
	 * @protected
	 * @param {CanvasRenderingContext2D} ctx
	 * @param {easeljs.Shadow} [shadow=Shadow]
	 */
	_applyShadow (ctx, shadow = _Shadow__WEBPACK_IMPORTED_MODULE_1__.default.identity) {
		shadow = shadow;
		ctx.shadowColor = shadow.color;
		ctx.shadowOffsetX = shadow.offsetX;
		ctx.shadowOffsetY = shadow.offsetY;
		ctx.shadowBlur = shadow.blur;
	}

	/**
	 * @protected
	 * @param {Object} evtObj An event object that will be dispatched to all tick listeners. This object is reused between dispatchers to reduce construction & GC costs.
	 */
	_tick (evtObj) {
		// because tick can be really performance sensitive, check for listeners before calling dispatchEvent.
		let ls = this._listeners;
		if (ls && ls["tick"]) {
			// reset & reuse the event object to avoid construction / GC costs:
			evtObj.target = null;
			evtObj.propagationStopped = evtObj.immediatePropagationStopped = false;
			this.dispatchEvent(evtObj);
		}
	}

	/**
	 * @protected
	 * @param {CanvasRenderingContext2D} ctx
	 * @return {Boolean}
	 */
	_testHit (ctx) {
		try {
			return ctx.getImageData(0, 0, 1, 1).data[3] > 1;
		} catch (e) {
			if (!DisplayObject.suppressCrossDomainErrors) {
				throw "An error has occurred. This is most likely due to security restrictions on reading canvas pixel data with local or cross-domain images.";
			}
			return false;
		}
	}

	/**
	 * @protected
	 * @param {easeljs.Matrix2D} matrix
	 * @param {Boolean} ignoreTransform If true, does not apply this object's transform.
	 * @return {easeljs.Rectangle}
	 */
	_getBounds (matrix, ignoreTransform) {
		return this._transformBounds(this.getBounds(), matrix, ignoreTransform);
	}

	/**
	 * @protected
	 * @param {easeljs.Rectangle} bounds
	 * @param {easeljs.Matrix2D} matrix
	 * @param {Boolean} ignoreTransform
	 * @return {easeljs.Rectangle}
	 */
	_transformBounds (bounds, matrix, ignoreTransform) {
		if (!bounds) { return bounds; }
		let { x, y, width, height } = bounds;
		let mtx = this._props.matrix;
		mtx = ignoreTransform ? mtx.identity() : this.getMatrix(mtx);

		if (x || y) { mtx.appendTransform(0,0,1,1,0,0,0,-x,-y); } // TODO: simplify this.
		if (matrix) { mtx.prependMatrix(matrix); }

		let x_a = width*mtx.a, x_b = width*mtx.b;
		let y_c = height*mtx.c, y_d = height*mtx.d;
		let tx = mtx.tx, ty = mtx.ty;

		let minX = tx, maxX = tx, minY = ty, maxY = ty;

		if ((x = x_a + tx) < minX) { minX = x; } else if (x > maxX) { maxX = x; }
		if ((x = x_a + y_c + tx) < minX) { minX = x; } else if (x > maxX) { maxX = x; }
		if ((x = y_c + tx) < minX) { minX = x; } else if (x > maxX) { maxX = x; }

		if ((y = x_b + ty) < minY) { minY = y; } else if (y > maxY) { maxY = y; }
		if ((y = x_b + y_d + ty) < minY) { minY = y; } else if (y > maxY) { maxY = y; }
		if ((y = y_d + ty) < minY) { minY = y; } else if (y > maxY) { maxY = y; }

		return bounds.setValues(minX, minY, maxX-minX, maxY-minY);
	}

	/**
	 * Indicates whether the display object has any mouse event listeners or a cursor.
	 * @protected
	 * @return {Boolean}
	 */
	_hasMouseEventListener () {
		let evts = DisplayObject._MOUSE_EVENTS;
		for (let i=0, l=evts.length; i<l; i++) {
			if (this.hasEventListener(evts[i])) { return true; }
		}
		return !!this.cursor;
	}

}

{
	let canvas = window.createjs && createjs.createCanvas?createjs.createCanvas():document.createElement("canvas"); // prevent errors on load in browsers without canvas.
	if (canvas.getContext) {
		/**
		 * @type {HTMLCanvasElement | Object}
		 * @static
		 */
		DisplayObject._hitTestCanvas = canvas;
		/**
		 * @type {CanvasRenderingContext2D}
		 * @static
		 */
		DisplayObject._hitTestContext = canvas.getContext("2d");
		canvas.width = canvas.height = 1;
	}
}

/**
 * Listing of mouse event names. Used in _hasMouseEventListener.
 * @static
 * @type {Array<String>}
 * @readonly
 */
DisplayObject._MOUSE_EVENTS = ["click","dblclick","mousedown","mouseout","mouseover","pressmove","pressup","rollout","rollover"];

/**
 * Suppresses errors generated when using features like hitTest, mouse events, and {{#crossLink "getObjectsUnderPoint"}}{{/crossLink}}
 * with cross domain content.
 * @static
 * @type {Boolean}
 * @default false
 */
DisplayObject.suppressCrossDomainErrors = false;

/**
 * @static
 * @type {Boolean}
 * @default false
 */
DisplayObject.snapToPixelEnabled = false;

/**
 * Enum like property for determining StageGL render lookup, i.e. where to expect properties.
 * @static
 * @type {Number}
 */
DisplayObject._StageGL_NONE = 0;

/**
 * Enum like property for determining StageGL render lookup, i.e. where to expect properties.
 * @static
 * @type {Number}
 */
DisplayObject._StageGL_SPRITE = 1;

/**
 * Enum like property for determining StageGL render lookup, i.e. where to expect properties.
 * @static
 * @type {Number}
 */
DisplayObject._StageGL_BITMAP = 2;

/**
 * Dispatched when the user presses their left mouse button over the display object.
 * @see {@link easeljs.MouseEvent}
 * @event easeljs.DisplayObject#mousedown
 * @since 0.6.0
 */

/**
 * Dispatched when the user presses their left mouse button and then releases it while over the display object.
 * @see {@link easeljs.MouseEvent}
 * @event easeljs.DisplayObject#click
 * @since 0.6.0
 */

/**
 * Dispatched when the user double clicks their left mouse button over this display object.
 * @see {@link easeljs.MouseEvent}
 * @event easeljs.DisplayObject#dblclick
 * @since 0.6.0
 */

/**
 * Dispatched when the user's mouse enters this display object. This event must be enabled using
 * {@link easeljs.Stage#enableMouseOver}.
 * @see {@link easeljs.DisplayObject#event:rollover}
 * @see {@link easeljs.MouseEvent}
 * @event easeljs.DisplayObject#mouseover
 * @since 0.6.0
 */

/**
 * Dispatched when the user's mouse leaves this display object. This event must be enabled using
 * {@link easeljs.Stage#enableMouseOver}.
 * @see {@link easeljs.DisplayObject#event:rollout}
 * @see {@link easeljs.MouseEvent}
 * @event easeljs.DisplayObject#mouseout
 * @since 0.6.0
 */

/**
 * This event is similar to {@link easeljs.DisplayObject#event:mouseover}, with the following
 * differences: it does not bubble, and it considers {@link easeljs.Container} instances as an
 * aggregate of their content.
 *
 * For example, myContainer contains two overlapping children: shapeA and shapeB. The user moves their mouse over
 * shapeA and then directly on to shapeB. With a listener for {@link easeljs.DisplayObject#event:mouseover} on
 * myContainer, two events would be received, each targeting a child element:
 * <ol>
 *   <li>when the mouse enters shapeA (target=shapeA)</li>
 *   <li>when the mouse enters shapeB (target=shapeB)</li>
 * </ol>
 * However, with a listener for "rollover" instead, only a single event is received when the mouse first enters
 * the aggregate myContainer content (target=myContainer).
 *
 * This event must be enabled using {@link easeljs.Stage#enableMouseOver}.
 * @see {@link easeljs.MouseEvent}
 * @event easeljs.DisplayObject#rollover
 * @since 0.7.0
 */

/**
 * This event is similar to {@link easeljs.DisplayObject#event:mouseout}, with the following
 * differences: it does not bubble, and it considers {@link easeljs.Container} instances as an
 * aggregate of their content.
 *
 * For example, myContainer contains two overlapping children: shapeA and shapeB. The user moves their mouse over
 * shapeA, then directly on to shapeB, then off both. With a listener for {@link easeljs.DisplayObject#event:mouseout}
 * on myContainer, two events would be received, each targeting a child element:<OL>
 * <LI>when the mouse leaves shapeA (target=shapeA)</LI>
 * <LI>when the mouse leaves shapeB (target=shapeB)</LI>
 * </OL>
 * However, with a listener for "rollout" instead, only a single event is received when the mouse leaves
 * the aggregate myContainer content (target=myContainer).
 *
 * This event must be enabled using {@link easeljs.Stage#enableMouseOver}.
 * @see {@link easeljs.MouseEvent}
 * @event easeljs.DisplayObject#rollout
 * @since 0.7.0
 */

/**
 * After a {@link easeljs.DisplayObject#event:mousedown} occurs on a display object, a pressmove
 * event will be generated on that object whenever the mouse moves until the mouse press is released. This can be
 * useful for dragging and similar operations.
 * @event easeljs.DisplayObject#pressmove
 * @since 0.7.0
 */

/**
 * After a {@link easeljs.DisplayObject#event:mousedown} occurs on a display object, a pressup event
 * will be generated on that object when that mouse press is released. This can be useful for dragging and similar
 * operations.
 * @event easeljs.DisplayObject#pressup
 * @since 0.7.0
 */

/**
 * Dispatched when the display object is added to a parent container.
 * @event easeljs.DisplayObject#added
 */

/**
 * Dispatched when the display object is removed from its parent container.
 * @event easeljs.DisplayObject#removed
 */

/**
 * Dispatched on each display object on a stage whenever the stage updates. This occurs immediately before the
 * rendering (draw) pass. When {@link easeljs.Stage#update} is called, first all display objects on
 * the stage dispatch the tick event, then all of the display objects are drawn to stage. Children will have their
 * tick event dispatched in order of their depth prior to the event being dispatched on their parent.
 * @event easeljs.DisplayObject#tick
 * @param {Object} target The object that dispatched the event.
 * @param {String} type The event type.
 * @param {Array} params An array containing any arguments that were passed to the Stage.update() method.
 * @since 0.6.0
 */


/***/ }),

/***/ "./node_modules/@createjs/easeljs/src/display/Graphics.js":
/*!****************************************************************!*\
  !*** ./node_modules/@createjs/easeljs/src/display/Graphics.js ***!
  \****************************************************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => /* binding */ Graphics
/* harmony export */ });
/* harmony import */ var _utils_Canvas__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/Canvas */ "./node_modules/@createjs/easeljs/src/utils/Canvas.js");
/**
 * @license Graphics
 * Visit http://createjs.com/ for documentation, updates and examples.
 *
 * Copyright (c) 2017 gskinner.com, inc.
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */



/**
 * The Graphics class exposes an easy to use API for generating vector drawing instructions and drawing them to a
 * specified context. Note that you can use Graphics without any dependency on the EaselJS framework by calling {@link easeljs.Graphics#draw}
 * directly, or it can be used with the {@link easeljs.Shape} object to draw vector graphics within the
 * context of an EaselJS display list.
 *
 * There are two approaches to working with Graphics object: calling methods on a Graphics instance (the "Graphics API"), or
 * instantiating Graphics command objects and adding them to the graphics queue via {@link easeljs.Graphics#append}.
 * The former abstracts the latter, simplifying beginning and ending paths, fills, and strokes.
 *
 * <h4>Tiny API</h4>
 * The Graphics class also includes a "tiny API", which is one or two-letter methods that are shortcuts for all of the
 * Graphics methods. These methods are great for creating compact instructions, and is used by the Toolkit for CreateJS
 * to generate readable code. All tiny methods are marked as protected, so you can view them by enabling protected
 * descriptions in the docs.
 *
 * <table>
 *     <tr><td><b>Tiny</b></td><td><b>Method</b></td><td><b>Tiny</b></td><td><b>Method</b></td></tr>
 *     <tr><td>mt</td><td>{@link easeljs.Graphics#moveTo}</td>
 *     <td>lt</td> <td>{@link easeljs.Graphics#lineTo}</td></tr>
 *     <tr><td>a/at</td><td>{@link easeljs.Graphics#arc} / {@link easeljs.Graphics#arcTo}</td>
 *     <td>bt</td><td>{@link easeljs.Graphics#bezierCurveTo}</td></tr>
 *     <tr><td>qt</td><td>{@link easeljs.Graphics#quadraticCurveTo} (also curveTo)</td>
 *     <td>r</td><td>{@link easeljs.Graphics#rect}</td></tr>
 *     <tr><td>cp</td><td>{@link easeljs.Graphics#closePath}</td>
 *     <td>c</td><td>{@link easeljs.Graphics#clear}</td></tr>
 *     <tr><td>f</td><td>{@link easeljs.Graphics#beginFill}</td>
 *     <td>lf</td><td>{@link easeljs.Graphics#beginLinearGradientFill}</td></tr>
 *     <tr><td>rf</td><td>{@link easeljs.Graphics#beginRadialGradientFill}</td>
 *     <td>bf</td><td>{@link easeljs.Graphics#beginBitmapFill}</td></tr>
 *     <tr><td>ef</td><td>{@link easeljs.Graphics#endFill}</td>
 *     <td>ss / sd</td><td>{@link easeljs.Graphics#setStrokeStyle} / {@link easeljs.Graphics#setStrokeDash}</td></tr>
 *     <tr><td>s</td><td>{@link easeljs.Graphics#beginStroke}</td>
 *     <td>ls</td><td>{@link easeljs.Graphics#beginLinearGradientStroke}</td></tr>
 *     <tr><td>rs</td><td>{@link easeljs.Graphics#beginRadialGradientStroke}</td>
 *     <td>bs</td><td>{@link easeljs.Graphics#beginBitmapStroke}</td></tr>
 *     <tr><td>es</td><td>{@link easeljs.Graphics#endStroke}</td>
 *     <td>dr</td><td>{@link easeljs.Graphics#drawRect}</td></tr>
 *     <tr><td>rr</td><td>{@link easeljs.Graphics#drawRoundRect}</td>
 *     <td>rc</td><td>{@link easeljs.Graphics#drawRoundRectComplex}</td></tr>
 *     <tr><td>dc</td><td>{@link easeljs.Graphics#drawCircle}</td>
 *     <td>de</td><td>{@link easeljs.Graphics#drawEllipse}</td></tr>
 *     <tr><td>dp</td><td>{@link easeljs.Graphics#drawPolyStar}</td>
 *     <td>p</td><td>{@link easeljs.Graphics#decodePath}</td></tr>
 * </table>
 *
 * @example
 * var g = new createjs.Graphics();
 * g.setStrokeStyle(1);
 * g.beginStroke("#000000");
 * g.beginFill("red");
 * g.drawCircle(0,0,30);
 *
 * @example
 * // All drawing methods in Graphics return the Graphics instance, so they can be chained together.
 * graphics.beginStroke("red").beginFill("blue").drawRect(20, 20, 100, 50);
 *
 * @example
 * // Each graphics API call generates a command object (see below). The last command to be created can be accessed via .command
 * let fillCommand = graphics.beginFill("red").command;
 * fillCommand.style = "blue";
 * // or change it to a bitmap fill:
 * fillCommand.bitmap(img);
 *
 * @example
 * // For more direct control of rendering, you can instantiate and append command objects to the graphics queue directly.
 * // In this case, you need to manage path creation manually, and ensure that fill/stroke is applied to a defined path:
 *
 * // start a new path. Graphics.beginCmd is a reusable BeginPath instance:
 * graphics.append(Graphics.beginCmd);
 * // we need to define the path before applying the fill:
 * let circle = new Graphics.Circle(0,0,30);
 * graphics.append(circle);
 * // fill the path we just defined:
 * let fill = new Graphics.Fill("red");
 * graphics.append(fill);
 *
 * // These approaches can be used together, for example to insert a custom command:
 * graphics.beginFill("red");
 * let customCommand = new CustomSpiralCommand(etc);
 * graphics.append(customCommand);
 * graphics.beginFill("blue");
 * graphics.drawCircle(0, 0, 30);
 *
 * @example <caption>Using the Tiny API</caption>
 * graphics.s("red").f("blue").r(20, 20, 100, 50);
 *
 * @see {@link easeljs.Graphics#append}
 * @memberof easeljs
 */
class Graphics {

	constructor () {
		/**
		 * Holds a reference to the last command that was created or appended. For example, you could retain a reference
		 * to a Fill command in order to dynamically update the color later by using:
		 *
		 * @example
		 * let fill = graphics.beginFill("red").command;
		 * // update color later:
		 * fill.style = "yellow";
		 *
		 * @type {Object}
		 * @default null
		 */
		this.command = null;


	// private properties
		/**
		 * @protected
		 * @type {easeljs.Graphics.Stroke}
		 */
		this._stroke = null;

		/**
		 * @protected
		 * @type {easeljs.Graphics.StrokeStyle}
		 */
		this._strokeStyle = null;

		/**
		 * @protected
		 * @type {easeljs.Graphics.StrokeStyle}
		 */
		this._oldStrokeStyle = null;

		/**
		 * @protected
		 * @type {easeljs.Graphics.StrokeDash}
		 */
		this._strokeDash = null;

		/**
		 * @protected
		 * @type {easeljs.Graphics.StrokeDash}
		 */
		this._oldStrokeDash = null;

		/**
		 * @protected
		 * @type {easeljs.Graphics.Fill}
		 */
		this._fill = null;

		/**
		 * @protected
		 * @type {Boolean}
		 */
		this._strokeIgnoreScale = false;

		/**
		 * Indicates the last instruction index that was committed.
		 * @protected
		 * @type {Number}
		 * @default 0
		 */
		this._commitIndex = 0;

		/**
		 * @protected
		 * @type {Array}
		 */
		this._instructions = [];

		/**
		 * Uncommitted instructions.
		 * @protected
		 * @type {Array}
		 */
		this._activeInstructions = [];

		/**
		 * This indicates that there have been changes to the activeInstruction list since the last updateInstructions call.
		 * @protected
		 * @type {Boolean}
		 * @default false
		 */
		this._dirty = false;

		/**
		 * Index to draw from if a store operation has happened.
		 * @protected
		 * @type {Number}
		 * @default 0
		 */
		this._storeIndex = 0;

		/**
		 * Maps the familiar ActionScript `curveTo()` method to the functionally similar {@link easeljs.Graphics#quadraticCurveTo} method.
		 * @param {Number} cpx
		 * @param {Number} cpy
		 * @param {Number} x
		 * @param {Number} y
		 * @return {easeljs.Graphics} The Graphics instance the method is called on (useful for chaining calls.)
		 * @chainable
		 */
		this.curveTo = this.quadraticCurveTo;

		/**
		 * Maps the familiar ActionScript `drawRect()` method to the functionally similar {@link easeljs.Graphics#rect} method.
		 * @param {Number} x
		 * @param {Number} y
		 * @param {Number} w Width of the rectangle
		 * @param {Number} h Height of the rectangle
		 * @return {easeljs.Graphics} The Graphics instance the method is called on (useful for chaining calls.)
		 * @chainable
		 */
		this.drawRect = this.rect;

		// tiny api
		this.mt = this.moveTo;
		this.lt = this.lineTo;
		this.at = this.arcTo;
		this.bt = this.bezierCurveTo;
		this.qt = this.quadraticCurveTo;
		this.a = this.arc;
		this.r = this.rect;
		this.cp = this.closePath;
		this.c = this.clear;
		this.f = this.beginFill;
		this.lf = this.beginLinearGradientFill;
		this.rf = this.beginRadialGradientFill;
		this.bf = this.beginBitmapFill;
		this.ef = this.endFill;
		this.ss = this.setStrokeStyle;
		this.sd = this.setStrokeDash;
		this.s = this.beginStroke;
		this.ls = this.beginLinearGradientStroke;
		this.rs = this.beginRadialGradientStroke;
		this.bs = this.beginBitmapStroke;
		this.es = this.endStroke;
		this.dr = this.drawRect;
		this.rr = this.drawRoundRect;
		this.rc = this.drawRoundRectComplex;
		this.dc = this.drawCircle;
		this.de = this.drawEllipse;
		this.dp = this.drawPolyStar;
		this.p = this.decodePath;

		this.clear();
	}

	/**
	 * Returns a CSS compatible color string based on the specified RGB numeric color values in the format
	 * "rgba(255,255,255,1.0)", or if alpha is null then in the format "rgb(255,255,255)".
	 * It also supports passing a single hex color value as the first param, and an optional alpha value as the second
	 * param.
	 *
	 * @example
	 * Graphics.getRGB(50, 100, 150, 0.5); // rgba(50,100,150,0.5)
	 * Graphics.getRGB(0xFF00FF, 0.2); // rgba(255,0,255,0.2)
	 *
	 * @static
	 * @param {Number} r The red component for the color, between 0 and 0xFF (255).
	 * @param {Number} g The green component for the color, between 0 and 0xFF (255).
	 * @param {Number} b The blue component for the color, between 0 and 0xFF (255).
	 * @param {Number} [alpha] The alpha component for the color where 0 is fully transparent and 1 is fully opaque.
	 * @return {String} A CSS compatible color string based on the specified RGB numeric color values in the format
	 * "rgba(255,255,255,1.0)", or if alpha is null then in the format "rgb(255,255,255)".
	 */
	static getRGB (r, g, b, alpha) {
		if (r != null && b == null) {
			alpha = g;
			b = r&0xFF;
			g = r>>8&0xFF;
			r = r>>16&0xFF;
		}
		if (alpha == null) {
			return `rgb(${r},${g},${b})`;
		} else {
			return `rgba(${r},${g},${b},${alpha})`;
		}
	}

	/**
	 * Returns a CSS compatible color string based on the specified HSL numeric color values in the format "hsla(360,100,100,1.0)",
	 * or if alpha is null then in the format "hsl(360,100,100)".
	 *
	 * @example
	 * Graphics.getHSL(150, 100, 70); // hsl(150,100,70)
	 *
	 * @static
	 * @param {Number} hue The hue component for the color, between 0 and 360.
	 * @param {Number} saturation The saturation component for the color, between 0 and 100.
	 * @param {Number} lightness The lightness component for the color, between 0 and 100.
	 * @param {Number} [alpha] The alpha component for the color where 0 is fully transparent and 1 is fully opaque.
	 * @return {String} A CSS compatible color string based on the specified HSL numeric color values in the format
	 * "hsla(360,100,100,1.0)", or if alpha is null then in the format "hsl(360,100,100)".
	 */
	static getHSL (hue, saturation, lightness, alpha) {
		if (alpha == null) {
			return `hsl(${hue % 360},${saturation}%,${lightness}%)`;
		} else {
			return `hsl(${hue % 360},${saturation}%,${lightness}%,${alpha})`;
		}
	}

	/**
	 * Returns the graphics instructions array. Each entry is a graphics command object (ex. Graphics.Fill, Graphics.Rect)
	 * Modifying the returned array directly is not recommended, and is likely to result in unexpected behaviour.
	 *
	 * This property is mainly intended for introspection of the instructions (ex. for graphics export).
	 * @type {Array}
	 * @readonly
	 */
	get instructions () {
		this._updateInstructions();
		return this._instructions;
	}

	/**
	 * Returns true if this Graphics instance has no drawing commands.
	 * @return {Boolean} Returns true if this Graphics instance has no drawing commands.
	 */
	isEmpty () {
		return !(this._instructions.length || this._activeInstructions.length);
	}

	/**
	 * Draws the display object into the specified context ignoring its visible, alpha, shadow, and transform.
	 * Returns true if the draw was handled (useful for overriding functionality).
	 *
	 * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.
	 *
	 * @param {CanvasRenderingContext2D} ctx The canvas 2D context object to draw into.
	 * @param {Object} data Optional data that is passed to graphics command exec methods. When called from a Shape instance, the shape passes itself as the data parameter. This can be used by custom graphic commands to insert contextual data.
	 */
	draw (ctx, data) {
		this._updateInstructions();
		let instr = this._instructions;
		const l = instr.length;
		for (let i = this._storeIndex; i < l; i++) {
			instr[i].exec(ctx, data);
		}
	}

	/**
	 * Draws only the path described for this Graphics instance, skipping any non-path instructions, including fill and
	 * stroke descriptions. Used for `DisplayObject.mask` to draw the clipping path, for example.
	 *
	 * NOTE: This method is mainly for internal use, though it may be useful for advanced uses.
	 *
	 * @param {CanvasRenderingContext2D} ctx The canvas 2D context object to draw into.
	 */
	drawAsPath (ctx) {
		this._updateInstructions();
		let instr, instrs = this._instructions;
		const l = instrs.length;
		for (let i = this._storeIndex; i < l; i++) {
			// the first command is always a beginPath command.
			if ((instr = instrs[i]).path !== false) { instr.exec(ctx); }
		}
	}

	/**
	 * Moves the drawing point to the specified position.
	 * A tiny API method "mt" also exists.
	 * @param {Number} x The x coordinate the drawing point should move to.
	 * @param {Number} y The y coordinate the drawing point should move to.
	 * @return {easeljs.Graphics} The Graphics instance the method is called on (useful for chaining calls).
	 * @chainable
	 */
	moveTo (x, y) {
		return this.append(new MoveTo(x,y), true);
	}

	/**
	 * Draws a line from the current drawing point to the specified position, which become the new current drawing
	 * point. Note that you *must* call {@link easeljs.Graphics#moveTo} before the first `lineTo()`.
	 * A tiny API method "lt" also exists.
	 * @see {@link http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#complex-shapes-(paths) "WHATWG spec"}
	 * @param {Number} x The x coordinate the drawing point should draw to.
	 * @param {Number} y The y coordinate the drawing point should draw to.
	 * @return {easeljs.Graphics} The Graphics instance the method is called on (useful for chaining calls.)
	 * @chainable
	 */
	lineTo (x, y) {
		return this.append(new LineTo(x,y));
	}

	/**
	 * Draws an arc with the specified control points and radius.
	 * A tiny API method "at" also exists.
	 * @see {@link http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#dom-context-2d-arcto "WHATWG spec"}
	 * @param {Number} x1
	 * @param {Number} y1
	 * @param {Number} x2
	 * @param {Number} y2
	 * @param {Number} radius
	 * @return {easeljs.Graphics} The Graphics instance the method is called on (useful for chaining calls.)
	 * @chainable
	 */
	arcTo (x1, y1, x2, y2, radius) {
		return this.append(new ArcTo(x1, y1, x2, y2, radius));
	}

	/**
	 * Draws an arc defined by the radius, startAngle and endAngle arguments, centered at the position (x, y).
	 * A tiny API method "a" also exists.
	 *
	 * @example
	 * // draw a full circle with a radius of 20 centered at (100, 100)
	 * arc(100, 100, 20, 0, Math.PI*2);
	 *
	 * @see {@link http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#dom-context-2d-arc "WHATWG spec"}
	 * @param {Number} x
	 * @param {Number} y
	 * @param {Number} radius
	 * @param {Number} startAngle Measured in radians.
	 * @param {Number} endAngle Measured in radians.
	 * @param {Boolean} anticlockwise
	 * @return {easeljs.Graphics} The Graphics instance the method is called on (useful for chaining calls.)
	 * @chainable
	 */
	arc (x, y, radius, startAngle, endAngle, anticlockwise) {
		return this.append(new Arc(x, y, radius, startAngle, endAngle, anticlockwise));
	}

	/**
	 * Draws a quadratic curve from the current drawing point to (x, y) using the control point (cpx, cpy).
	 * A tiny API method "qt" also exists.
	 * @see {@link http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#dom-context-2d-quadraticcurveto "WHATWG spec"}
	 * @param {Number} cpx
	 * @param {Number} cpy
	 * @param {Number} x
	 * @param {Number} y
	 * @return {easeljs.Graphics} The Graphics instance the method is called on (useful for chaining calls.)
	 * @chainable
	 */
	quadraticCurveTo (cpx, cpy, x, y) {
		return this.append(new QuadraticCurveTo(cpx, cpy, x, y));
	}

	/**
	 * Draws a bezier curve from the current drawing point to (x, y) using the control points (cp1x, cp1y) and (cp2x, cp2y).
	 * A tiny API method "bt" also exists.
	 * @see {@link http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#dom-context-2d-beziercurveto "WHATWG spec"}
	 * @param {Number} cp1x
	 * @param {Number} cp1y
	 * @param {Number} cp2x
	 * @param {Number} cp2y
	 * @param {Number} x
	 * @param {Number} y
	 * @return {easeljs.Graphics} The Graphics instance the method is called on (useful for chaining calls.)
	 * @chainable
	 */
	bezierCurveTo (cp1x, cp1y, cp2x, cp2y, x, y) {
		return this.append(new BezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y));
	}

	/**
	 * Draws a rectangle at (x, y) with the specified width and height using the current fill and/or stroke.
	 * A tiny API method "r" also exists.
	 * @see {@link http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#dom-context-2d-rect "WHATWG spec"}
	 * @param {Number} x
	 * @param {Number} y
	 * @param {Number} w Width of the rectangle
	 * @param {Number} h Height of the rectangle
	 * @return {easeljs.Graphics} The Graphics instance the method is called on (useful for chaining calls.)
	 * @chainable
	 */
	rect (x, y, w, h) {
		return this.append(new Rect(x, y, w, h));
	}

	/**
	 * Closes the current path, effectively drawing a line from the current drawing point to the first drawing point specified
	 * since the fill or stroke was last set.
	 * A tiny API method "cp" also exists.
	 * @return {easeljs.Graphics} The Graphics instance the method is called on (useful for chaining calls.)
	 * @chainable
	 */
	closePath () {
		return this._activeInstructions.length ? this.append(new ClosePath()) : this;
	}

	/**
	 * Clears all drawing instructions, effectively resetting this Graphics instance. Any line and fill styles will need
	 * to be redefined to draw shapes following a clear call.
	 * A tiny API method "c" also exists.
	 * @return {easeljs.Graphics} The Graphics instance the method is called on (useful for chaining calls.)
	 * @chainable
	 */
	clear () {
		this._instructions.length = this._activeInstructions.length = this._commitIndex = 0;
		this._strokeStyle = this._oldStrokeStyle = this._stroke = this._fill = this._strokeDash = this._oldStrokeDash = null;
		this._dirty = this._strokeIgnoreScale = false;
		return this;
	}

	/**
	 * Begins a fill with the specified color. This ends the current sub-path.
	 * A tiny API method "f" also exists.
	 * @param {String} color A CSS compatible color value (ex. "red", "#FF0000", or "rgba(255,0,0,0.5)"). Setting to
	 * null will result in no fill.
	 * @return {easeljs.Graphics} The Graphics instance the method is called on (useful for chaining calls.)
	 * @chainable
	 */
	beginFill (color) {
		return this._setFill(color ? new Fill(color) : null);
	}

	/**
	 * Begins a linear gradient fill defined by the line (x0, y0) to (x1, y1).
	 * A tiny API method "lf" also exists.
	 *
	 * @example <caption>Define a black to white vertical gradient ranging from 20px to 120px, and draw a square to display it</caption>
	 * graphics.beginLinearGradientFill(["#000","#FFF"], [0, 1], 0, 20, 0, 120).drawRect(20, 20, 120, 120);
	 *
	 * @param {Array} colors An array of CSS compatible color values. For example, ["#F00","#00F"] would define a gradient
	 * drawing from red to blue.
	 * @param {Array} ratios An array of gradient positions which correspond to the colors. For example, [0.1, 0.9] would draw
	 * the first color to 10% then interpolating to the second color at 90%.
	 * @param {Number} x0 The position of the first point defining the line that defines the gradient direction and size.
	 * @param {Number} y0 The position of the first point defining the line that defines the gradient direction and size.
	 * @param {Number} x1 The position of the second point defining the line that defines the gradient direction and size.
	 * @param {Number} y1 The position of the second point defining the line that defines the gradient direction and size.
	 * @return {easeljs.Graphics} The Graphics instance the method is called on (useful for chaining calls.)
	 * @chainable
	 */
	beginLinearGradientFill (colors, ratios, x0, y0, x1, y1) {
		return this._setFill(new Fill().linearGradient(colors, ratios, x0, y0, x1, y1));
	}

	/**
	 * Begins a radial gradient fill. This ends the current sub-path.
	 * A tiny API method "rf" also exists.
	 *
	 * @example <caption>Define a red to blue radial gradient centered at (100, 100), with a radius of 50, and draw a circle to display it</caption>
	 * graphics.beginRadialGradientFill(["#F00","#00F"], [0, 1], 100, 100, 0, 100, 100, 50).drawCircle(100, 100, 50);
	 *
	 * @param {Array} colors An array of CSS compatible color values. For example, ["#F00","#00F"] would define
	 * a gradient drawing from red to blue.
	 * @param {Array} ratios An array of gradient positions which correspond to the colors. For example, [0.1,
	 * 0.9] would draw the first color to 10% then interpolating to the second color at 90%.
	 * @param {Number} x0 Center position of the inner circle that defines the gradient.
	 * @param {Number} y0 Center position of the inner circle that defines the gradient.
	 * @param {Number} r0 Radius of the inner circle that defines the gradient.
	 * @param {Number} x1 Center position of the outer circle that defines the gradient.
	 * @param {Number} y1 Center position of the outer circle that defines the gradient.
	 * @param {Number} r1 Radius of the outer circle that defines the gradient.
	 * @return {easeljs.Graphics} The Graphics instance the method is called on (useful for chaining calls.)
	 * @chainable
	 */
	beginRadialGradientFill (colors, ratios, x0, y0, r0, x1, y1, r1) {
		return this._setFill(new Fill().radialGradient(colors, ratios, x0, y0, r0, x1, y1, r1));
	}

	/**
	 * Begins a pattern fill using the specified image. This ends the current sub-path.
	 * A tiny API method "bf" also exists.
	 * @param {HTMLImageElement | HTMLCanvasElement | HTMLVideoElement} image The Image, Canvas, or Video object to use
	 * as the pattern. Must be loaded prior to creating a bitmap fill, or the fill will be empty.
	 * @param {String} repetition Optional. Indicates whether to repeat the image in the fill area. One of "repeat",
	 * "repeat-x", "repeat-y", or "no-repeat". Defaults to "repeat". Note that Firefox does not support "repeat-x" or
	 * "repeat-y" (latest tests were in FF 20.0), and will default to "repeat".
	 * @param {easeljs.Matrix2D} matrix Optional. Specifies a transformation matrix for the bitmap fill. This transformation
	 * will be applied relative to the parent transform.
	 * @return {easeljs.Graphics} The Graphics instance the method is called on (useful for chaining calls.)
	 * @chainable
	 */
	beginBitmapFill (image, repetition, matrix) {
		return this._setFill(new Fill(null, matrix).bitmap(image, repetition));
	}

	/**
	 * Ends the current sub-path, and begins a new one with no fill. Functionally identical to `beginFill(null)`.
	 * A tiny API method "ef" also exists.
	 * @return {easeljs.Graphics} The Graphics instance the method is called on (useful for chaining calls.)
	 * @chainable
	 */
	endFill () {
		return this.beginFill();
	}

	/**
	 * Sets the stroke style.
	 * A tiny API method "ss" also exists.
	 *
	 * @example
	 * graphics.setStrokeStyle(8,"round").beginStroke("#F00");
	 *
	 * @param {Number} thickness The width of the stroke.
	 * @param {String | Number} [caps=0] Indicates the type of caps to use at the end of lines. One of butt,
	 * round, or square. Defaults to "butt". Also accepts the values 0 (butt), 1 (round), and 2 (square) for use with
	 * the tiny API.
	 * @param {String | Number} [joints=0] Specifies the type of joints that should be used where two lines meet.
	 * One of bevel, round, or miter. Defaults to "miter". Also accepts the values 0 (miter), 1 (round), and 2 (bevel)
	 * for use with the tiny API.
	 * @param {Number} [miterLimit=10] If joints is set to "miter", then you can specify a miter limit ratio which
	 * controls at what point a mitered joint will be clipped.
	 * @param {Boolean} [ignoreScale=false] If true, the stroke will be drawn at the specified thickness regardless
	 * of active transformations.
	 * @return {easeljs.Graphics} The Graphics instance the method is called on (useful for chaining calls.)
	 * @chainable
	 */
	setStrokeStyle (thickness, caps = 0, joints = 0, miterLimit = 10, ignoreScale = false) {
		this._updateInstructions(true);
		this._strokeStyle = this.command = new StrokeStyle(thickness, caps, joints, miterLimit, ignoreScale);

		// ignoreScale lives on Stroke, not StrokeStyle, so we do a little trickery:
		if (this._stroke) { this._stroke.ignoreScale = ignoreScale; }
		this._strokeIgnoreScale = ignoreScale;
		return this;
	}

	/**
	 * Sets or clears the stroke dash pattern.
	 * A tiny API method `sd` also exists.
	 *
	 * @example
	 * graphics.setStrokeDash([20, 10], 0);
	 *
	 * @param {Array} [segments] An array specifying the dash pattern, alternating between line and gap.
	 * For example, `[20,10]` would create a pattern of 20 pixel lines with 10 pixel gaps between them.
	 * Passing null or an empty array will clear the existing stroke dash.
	 * @param {Number} [offset=0] The offset of the dash pattern. For example, you could increment this value to create a "marching ants" effect.
	 * @return {easeljs.Graphics} The Graphics instance the method is called on (useful for chaining calls.)
	 * @chainable
	 */
	setStrokeDash (segments, offset = 0) {
		this._updateInstructions(true);
		this._strokeDash = this.command = new StrokeDash(segments, offset);
		return this;
	}

	/**
	 * Begins a stroke with the specified color. This ends the current sub-path.
	 * A tiny API method "s" also exists.
	 *
	 * @param {String} color A CSS compatible color value (ex. "#FF0000", "red", or "rgba(255,0,0,0.5)"). Setting to
	 * null will result in no stroke.
	 * @return {easeljs.Graphics} The Graphics instance the method is called on (useful for chaining calls.)
	 * @chainable
	 */
	beginStroke (color) {
		return this._setStroke(color ? new Stroke(color) : null);
	}

	/**
	 * Begins a linear gradient stroke defined by the line (x0, y0) to (x1, y1). This ends the current sub-path.
	 * A tiny API method "ls" also exists.
	 *
	 * @example <caption>Define a black to white vertical gradient ranging from 20px to 120px, and draw a square to display it</caption>
	 * graphics.setStrokeStyle(10)
	 *   .beginLinearGradientStroke(["#000","#FFF"], [0, 1], 0, 20, 0, 120)
	 *   .drawRect(20, 20, 120, 120);
	 *
	 * @param {Array<String>} colors An array of CSS compatible color values. For example, ["#F00","#00F"] would define
	 * a gradient drawing from red to blue.
	 * @param {Array<Number>} ratios An array of gradient positions which correspond to the colors. For example, [0.1,
	 * 0.9] would draw the first color to 10% then interpolating to the second color at 90%.
	 * @param {Number} x0 The position of the first point defining the line that defines the gradient direction and size.
	 * @param {Number} y0 The position of the first point defining the line that defines the gradient direction and size.
	 * @param {Number} x1 The position of the second point defining the line that defines the gradient direction and size.
	 * @param {Number} y1 The position of the second point defining the line that defines the gradient direction and size.
	 * @return {easeljs.Graphics} The Graphics instance the method is called on (useful for chaining calls.)
	 * @chainable
	 */
	beginLinearGradientStroke (colors, ratios, x0, y0, x1, y1) {
		return this._setStroke(new Stroke().linearGradient(colors, ratios, x0, y0, x1, y1));
	}

	/**
	 * Begins a radial gradient stroke. This ends the current sub-path.
	 * A tiny API method "rs" also exists.
	 *
	 * @example <caption>Define a red to blue radial gradient centered at (100, 100), with a radius of 50, and draw a rectangle to display it</caption>
	 * graphics.setStrokeStyle(10)
	 *   .beginRadialGradientStroke(["#F00","#00F"], [0, 1], 100, 100, 0, 100, 100, 50)
	 *   .drawRect(50, 90, 150, 110);
	 *
	 * @param {Array<String>} colors An array of CSS compatible color values. For example, ["#F00","#00F"] would define
	 * a gradient drawing from red to blue.
	 * @param {Array<Number>} ratios An array of gradient positions which correspond to the colors. For example, [0.1,
	 * 0.9] would draw the first color to 10% then interpolating to the second color at 90%, then draw the second color
	 * to 100%.
	 * @param {Number} x0 Center position of the inner circle that defines the gradient.
	 * @param {Number} y0 Center position of the inner circle that defines the gradient.
	 * @param {Number} r0 Radius of the inner circle that defines the gradient.
	 * @param {Number} x1 Center position of the outer circle that defines the gradient.
	 * @param {Number} y1 Center position of the outer circle that defines the gradient.
	 * @param {Number} r1 Radius of the outer circle that defines the gradient.
	 * @return {easeljs.Graphics} The Graphics instance the method is called on (useful for chaining calls.)
	 * @chainable
	 */
	beginRadialGradientStroke (colors, ratios, x0, y0, r0, x1, y1, r1) {
		return this._setStroke(new Stroke().radialGradient(colors, ratios, x0, y0, r0, x1, y1, r1));
	}

	/**
	 * Begins a pattern fill using the specified image. This ends the current sub-path. Note that unlike bitmap fills,
	 * strokes do not currently support a matrix parameter due to limitations in the canvas API.
	 * A tiny API method "bs" also exists.
	 *
	 * @param {HTMLImageElement | HTMLCanvasElement | HTMLVideoElement} image The Image, Canvas, or Video object to use
	 * as the pattern. Must be loaded prior to creating a bitmap fill, or the fill will be empty.
	 * @param {String} [repetition="repeat"] Indicates whether to repeat the image in the fill area. One of
	 * "repeat", "repeat-x", "repeat-y", or "no-repeat". Defaults to "repeat".
	 * @return {easeljs.Graphics} The Graphics instance the method is called on (useful for chaining calls.)
	 * @chainable
	 */
	beginBitmapStroke (image, repetition = "repeat") {
		// NOTE: matrix is not supported for stroke because transforms on strokes also affect the drawn stroke width.
		return this._setStroke(new Stroke().bitmap(image, repetition));
	}

	/**
	 * Ends the current sub-path, and begins a new one with no stroke. Functionally identical to `beginStroke(null)`.
	 * A tiny API method "es" also exists.
	 * @return {easeljs.Graphics} The Graphics instance the method is called on (useful for chaining calls.)
	 * @chainable
	 */
	endStroke () {
		return this.beginStroke();
	}

	/**
	 * Draws a rounded rectangle with all corners with the specified radius.
	 * @param {Number} x
	 * @param {Number} y
	 * @param {Number} w
	 * @param {Number} h
	 * @param {Number} radius Corner radius.
	 * @return {easeljs.Graphics} The Graphics instance the method is called on (useful for chaining calls.)
	 * @chainable
	 */
	drawRoundRect (x, y, w, h, radius) {
		return this.drawRoundRectComplex(x, y, w, h, radius, radius, radius, radius);
	}

	/**
	 * Draws a rounded rectangle with different corner radii. Supports positive and negative corner radii.
	 * A tiny API method "rc" also exists.
	 * @param {Number} x The horizontal coordinate to draw the round rect.
	 * @param {Number} y The vertical coordinate to draw the round rect.
	 * @param {Number} w The width of the round rect.
	 * @param {Number} h The height of the round rect.
	 * @param {Number} radiusTL Top left corner radius.
	 * @param {Number} radiusTR Top right corner radius.
	 * @param {Number} radiusBR Bottom right corner radius.
	 * @param {Number} radiusBL Bottom left corner radius.
	 * @return {easeljs.Graphics} The Graphics instance the method is called on (useful for chaining calls.)
	 * @chainable
	 */
	drawRoundRectComplex (x, y, w, h, radiusTL, radiusTR, radiusBR, radiusBL) {
		return this.append(new RoundRect(x, y, w, h, radiusTL, radiusTR, radiusBR, radiusBL));
	}

	/**
	 * Draws a circle with the specified radius at (x, y).
	 * A tiny API method "dc" also exists.
	 *
	 * @example
	 * let g = new Graphics();
	 * g.setStrokeStyle(1);
	 * g.beginStroke(Graphics.getRGB(0,0,0));
	 * g.beginFill(Graphics.getRGB(255,0,0));
	 * g.drawCircle(0,0,3);
	 * let s = new Shape(g);
	 * s.x = 100;
	 * s.y = 100;
	 * stage.addChild(s);
	 * stage.update();
	 *
	 * @param {Number} x x coordinate center point of circle.
	 * @param {Number} y y coordinate center point of circle.
	 * @param {Number} radius Radius of circle.
	 * @return {easeljs.Graphics} The Graphics instance the method is called on (useful for chaining calls.)
	 * @chainable
	 */
	drawCircle (x, y, radius) {
		return this.append(new Circle(x, y, radius));
	}

	/**
	 * Draws an ellipse (oval) with a specified width (w) and height (h). Similar to {@link easels.Graphics#drawCircle},
	 * except the width and height can be different.
	 * A tiny API method "de" also exists.
	 * @param {Number} x The left coordinate point of the ellipse. Note that this is different from {@link easels.Graphics#drawCircle}
	 * which draws from center.
	 * @param {Number} y The top coordinate point of the ellipse. Note that this is different from {@link easels.Graphics#drawCircle}
	 * which draws from the center.
	 * @param {Number} w The height (horizontal diameter) of the ellipse. The horizontal radius will be half of this
	 * number.
	 * @param {Number} h The width (vertical diameter) of the ellipse. The vertical radius will be half of this number.
	 * @return {easeljs.Graphics} The Graphics instance the method is called on (useful for chaining calls.)
	 * @chainable
	 */
	drawEllipse (x, y, w, h) {
		return this.append(new Ellipse(x, y, w, h));
	}

	/**
	 * Draws a star if pointSize is greater than 0, or a regular polygon if pointSize is 0 with the specified number of points.
	 * A tiny API method "dp" also exists.
	 *
	 * @example <caption>Draw a 5 pointed star shape centered at 100, 100 and with a radius of 50</caption>
	 * graphics.beginFill("#FF0").drawPolyStar(100, 100, 50, 5, 0.6, -90);
	 * // Note: -90 makes the first point vertical
	 *
	 * @param {Number} x Position of the center of the shape.
	 * @param {Number} y Position of the center of the shape.
	 * @param {Number} radius The outer radius of the shape.
	 * @param {Number} sides The number of points on the star or sides on the polygon.
	 * @param {Number} pointSize The depth or "pointy-ness" of the star points. A pointSize of 0 will draw a regular
	 * polygon (no points), a pointSize of 1 will draw nothing because the points are infinitely pointy.
	 * @param {Number} angle The angle of the first point / corner. For example a value of 0 will draw the first point
	 * directly to the right of the center.
	 * @return {easeljs.Graphics} The Graphics instance the method is called on (useful for chaining calls.)
	 * @chainable
	 */
	drawPolyStar (x, y, radius, sides, pointSize, angle) {
		return this.append(new PolyStar(x, y, radius, sides, pointSize, angle));
	}

	/**
	 * Appends a graphics command object to the graphics queue. Command objects expose an "exec" method
	 * that accepts two parameters: the Context2D to operate on, and an arbitrary data object passed into
	 * {@link easeljs.Graphics#draw}. The latter will usually be the Shape instance that called draw.
	 *
	 * This method is used internally by Graphics methods, such as drawCircle, but can also be used directly to insert
	 * built-in or custom graphics commands.
	 *
	 * @example
	 * // attach data to our shape, so we can access it during the draw:
	 * shape.color = "red";
	 *
	 * // append a Circle command object:
	 * shape.graphics.append(new Graphics.Circle(50, 50, 30));
	 *
	 * // append a custom command object with an exec method that sets the fill style
	 * // based on the shape's data, and then fills the circle.
	 * shape.graphics.append({
	 *   exec: (ctx, shape) => {
	 *     ctx.fillStyle = shape.color;
	 *     ctx.fill();
	 *   }
	 * });
	 *
	 * @param {Object} command A graphics command object exposing an "exec" method.
	 * @param {Boolean} clean The clean param is primarily for internal use. A value of true indicates that a command does not generate a path that should be stroked or filled.
	 * @return {easeljs.Graphics} The Graphics instance the method is called on (useful for chaining calls.)
	 * @chainable
	 */
	append (command, clean) {
		this._activeInstructions.push(command);
		this.command = command;
		if (!clean) { this._dirty = true; }
		return this;
	}

	/**
	 * Decodes a compact encoded path string into a series of draw instructions.
	 * This format is not intended to be human readable, and is meant for use by authoring tools.
	 * The format uses a base64 character set, with each character representing 6 bits, to define a series of draw
	 * commands.
	 *
	 * Each command is comprised of a single "header" character followed by a variable number of alternating x and y
	 * position values. Reading the header bits from left to right (most to least significant): bits 1 to 3 specify the
	 * type of operation (0-moveTo, 1-lineTo, 2-quadraticCurveTo, 3-bezierCurveTo, 4-closePath, 5-7 unused). Bit 4
	 * indicates whether position values use 12 bits (2 characters) or 18 bits (3 characters), with a one indicating the
	 * latter. Bits 5 and 6 are currently unused.
	 *
	 * Following the header is a series of 0 (closePath), 2 (moveTo, lineTo), 4 (quadraticCurveTo), or 6 (bezierCurveTo)
	 * parameters. These parameters are alternating x/y positions represented by 2 or 3 characters (as indicated by the
	 * 4th bit in the command char). These characters consist of a 1 bit sign (1 is negative, 0 is positive), followed
	 * by an 11 (2 char) or 17 (3 char) bit integer value. All position values are in tenths of a pixel. Except in the
	 * case of move operations which are absolute, this value is a delta from the previous x or y position (as
	 * appropriate).
	 *
	 * For example, the string "A3cAAMAu4AAA" represents a line starting at -150,0 and ending at 150,0.
	 * <br />A - bits 000000. First 3 bits (000) indicate a moveTo operation. 4th bit (0) indicates 2 chars per
	 * parameter.
	 * <br />n0 - 110111011100. Absolute x position of -150.0px. First bit indicates a negative value, remaining bits
	 * indicate 1500 tenths of a pixel.
	 * <br />AA - 000000000000. Absolute y position of 0.
	 * <br />I - 001100. First 3 bits (001) indicate a lineTo operation. 4th bit (1) indicates 3 chars per parameter.
	 * <br />Au4 - 000000101110111000. An x delta of 300.0px, which is added to the previous x value of -150.0px to
	 * provide an absolute position of +150.0px.
	 * <br />AAA - 000000000000000000. A y delta value of 0.
	 *
	 * A tiny API method "p" also exists.
	 *
	 * @param {String} str The path string to decode.
	 * @return {easeljs.Graphics} The Graphics instance the method is called on (useful for chaining calls.)
	 * @chainable
	 */
	decodePath (str) {
		let instructions = [this.moveTo, this.lineTo, this.quadraticCurveTo, this.bezierCurveTo, this.closePath];
		let paramCount = [2, 2, 4, 6, 0];
		let i = 0;
		const l = str.length;
		let params = [];
		let x = 0, y = 0;
		let base64 = Graphics._BASE_64;

		while (i < l) {
			let c = str.charAt(i);
			let n = base64[c];
			let fi = n>>3; // highest order bits 1-3 code for operation.
			let f = instructions[fi];
			// check that we have a valid instruction & that the unused bits are empty:
			if (!f || (n&3)) { throw `Bad path data (@${i}):c`; }
			const pl = paramCount[fi];
			if (!fi) { x=y=0; } // move operations reset the position.
			params.length = 0;
			i++;
			let charCount = (n>>2&1)+2;  // 4th header bit indicates number size for this operation.
			for (let p = 0; p < pl; p++) {
				let num = base64[str.charAt(i)];
				let sign = (num>>5) ? -1 : 1;
				num = ((num&31)<<6)|(base64[str.charAt(i+1)]);
				if (charCount === 3) { num = (num<<6)|(base64[str.charAt(i+2)]); }
				num = sign*num/10;
				if (p%2) { x = (num += x); }
				else { y = (num += y); }
				params[p] = num;
				i += charCount;
			}
			f.apply(this, params);
		}
		return this;
	}

	/**
	 * Stores all graphics commands so they won't be executed in future draws. Calling store() a second time adds to
	 * the existing store. This also affects `drawAsPath()`.
	 *
	 * This is useful in cases where you are creating vector graphics in an iterative manner (ex. generative art), so
	 * that only new graphics need to be drawn (which can provide huge performance benefits), but you wish to retain all
	 * of the vector instructions for later use (ex. scaling, modifying, or exporting).
	 *
	 * Note that calling store() will force the active path (if any) to be ended in a manner similar to changing
	 * the fill or stroke.
	 *
	 * For example, consider a application where the user draws lines with the mouse. As each line segment (or collection of
	 * segments) are added to a Shape, it can be rasterized using {@link easeljs.DisplayObject#updateCache},
	 * and then stored, so that it can be redrawn at a different scale when the application is resized, or exported to SVGraphics.
	 *
	 * @example
	 * // set up cache:
	 * shape.cache(0,0,500,500,scale);
	 *
	 * // when the user drags, draw a new line:
	 * shape.graphics.moveTo(oldX,oldY).lineTo(newX,newY);
	 * // then draw it into the existing cache:
	 * shape.updateCache("source-over");
	 * // store the new line, so it isn't redrawn next time:
	 * shape.store();
	 *
	 * // then, when the window resizes, we can re-render at a different scale:
	 * // first, unstore all our lines:
	 * shape.unstore();
	 * // then cache using the new scale:
	 * shape.cache(0,0,500,500,newScale);
	 * // finally, store the existing commands again:
	 * shape.store();
	 *
	 * @return {easeljs.Graphics} The Graphics instance the method is called on (useful for chaining calls.)
	 * @chainable
	 */
	store () {
		this._updateInstructions(true);
		this._storeIndex = this._instructions.length;
		return this;
	}

	/**
	 * Unstores any graphics commands that were previously stored using {@link easeljs.Graphics#store}
	 * so that they will be executed in subsequent draw calls.
	 *
	 * @return {easeljs.Graphics} The Graphics instance the method is called on (useful for chaining calls.)
	 * @chainable
	 */
	unstore () {
		this._storeIndex = 0;
		return this;
	}

	/**
	 * Returns a clone of this Graphics instance. Note that the individual command objects are not cloned.
	 * @return {easeljs.Graphics} A clone of the current Graphics instance.
	 */
	clone () {
		let o = new Graphics();
		o.command = this.command;
		o._stroke = this._stroke;
		o._strokeStyle = this._strokeStyle;
		o._strokeDash = this._strokeDash;
		o._strokeIgnoreScale = this._strokeIgnoreScale;
		o._fill = this._fill;
		o._instructions = this._instructions.slice();
		o._commitIndex = this._commitIndex;
		o._activeInstructions = this._activeInstructions.slice();
		o._dirty = this._dirty;
		o._storeIndex = this._storeIndex;
		return o;
	}

	/**
	 * Returns a string representation of this object.
	 * @return {String} a string representation of the instance.
	 */
	toString () {
		return `[${this.constructor.name}]`;
	}

	/**
	 * @param {Boolean} commit
	 * @protected
	 */
	_updateInstructions (commit) {
		let instr = this._instructions, active = this._activeInstructions, commitIndex = this._commitIndex;

		if (this._dirty && active.length) {
			instr.length = commitIndex; // remove old, uncommitted commands
			instr.push(Graphics.beginCmd);

			const l = active.length, ll = instr.length;
			instr.length = ll+l;
			for (let i = 0; i < l; i++) { instr[i+ll] = active[i]; }

			if (this._fill) { instr.push(this._fill); }
			if (this._stroke) {
				// doesn't need to be re-applied if it hasn't changed.
				if (this._strokeDash !== this._oldStrokeDash) {
					instr.push(this._strokeDash);
				}
				if (this._strokeStyle !== this._oldStrokeStyle) {
					instr.push(this._strokeStyle);
				}
				if (commit) {
					this._oldStrokeDash = this._strokeDash;
					this._oldStrokeStyle = this._strokeStyle;
				}
				instr.push(this._stroke);
			}

			this._dirty = false;
		}

		if (commit) {
			active.length = 0;
			this._commitIndex = instr.length;
		}
	};

	/**
	 * @param {easeljs.Graphics.Fill} fill
	 * @protected
	 */
	_setFill (fill) {
		this._updateInstructions(true);
		this.command = this._fill = fill;
		return this;
	}

	/**
	 * @param {easeljs.Graphics.Stroke} stroke
	 * @protected
	 */
	_setStroke (stroke) {
		this._updateInstructions(true);
		if (this.command = this._stroke = stroke) {
			stroke.ignoreScale = this._strokeIgnoreScale;
		}
		return this;
	}

	static get LineTo () { return LineTo; }
	static get MoveTo () { return MoveTo; }
	static get ArcTo () { return ArcTo; }
	static get Arc () { return Arc; }
	static get QuadraticCurveTo () { return QuadraticCurveTo; }
	static get BezierCurveTo () { return BezierCurveTo; }
	static get Rect () { return Rect; }
	static get ClosePath () { return ClosePath; }
	static get BeginPath () { return BeginPath; }
	static get Fill () { return Fill; }
	static get Stroke () { return Stroke; }
	static get StrokeStyle () { return StrokeStyle; }
	static get StrokeDash () { return StrokeDash; }
	static get RoundRect () { return RoundRect; }
	static get Circle () { return Circle; }
	static get Ellipse () { return Ellipse; }
	static get PolyStar () { return PolyStar; }

}

/**
 * @see {@link easeljs.Graphics#lineTo}
 * @alias easeljs.Graphics.LineTo
 * @param {Number} x
 * @param {Number} y
 */
class LineTo {
	constructor (x, y) {
		/**
		 * @type {Number}
		 */
		this.x = x;
		/**
		 * @type {Number}
		 */
		this.y = y;
	}
	/**
	 * Execute the Graphics command in the provided Canvas context.
	 * @param {CanvasRenderingContext2D} ctx The canvas rendering context
	 */
	exec (ctx) {
		ctx.lineTo(this.x, this.y);
	}
}

/**
 * @see {@link easeljs.Graphics#moveTo}
 * @alias easeljs.Graphics.MoveTo
 * @param {Number} x
 * @param {Number} y
 */
class MoveTo {
 	constructor (x, y) {
		/**
		 * @type {Number}
		 */
 		this.x = x;
		/**
		 * @type {Number}
		 */
		this.y = y;
 	}
	/**
	 * @param {CanvasRenderingContext2D} ctx
	 */
 	exec (ctx) {
 		ctx.moveTo(this.x, this.y);
 	}
}


/**
 * @see {@link easeljs.Graphics#arcTo}
 * @alias easeljs.Graphics.ArcTo
 * @param {Number} x1
 * @param {Number} y1
 * @param {Number} x2
 * @param {Number} y2
 * @param {Number} radius
 */
class ArcTo {
 	constructor (x1, y1, x2, y2, radius) {
		/**
		 * @type {Number}
		 */
	 	this.x1 = x1;
		/**
		 * @type {Number}
		 */
		this.y1 = y1;
		/**
		 * @type {Number}
		 */
	 	this.x2 = x2;
		/**
		 * @type {Number}
		 */
		this.y2 = y2;
		/**
		 * @type {Number}
		 */
	 	this.radius = radius;
 	}
	/**
	 * Execute the Graphics command in the provided Canvas context.
	 * @param {CanvasRenderingContext2D} ctx The canvas rendering context
	 */
 	exec (ctx) {
 		ctx.arcTo(this.x1, this.y1, this.x2, this.y2, this.radius);
 	}
}

/**
 * @see {@link easeljs.Graphics#arc}
 * @alias easeljs.Graphics.Arc
 * @param {Number} x
 * @param {Number} y
 * @param {Number} radius
 * @param {Number} startAngle
 * @param {Number} endAngle
 * @param {Boolean} [anticlockwise=false]
 */
class Arc {
 	constructor (x, y, radius, startAngle, endAngle, anticlockwise = false) {
		/**
		 * @type {Number}
		 */
	 	this.x = x;
		/**
		 * @type {Number}
		 */
		this.y = y;
		/**
		 * @type {Number}
		 */
	 	this.radius = radius;
		/**
		 * @type {Number}
		 */
	 	this.startAngle = startAngle;
		/**
		 * @type {Number}
		 */
		this.endAngle = endAngle;
		/**
		 * @type {Boolean}
		 */
	 	this.anticlockwise = anticlockwise;
 	}
	/**
	 * Execute the Graphics command in the provided Canvas context.
	 * @param {CanvasRenderingContext2D} ctx The canvas rendering context
	 */
 	exec (ctx) {
 		ctx.arc(this.x, this.y, this.radius, this.startAngle, this.endAngle, this.anticlockwise);
 	}
}

/**
 * @see {@link easeljs.Graphics#quadraticCurveTo}
 * @alias easeljs.Graphics.QuadraticCurveTo
 * @param {Number} cpx
 * @param {Number} cpy
 * @param {Number} x
 * @param {Number} y
 */
class QuadraticCurveTo {
 	constructor (cpx, cpy, x, y) {
		/**
		 * @property cpx
		 * @type Number
		 */
	 	this.cpx = cpx;
		/**
		 * @property cpy
		 * @type Number
		 */
		this.cpy = cpy;
		/**
		 * @property x
		 * @type Number
		 */
	 	this.x = x;
		/**
		 * @property y
		 * @type Number
		 */
		this.y = y;
 	}
	/**
	 * Execute the Graphics command in the provided Canvas context.
	 * @param {CanvasRenderingContext2D} ctx The canvas rendering context
	 */
 	exec (ctx) {
 		ctx.quadraticCurveTo(this.cpx, this.cpy, this.x, this.y);
 	}
}

/**
 * @see {@link easeljs.Graphics#bezierCurveTo}
 * @alias easeljs.Graphics.BezierCurveTo
 * @param {Number} cp1x
 * @param {Number} cp1y
 * @param {Number} cp2x
 * @param {Number} cp2y
 * @param {Number} x
 * @param {Number} y
 */
class BezierCurveTo {
 	constructor (cp1x, cp1y, cp2x, cp2y, x, y) {
		/**
		 * @type {Number}
		 */
	 	this.cp1x = cp1x;
		/**
		 * @type {Number}
		 */
		this.cp1y = cp1y;
		/**
		 * @type {Number}
		 */
	 	this.cp2x = cp2x;
		/**
		 * @type {Number}
		 */
		this.cp2y = cp2y;
		/**
		 * @type {Number}
		 */
	 	this.x = x;
		/**
		 * @type {Number}
		 */
		this.y = y;
 	}
	/**
	 * Execute the Graphics command in the provided Canvas context.
	 * @param {CanvasRenderingContext2D} ctx The canvas rendering context
	 */
 	exec (ctx) {
 		ctx.bezierCurveTo(this.cp1x, this.cp1y, this.cp2x, this.cp2y, this.x, this.y);
 	}
}

/**
 * @see {@link easeljs.Graphics#rect}
 * @alias easeljs.Graphics.Rect
 * @param {Number} x
 * @param {Number} y
 * @param {Number} w
 * @param {Number} h
 */
class Rect {
 	constructor (x, y, w, h) {
		/**
		 * @type {Number}
		 */
	 	this.x = x;
		/**
		 * @type {Number}
		 */
		this.y = y;
		/**
		 * @type {Number}
		 */
	 	this.w = w;
		/**
		 * @type {Number}
		 */
		this.h = h;
 	}
	/**
	 * Execute the Graphics command in the provided Canvas context.
	 * @param {CanvasRenderingContext2D} ctx The canvas rendering context
	 */
 	exec (ctx) {
 		ctx.rect(this.x, this.y, this.w, this.h);
 	}
}

/**
 * @see {@link easeljs.Graphics#closePath}
 * @alias easeljs.Graphics.ClosePath
 */
class ClosePath {
 	constructor () { }
	/**
	 * Execute the Graphics command in the provided Canvas context.
	 * @param {CanvasRenderingContext2D} ctx The canvas rendering context
	 */
 	exec (ctx) {
 		ctx.closePath();
 	}
}

/**
 * @see {@link easeljs.Graphics#beginPath}
 * @alias easeljs.Graphics.BeginPath
 */
class BeginPath {
 	constructor () { }
	/**
	 * Execute the Graphics command in the provided Canvas context.
	 * @param {CanvasRenderingContext2D} ctx The canvas rendering context
	 */
 	exec (ctx) {
 		ctx.beginPath();
 	}
}

/**
 * @see {@link easeljs.Graphics#beginFill}
 * @alias easeljs.Graphics.Fill
 * @param {Object} style A valid Context2D fillStyle.
 * @param {Matrix2D} matrix
 */
class Fill {
	constructor (style, matrix) {
		/**
		 * A valid Context2D fillStyle.
		 * @type {Object}
		 */
		this.style = style;
		/**
		 * @type {easeljs.Matrix2D}
		 */
		this.matrix = matrix;
		/**
		 * @type {Boolean}
		 */
		this.path = false;
	}
	/**
	 * Execute the Graphics command in the provided Canvas context.
	 * @param {CanvasRenderingContext2D} ctx The canvas rendering context
	 */
	exec (ctx) {
		if (!this.style) { return; }
		ctx.fillStyle = this.style;
		let mtx = this.matrix;
		if (mtx) { ctx.save(); ctx.transform(mtx.a, mtx.b, mtx.c, mtx.d, mtx.tx, mtx.ty); }
		ctx.fill();
		if (mtx) { ctx.restore(); }
	}
	/**
	 * Creates a linear gradient style and assigns it to {@link easeljs.Graphics.Fill#style}.
	 * @see {@link easeljs.Graphics#beginLinearGradientFill}
	 * @param {Array<String>} colors
	 * @param {Array<Number>} ratios
	 * @param {Number} x0
	 * @param {Number} y0
	 * @param {Number} x1
	 * @param {Number} y1
	 * @return {easeljs.Graphics.Fill} Returns this Fill object for chaining or assignment.
	 */
	linearGradient (colors, ratios, x0, y0, x1, y1) {
		let o = this.style = Graphics._ctx.createLinearGradient(x0, y0, x1, y1);
		const l = colors.length;
		for (let i = 0; i < l; i++) { o.addColorStop(ratios[i], colors[i]); }
		o.props = {colors, ratios, x0, y0, x1, y1, type:"linear"};
		return this;
	}
	/**
	 * Creates a linear gradient style and assigns it to {@link easeljs.Graphics.Fill#style}.
	 * @see {@link easeljs.Graphics#beginRadialGradientFill}
	 * @param {Array<String>} colors
	 * @param {Array<Number>} ratios
	 * @param {Number} x0
	 * @param {Number} y0
	 * @param {Number} r0
	 * @param {Number} x1
	 * @param {Number} y1
	 * @param {Number} r1
	 * @return {easeljs.Graphics.Fill} Returns this Fill object for chaining or assignment.
	 */
	radialGradient (colors, ratios, x0, y0, r0, x1, y1, r1) {
		let o = this.style = Graphics._ctx.createRadialGradient(x0, y0, r0, x1, y1, r1);
		const l = colors.length;
		for (let i = 0; i < l; i++) { o.addColorStop(ratios[i], colors[i]); }
		o.props = {colors, ratios, x0, y0, r0, x1, y1, r1, type: "radial"};
		return this;
	}
	/**
	 * Creates a linear gradient style and assigns it to {@link easeljs.Graphics.Fill#style}.
	 * @see {@link easeljs.Graphics#beginBitmapFill}
	 * @param {HTMLImageElement | HTMLCanvasElement | HTMLVideoElement} image  Must be loaded prior to creating a bitmap fill, or the fill will be empty.
	 * @param {String} [repetition=""] One of: repeat, repeat-x, repeat-y, or no-repeat.
	 * @return {easeljs.Graphics.Fill} Returns this Fill object for chaining or assignment.
	 */
	bitmap (image, repetition = "") {
		if (image.naturalWidth || image.getContext || image.readyState >= 2) {
			let o = this.style = Graphics._ctx.createPattern(image, repetition);
			o.props = {image, repetition, type: "bitmap"};
		}
		return this;
	}
}

/**
 * @see {@link easeljs.Graphics#beginStroke}
 * @alias easeljs.Graphics.Stroke
 * @extends easeljs.Graphics.Fill
 * @param {Object} style A valid Context2D fillStyle.
 * @param {Boolean} ignoreScale
 */
class Stroke extends Fill {
	constructor (style, ignoreScale) {
		super();
		/**
		 * A valid Context2D strokeStyle.
		 * @type {Object}
		 */
		this.style = style;
		/**
		 * @type {Boolean}
		 */
		this.ignoreScale = ignoreScale;
		/**
		 * @type {Boolean}
		 */
		this.path = false;
	}
	/**
	 * Execute the Graphics command in the provided Canvas context.
	 * @override
	 * @param {CanvasRenderingContext2D} ctx The canvas rendering context
	 */
	exec (ctx) {
		if (!this.style) { return; }
		ctx.strokeStyle = this.style;
		if (this.ignoreScale) { ctx.save(); ctx.setTransform(1,0,0,1,0,0); }
		ctx.stroke();
		if (this.ignoreScale) { ctx.restore(); }
	}
}

/**
 * @see {@link easeljs.Graphics#setStrokeStyle}
 * @alias easeljs.Graphics.StrokeStyle
 * @param {Number} [width=1]
 * @param {String} [caps=butt]
 * @param {String} [joints=miter]
 * @param {Number} [miterLimit=10]
 * @param {Boolean} [ignoreScale=false]
 */
class StrokeStyle {
	constructor (width=1, caps="butt", joints="miter", miterLimit=10, ignoreScale=false) {
		/**
		 * @type {Number}
		 */
		this.width = width;
		/**
		 * One of: butt, round, square
		 * @type {String}
		 */
		this.caps = caps;
		/**
		 * One of: round, bevel, miter
		 * @type {String}
		 */
		this.joints = joints;
		/**
		 * @type {Number}
		 */
		this.miterLimit = miterLimit;
		/**
		 * @type {Boolean}
		 */
		this.ignoreScale = ignoreScale;
		/**
		 * @type {Boolean}
		 */
		this.path = false;
	}
	/**
	 * Execute the Graphics command in the provided Canvas context.
	 * @param {CanvasRenderingContext2D} ctx The canvas rendering context
	 */
	exec (ctx) {
		ctx.lineWidth = this.width;
		ctx.lineCap = (isNaN(this.caps) ? this.caps : Graphics._STROKE_CAPS_MAP[this.caps]);
		ctx.lineJoin = (isNaN(this.joints) ? this.joints : Graphics._STROKE_JOINTS_MAP[this.joints]);
		ctx.miterLimit = this.miterLimit;
		ctx.ignoreScale = this.ignoreScale;
	}
}

/**
 * @see {@link easeljs.Graphics#setStrokeDash}
 * @alias easeljs.Graphics.StrokeDash
 * @param {Array} [segments=[]]
 * @param {Number} [offset=0]
 */
class StrokeDash {
 	constructor (segments=[], offset=0) {
		/**
		 * @type {Array}
		 */
	 	this.segments = segments;
		/**
		 * @type {Number}
		 */
	 	this.offset = offset;
 	}

	/**
	 * Execute the Graphics command in the provided Canvas context.
	 * @param {CanvasRenderingContext2D} ctx The canvas rendering context
	 */
 	exec (ctx) {
 		if (ctx.setLineDash) { // feature detection.
	 		ctx.setLineDash(this.segments);
	 		ctx.lineDashOffset = this.offset;
	 	}
 	}
}

/**
 * @see {@link easeljs.Graphics#drawRoundRectComplex}
 * @alias easeljs.Graphics.RoundRect
 * @param {Number} x
 * @param {Number} y
 * @param {Number} w
 * @param {Number} h
 * @param {Number} radiusTL
 * @param {Number} radiusTR
 * @param {Number} radiusBR
 * @param {Number} radiusBL
 */
class RoundRect {
 	constructor (x, y, w, h, radiusTL, radiusTR, radiusBR, radiusBL) {
		/**
		 * @type {Number}
		 */
	 	this.x = x;
		/**
		 * @type {Number}
		 */
		this.y = y;
		/**
		 * @type {Number}
		 */
	 	this.w = w;
		/**
		 * @type {Number}
		 */
		this.h = h;
		/**
		 * @type {Number}
		 */
	 	this.radiusTL = radiusTL;
		/**
		 * @type {Number}
		 */
		this.radiusTR = radiusTR;
		/**
		 * @type {Number}
		 */
	 	this.radiusBR = radiusBR;
		/**
		 * @type {Number}
		 */
		this.radiusBL = radiusBL;
 	}
	/**
	 * Execute the Graphics command in the provided Canvas context.
	 * @param {CanvasRenderingContext2D} ctx The canvas rendering context
	 */
 	exec (ctx) {
 		let max = (this.w<this.h?this.w:this.h)/2;
	 	let mTL=0, mTR=0, mBR=0, mBL=0;
	 	let x = this.x, y = this.y, w = this.w, h = this.h;
	 	let rTL = this.radiusTL, rTR = this.radiusTR, rBR = this.radiusBR, rBL = this.radiusBL;

	 	if (rTL < 0) { rTL *= (mTL=-1); }
	 	if (rTL > max) { rTL = max; }
	 	if (rTR < 0) { rTR *= (mTR=-1); }
	 	if (rTR > max) { rTR = max; }
	 	if (rBR < 0) { rBR *= (mBR=-1); }
	 	if (rBR > max) { rBR = max; }
	 	if (rBL < 0) { rBL *= (mBL=-1); }
	 	if (rBL > max) { rBL = max; }

	 	ctx.moveTo(x+w-rTR, y);
	 	ctx.arcTo(x+w+rTR*mTR, y-rTR*mTR, x+w, y+rTR, rTR);
	 	ctx.lineTo(x+w, y+h-rBR);
	 	ctx.arcTo(x+w+rBR*mBR, y+h+rBR*mBR, x+w-rBR, y+h, rBR);
	 	ctx.lineTo(x+rBL, y+h);
	 	ctx.arcTo(x-rBL*mBL, y+h+rBL*mBL, x, y+h-rBL, rBL);
	 	ctx.lineTo(x, y+rTL);
	 	ctx.arcTo(x-rTL*mTL, y-rTL*mTL, x+rTL, y, rTL);
	 	ctx.closePath();
 	}
}

/**
 * @see {@link easeljs.Graphics#drawCircle}
 * @alias easeljs.Graphics.Circle
 * @param {Number} x
 * @param {Number} y
 * @param {Number} radius
 */
class Circle {
 	constructor (x, y, radius) {
		/**
		 * @type {Number}
		 */
	 	this.x = x;
		/**
		 * @type {Number}
		 */
		this.y = y;
		/**
		 * @type {Number}
		 */
	 	this.radius = radius;
 	}
	/**
	 * Execute the Graphics command in the provided Canvas context.
	 * @param {CanvasRenderingContext2D} ctx The canvas rendering context
	 */
 	exec (ctx) {
 		ctx.arc(this.x, this.y, this.radius, 0, Math.PI*2);
 	}
}

/**
 * @see {@link easeljs.Graphics#drawEllipse}
 * @alias easeljs.Graphics.Ellipse
 * @param {Number} x
 * @param {Number} y
 * @param {Number} w
 * @param {Number} h
 */
class Ellipse {
 	constructor (x, y, w, h) {
		/**
		 * @type {Number}
		 */
	 	this.x = x;
		/**
		 * @type {Number}
		 */
		this.y = y;
		/**
		 * @type {Number}
		 */
	 	this.w = w;
		/**
		 * @type {Number}
		 */
		this.h = h;
 	}
	/**
	 * Execute the Graphics command in the provided Canvas context.
	 * @param {CanvasRenderingContext2D} ctx The canvas rendering context
	 */
 	exec (ctx) {
 		let x = this.x, y = this.y;
	 	let w = this.w, h = this.h;

	 	let k = 0.5522848;
	 	let ox = (w / 2) * k;
	 	let oy = (h / 2) * k;
	 	let xe = x + w;
	 	let ye = y + h;
	 	let xm = x + w / 2;
	 	let ym = y + h / 2;

	 	ctx.moveTo(x, ym);
	 	ctx.bezierCurveTo(x, ym-oy, xm-ox, y, xm, y);
	 	ctx.bezierCurveTo(xm+ox, y, xe, ym-oy, xe, ym);
	 	ctx.bezierCurveTo(xe, ym+oy, xm+ox, ye, xm, ye);
	 	ctx.bezierCurveTo(xm-ox, ye, x, ym+oy, x, ym);
 	}
}

/**
 *  @see {@link easeljs.Graphics#drawPolyStar}
 * @alias easeljs.Graphics.PolyStar
 * @param {Number} x
 * @param {Number} y
 * @param {Number} radius
 * @param {Number} sides
 * @param {Number} [pointSize=0]
 * @param {Number} [angle=0]
 */
class PolyStar {
 	constructor (x, y, radius, sides, pointSize=0, angle=0) {
		/**
		 * @type {Number}
		 */
	 	this.x = x;
		/**
		 * @type {Number}
		 */
		this.y = y;
		/**
		 * @type {Number}
		 */
	 	this.radius = radius;
		/**
		 * @type {Number}
		 */
	 	this.sides = sides;
		/**
		 * @type {Number}
		 */
	 	this.pointSize = pointSize;
		/**
		 * @type {Number}
		 */
	 	this.angle = angle;
 	}
	/**
	 * Execute the Graphics command in the provided Canvas context.
	 * @param {CanvasRenderingContext2D} ctx The canvas rendering context
	 */
 	exec (ctx) {
 		let x = this.x, y = this.y;
	 	let radius = this.radius;
	 	let angle = this.angle/180*Math.PI;
	 	let sides = this.sides;
	 	let ps = 1-this.pointSize;
	 	let a = Math.PI/sides;

	 	ctx.moveTo(x+Math.cos(angle)*radius, y+Math.sin(angle)*radius);
	 	for (let i = 0; i < sides; i++) {
	 		angle += a;
	 		if (ps != 1) {
	 			ctx.lineTo(x+Math.cos(angle)*radius*ps, y+Math.sin(angle)*radius*ps);
	 		}
	 		angle += a;
	 		ctx.lineTo(x+Math.cos(angle)*radius, y+Math.sin(angle)*radius);
	 	}
	 	ctx.closePath();
 	}
}

/**
 * A reusable instance of {@link easeljs.Graphics.BeginPath} to avoid unnecessary instantiation.
 * @static
 * @readonly
 * @type {easeljs.Graphics.BeginPath}
 */
Graphics.beginCmd = new BeginPath();
/**
 * Map of Base64 characters to values. Used by {@link easeljs.Graphics#decodePath}.
 * @static
 * @readonly
 * @protected
 * @type {Object}
 */
Graphics._BASE_64 = {"A":0,"B":1,"C":2,"D":3,"E":4,"F":5,"G":6,"H":7,"I":8,"J":9,"K":10,"L":11,"M":12,"N":13,"O":14,"P":15,"Q":16,"R":17,"S":18,"T":19,"U":20,"V":21,"W":22,"X":23,"Y":24,"Z":25,"a":26,"b":27,"c":28,"d":29,"e":30,"f":31,"g":32,"h":33,"i":34,"j":35,"k":36,"l":37,"m":38,"n":39,"o":40,"p":41,"q":42,"r":43,"s":44,"t":45,"u":46,"v":47,"w":48,"x":49,"y":50,"z":51,"0":52,"1":53,"2":54,"3":55,"4":56,"5":57,"6":58,"7":59,"8":60,"9":61,"+":62,"/":63};
/**
 * Maps numeric values for the caps parameter of {@link easeljs.Graphics#setStrokeStyle} to
 * corresponding string values. This is primarily for use with the tiny API.<br />
 * The mappings are as follows:
 * <ul>
 *   <li>0 to "butt"</li>
 *   <li>1 to "round"</li>
 *   <li>2 to "square".</li>
 * </ul>
 *
 * @example <caption>Set line caps to "square"</caption>
 * graphics.ss(16, 2);
 *
 * @static
 * @readonly
 * @protected
 * @type {Array<String>}
 */
Graphics._STROKE_CAPS_MAP = ["butt","round","square"];
/**
 * Maps numeric values for the joints parameter of {@link easeljs.Graphics#setStrokeStyle} to
 * corresponding string values. This is primarily for use with the tiny API.<br />
 * The mappings are as follows:
 * <ul>
 *   <li>0 to "miter"</li>
 *   <li>1 to "round"</li>
 *   <li>2 to "bevel".</li>
 * </ul>
 *
 * @example <caption>Set the line joints to "bevel"</caption>
 * graphics.ss(16, 0, 2);
 *
 * @static
 * @readonly
 * @protected
 * @type {Array<String>}
 */
Graphics._STROKE_JOINTS_MAP = ["miter", "round", "bevel"];
/**
 * @static
 * @readonly
 * @protected
 * @type {CanvasRenderingContext2D}
 */
Graphics._ctx = (0,_utils_Canvas__WEBPACK_IMPORTED_MODULE_0__.default)().getContext("2d");


/***/ }),

/***/ "./node_modules/@createjs/easeljs/src/display/MovieClip.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@createjs/easeljs/src/display/MovieClip.js ***!
  \*****************************************************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => /* binding */ MovieClip
/* harmony export */ });
/* harmony import */ var _Container__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Container */ "./node_modules/@createjs/easeljs/src/display/Container.js");
/* harmony import */ var _DisplayObject__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./DisplayObject */ "./node_modules/@createjs/easeljs/src/display/DisplayObject.js");
/* harmony import */ var _createjs_tweenjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @createjs/tweenjs */ "./node_modules/@createjs/tweenjs/src/main.js");
/**
 * @license MovieClip
 * Visit http://createjs.com/ for documentation, updates and examples.
 *
 * Copyright (c) 2017 gskinner.com, inc.
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */





/**
 * The MovieClip class associates a TweenJS Timeline with an EaselJS {@link easeljs.Container}. It allows
 * you to create objects which encapsulate timeline animations, state changes, and synched actions. Due to the
 * complexities inherent in correctly setting up a MovieClip, it is largely intended for tool output and is not included
 * in the main EaselJS library.
 *
 * Currently MovieClip only works properly if it is tick based (as opposed to time based) though some concessions have
 * been made to support time-based timelines in the future.
 *
 * It is recommended to use `tween.to()` to animate and set properties (use no duration to have it set
 * immediately), and the `tween.wait()` method to create delays between animations. Note that using the
 * `tween.set()` method to affect properties will likely not provide the desired result.
 *
 * @memberof easeljs
 * @example <caption>Animate two shapes back and forth</caption>
 * let stage = new Stage("canvas");
 * Ticker.addEventListener("tick", stage);
 *
 * let mc = new MovieClip(null, 0, true, {start:20});
 * stage.addChild(mc);
 *
 * let child1 = new Shape(
 *   new Graphics().beginFill("#999999").drawCircle(30,30,30)
 * );
 * let child2 = new Shape(
 *   new Graphics().beginFill("#5a9cfb").drawCircle(30,30,30)
 * );
 *
 * mc.timeline.addTween(
 *   Tween.get(child1).to({x:0}).to({x:60}, 50).to({x:0}, 50)
 * );
 * mc.timeline.addTween(
 *   Tween.get(child2).to({x:60}).to({x:0}, 50).to({x:60}, 50)
 * );
 *
 * mc.gotoAndPlay("start");
 *
 * @extends easeljs.Container
 * @param {Object} [props] The configuration properties to apply to this instances.
 * This object will also be passed into the Timeline instance associated with this MovieClip.
 * See the documentation for Timeline for a list of supported props.
 */
class MovieClip extends _Container__WEBPACK_IMPORTED_MODULE_0__.default {

	constructor (props) {
		super();
		!MovieClip.inited && MovieClip.init();

		/**
		 * Controls how this MovieClip advances its time. Must be one of 0 (INDEPENDENT), 1 (SINGLE_FRAME), or 2 (SYNCHED).
		 * See each constant for a description of the behaviour.
		 * @type {Number}
		 * @default 0
		 */
		this.mode = props.mode != null ? props.mode : MovieClip.INDEPENDENT;

		/**
		 * Specifies what the first frame to play in this movieclip, or the only frame to display if mode is SINGLE_FRAME.
		 * @type {Number}
		 * @default 0
		 */
		this.startPosition = props.startPosition != null ? props.startPosition : 0;

		/**
     * Specifies how many times this MovieClip should loop. A value of -1 indicates it should loop indefinitely. A value of
     * 1 would cause it to loop once (ie. play a total of twice).
     * @property loop
		 * @type {Number}
		 * @default -1
		 */
		if (typeof props.loop === "number") {
			this.loop = props.loop;
		} else if (props.loop === false) {
			this.loop = 0;
		} else {
			this.loop = -1;
		}

		/**
		 * The current frame of the movieclip.
		 * @type Number
		 * @default 0
		 * @readonly
		 */
		this.currentFrame = 0;

		/**
     * The TweenJS Timeline that is associated with this MovieClip. This is created automatically when the MovieClip
     * instance is initialized. Animations are created by adding <a href="http://tweenjs.com">TweenJS</a> Tween
     * instances to the timeline.
     *
     * Elements can be added and removed from the timeline by toggling an "_off" property
     * using the `tweenInstance.to()` method. Note that using `Tween.set` is not recommended to
     * create MovieClip animations. The following example will toggle the target off on frame 0, and then back on for
     * frame 1. You can use the "visible" property to achieve the same effect.
     *
     * @example
     * let tween = Tween.get(target).to({x:0}).to({x:100}, 30);
     * let mc = new MovieClip();
     * mc.timeline.addTween(tween);
     *
     * @example
     * Tween.get(target).to({_off:false})
     *   .wait(1).to({_off:true})
     *   .wait(1).to({_off:false});
     *
     * @type {easeljs.Timeline}
		 */
		this.timeline = new _createjs_tweenjs__WEBPACK_IMPORTED_MODULE_2__.Timeline(Object.assign({ useTicks: true, paused: true }, props));

		/**
		 * If true, the MovieClip's position will not advance when ticked.
		 * @type {Boolean}
		 * @default false
		 */
		this.paused = props.paused != null ? props.paused : false;

		/**
		 * If true, actions in this MovieClip's tweens will be run when the playhead advances.
		 * @type {Boolean}
		 * @default true
		 */
		this.actionsEnabled = true;

		/**
		 * If true, the MovieClip will automatically be reset to its first frame whenever the timeline adds
		 * it back onto the display list. This only applies to MovieClip instances with mode=INDEPENDENT.
		 * <br><br>
		 * For example, if you had a character animation with a "body" child MovieClip instance
		 * with different costumes on each frame, you could set `body.autoReset = false`, so that
		 * you can manually change the frame it is on, without worrying that it will be reset
		 * automatically.
		 * @type {Boolean}
		 * @default true
		 */
		this.autoReset = true;

		/**
		 * An array of bounds for each frame in the MovieClip. This is mainly intended for tool output.
		 * @type {Array}
		 */
		this.frameBounds = this.frameBounds || props.frameBounds; // frameBounds are set on the prototype in Animate.

		/**
		 * By default MovieClip instances advance one frame per tick. Specifying a framerate for the MovieClip
		 * will cause it to advance based on elapsed time between ticks as appropriate to maintain the target
		 * framerate.
		 *
		 * For example, if a MovieClip with a framerate of 10 is placed on a Stage being updated at 40fps, then the MovieClip will
		 * advance roughly one frame every 4 ticks. This will not be exact, because the time between each tick will
		 * vary slightly between frames.
		 *
		 * This feature is dependent on the tick event object (or an object with an appropriate "delta" property) being
		 * passed into {@link easeljs.Stage#update}.
		 * @type {Number}
		 * @default null
		 */
		this.framerate = null;

		/**
		 * @type {Number}
		 * @default 0
		 * @private
		 */
		this._synchOffset = 0;

		/**
		 * @type {Number}
		 * @default -1
		 * @private
		 */
		this._rawPosition = -1; // TODO: evaluate using a ._reset Boolean prop instead of -1.

		/**
		 * The time remaining from the previous tick, only applicable when .framerate is set.
		 * @type {Number}
		 * @private
		 */
		this._t = 0;

		/**
		 * List of display objects that are actively being managed by the MovieClip.
		 * @type {Object}
		 * @private
		 */
		this._managed = {};

		/**
		 * @type {Function}
		 * @private
		 */
		this._bound_resolveState = this._resolveState.bind(this);
	}

	static init () {
		if (MovieClip.inited) { return; }
		// plugins introduce some overhead to Tween, so we only install this if an MC is instantiated.
		MovieClipPlugin.install();
		MovieClip.inited = true;
	}

	// TODO: can we just proxy `get currentFrame` to timeline.position as well? Ditto for `get loop` (or just remove entirely).
	//
	/**
	 * Returns an array of objects with label and position (aka frame) properties, sorted by position.
	 * @see {@link tweenjs.Timeline#labels}
	 * @type {Array}
	 * @readonly
	 */
	get labels () {
		return this.timeline.labels;
	}

	/**
	 * Returns the name of the label on or immediately before the current frame.
	 * @see {@link tweenjs.Timeline#currentLabel}
	 * for more information.
	 * @type {String}
	 * @readonly
	 */
	get currentLabel () {
		return this.timeline.currentLabel;
	}

	 /**
 	 * Returns the duration of this MovieClip in seconds or ticks.
 	 * @see {@link tweenjs.Timeline#duration}
 	 * @type {Number}
 	 * @readonly
 	 */
 	get duration () {
		return this.timeline.duration;
	}

	/**
	 * Returns the duration of this MovieClip in seconds or ticks. Identical to {@link easeljs.MovieClip#duration}
	 * and provided for Adobe Flash/Animate API compatibility.
	 * @see {@link tweenjs.Timeline#duration}
	 * @type {Number}
	 * @readonly
	 */
	get totalFrames () {
		return this.duration;
	}

	isVisible () {
		// children are placed in draw, so we can't determine if we have content.
		return !!(this.visible && this.alpha > 0 && this.scaleX != 0 && this.scaleY != 0);
	}

	draw (ctx, ignoreCache) {
		// draw to cache first:
		if (this.drawCache(ctx, ignoreCache)) { return true; }
    this._updateState();
		super.draw(ctx, ignoreCache);
		return true;
	}

	/**
	 * Sets paused to false.
	 */
	play () {
		this.paused = false;
	}

	/**
	 * Sets paused to true.
	 */
	stop () {
		this.paused = true;
	}

	/**
	 * Advances this movie clip to the specified position or label and plays the timeline.
	 * @param {String | Number} positionOrLabel The animation name or frame number to go to.
	 */
	gotoAndPlay (positionOrLabel) {
		this.play();
		this._goto(positionOrLabel);
	}

	/**
	 * Advances this movie clip to the specified position or label and stops the timeline.
	 * @param {String | Number} positionOrLabel The animation or frame name to go to.
	 */
	gotoAndStop (positionOrLabel) {
		this.stop();
		this._goto(positionOrLabel);
	}

	/**
	 * Advances the playhead. This occurs automatically each tick by default.
	 * @param {Number} [time] The amount of time in ms to advance by. Only applicable if framerate is set.
	*/
	advance (time) {
		if (this.mode !== MovieClip.INDEPENDENT) { return; } // update happens in draw for synched clips
		// if this MC doesn't have a framerate, hunt ancestors for one:
		let o = this, fps = o.framerate;
		while ((o = o.parent) && fps === null) {
			if (o.mode === MovieClip.INDEPENDENT) { fps = o._framerate; }
		}
		this._framerate = fps;

		if (this.paused) { return; }
		// calculate how many frames to advance:
		let t = (fps !== null && fps !== -1 && time !== null) ? time / (1000 / fps) + this._t : 1;
		let frames = t | 0;
		this._t = t - frames; // leftover time, save to add to next advance.

		while (frames--) {
			this._updateTimeline(this._rawPosition + 1, false);
		}
	}

	/**
	 * MovieClip instances cannot be cloned.
	 * @throws MovieClip cannot be cloned.
	 */
	clone () {
		// TODO: add support for this? Need to clone the Timeline & retarget tweens - pretty complex.
		throw "MovieClip cannot be cloned.";
	}

	_updateState () {
		if (this._rawPosition === -1 || this.mode !== MovieClip.INDEPENDENT) { this._updateTimeline(-1); }
	}

	_tick (evtObj) {
		this.advance(evtObj && evtObj.delta);
		super._tick(evtObj);
	}

	/**
	 * @param {String | Number} positionOrLabel The animation name or frame number to go to.
	 * @protected
	 */
	_goto (positionOrLabel) {
		let pos = this.timeline.resolve(positionOrLabel);
		if (pos == null) { return; }
		this._t = 0;
		this._updateTimeline(pos, true);
	}

	/**
	 * @private
	 */
	_reset () {
		this._rawPosition = -1;
		this._t = this.currentFrame = 0;
		this.paused = false;
	}

	/**
	 * @param {Number} rawPosition
	 * @param {Boolean} jump Indicates whether this update is due to jumping (via gotoAndXX) to a new position.
	 * @protected
	 */
	_updateTimeline (rawPosition, jump) {
		let synced = this.mode !== MovieClip.INDEPENDENT, tl = this.timeline;
		if (synced) { rawPosition = this.startPosition + (this.mode === MovieClip.SINGLE_FRAME ? 0 : this._synchOffset); }
		if (rawPosition < 1) { rawPosition = 0; }
		if (this._rawPosition === rawPosition && !synced) { return; }
		this._rawPosition = rawPosition;

		// update timeline position, ignoring actions if this is a graphic.
		tl.loop = this.loop; // TODO: should we maintain this on MovieClip, or just have it on timeline?
		tl.setPosition(rawPosition, synced || !this.actionsEnabled, jump, this._bound_resolveState);
	}

	/**
	 * Renders position 0 without running actions or updating _rawPosition.
	 * Primarily used by Animate CC to build out the first frame in the constructor of MC symbols.
	 * NOTE: not tested when run after the MC advances past the first frame.
	 * @protected
	 */
	_renderFirstFrame () {
		const tl = this.timeline, pos = tl.rawPosition;
		tl.setPosition(0, true, true, this._bound_resolveState);
		tl.rawPosition = pos;
	}

	/**
	 * Runs via a callback after timeline property updates and before actions.
	 * @protected
	 */
	_resolveState () {
		let tl = this.timeline;
		this.currentFrame = tl.position;

		for (let n in this._managed) { this._managed[n] = 1; }

		let tweens = tl.tweens;
		for (let tween of tweens) {
			let target = tween.target;
			if (target === this || tween.passive) { continue; } // TODO: this assumes the actions tween from Animate has `this` as the target. Likely a better approach.
			let offset = tween._stepPosition;

			if (target instanceof _DisplayObject__WEBPACK_IMPORTED_MODULE_1__.default) {
				// motion tween.
				this._addManagedChild(target, offset);
			} else {
				// state tween.
				this._setState(target.state, offset);
			}
		}

		let kids = this.children;
		for (let i=kids.length-1; i>=0; i--) {
			let id = kids[i].id;
			if (this._managed[id] === 1) {
				this.removeChildAt(i);
				delete(this._managed[id]);
			}
		}
	}

	/**
	 * @param {Array} state
	 * @param {Number} offset
	 * @protected
	 */
	_setState (state, offset) {
		if (!state) { return; }
		for (let i = state.length - 1; i >= 0; i--) {
			let o = state[i];
			let target = o.t;
			let props = o.p;
			for (let n in props) { target[n] = props[n]; }
			this._addManagedChild(target, offset);
		}
	}

	/**
	 * Adds a child to the timeline, and sets it up as a managed child.
	 * @param {easeljs.MovieClip} child The child MovieClip to manage
	 * @param {Number} offset
	 * @private
	 */
	_addManagedChild (child, offset) {
		if (child._off) { return; }
		this.addChildAt(child, 0);

		if (child instanceof MovieClip) {
			child._synchOffset = offset;
			// TODO: this does not precisely match Adobe Flash/Animate, which loses track of the clip if it is renamed or removed from the timeline, which causes it to reset.
      // TODO: should also reset when MovieClip loops, though that will be a bit tricky to detect.
			if (child.mode === MovieClip.INDEPENDENT && child.autoReset && !this._managed[child.id]) { child._reset(); }
		}
		this._managed[child.id] = 2;
	}

	/**
	 * @param {easeljs.Matrix2D} matrix
	 * @param {Boolean} ignoreTransform
	 * @return {easeljs.Rectangle}
	 * @protected
	 */
	_getBounds (matrix, ignoreTransform) {
		let bounds = this.getBounds();
		if (!bounds && this.frameBounds) { bounds = this._rectangle.copy(this.frameBounds[this.currentFrame]); }
		if (bounds) { return this._transformBounds(bounds, matrix, ignoreTransform); }
		return super._getBounds(matrix, ignoreTransform);
	}

}

/**
 * The MovieClip will advance independently of its parent, even if its parent is paused.
 * This is the default mode.
 * @static
 * @type {String}
 * @default independent
 * @readonly
 */
MovieClip.INDEPENDENT = "independent";
/**
 * The MovieClip will only display a single frame (as determined by the startPosition property).
 * @static
 * @type {String}
 * @default single
 * @readonly
 */
MovieClip.SINGLE_FRAME = "single";
/**
 * The MovieClip will be advanced only when its parent advances and will be synched to the position of
 * the parent MovieClip.
 * @static
 * @type {String}
 * @default synched
 * @readonly
 */
MovieClip.SYNCHED = "synched";
/**
 * Has the MovieClipPlugin been installed to TweenJS yet?
 * @static
 * @type {Boolean}
 * @default false
 * @readonly
 */
MovieClip.inited = false;

/**
 * This plugin works with <a href="http://tweenjs.com" target="_blank">TweenJS</a> to prevent the startPosition property from tweening.
 * @todo update to new plugin model
 * @static
 * @inner
 */
class MovieClipPlugin {

	constructor () {
		throw "MovieClipPlugin cannot be instantiated.";
	}

	/**
	 * @private
	 */
	static install () {
		_createjs_tweenjs__WEBPACK_IMPORTED_MODULE_2__.Tween.installPlugin(MovieClipPlugin);
	}

	/**
	 * @param {tweenjs.Tween} tween
	 * @param {String} prop
	 * @param {String|Number|Boolean} value
	 * @private
	 */
	static init (tween, prop, value) {
		return value;
	}

	/**
	 * @param {tweenjs.Tween} tween
	 * @param {String} prop
	 * @param {String | Number | Boolean} value
	 * @param {Array} startValues
	 * @param {Array} endValues
	 * @param {Number} ratio
	 * @param {Object} wait
	 * @param {Object} end
	 * @return {*}
	 */
	static tween (tween, prop, value, startValues, endValues, ratio, wait, end) {
		if (!(tween.target instanceof MovieClip)) { return value; }
		return (ratio === 1 ? endValues[prop] : startValues[prop]);
	}

}

/**
 * @static
 * @type {Number}
 * @default 100
 * @readonly
 */
MovieClipPlugin.priority = 100;


/***/ }),

/***/ "./node_modules/@createjs/easeljs/src/display/Shadow.js":
/*!**************************************************************!*\
  !*** ./node_modules/@createjs/easeljs/src/display/Shadow.js ***!
  \**************************************************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => /* binding */ Shadow
/* harmony export */ });
/**
 * @license Shadow
 * Visit http://createjs.com/ for documentation, updates and examples.
 *
 * Copyright (c) 2017 gskinner.com, inc.
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * This class encapsulates the properties required to define a shadow to apply to a {@link easeljs.DisplayObject}
 * via its `shadow` property.
 *
 * @memberof easeljs
 * @example
 * img.shadow = new Shadow("#000000", 5, 5, 10);
 *
 * @param {String} [color=black] The color of the shadow. This can be any valid CSS color value.
 * @param {Number} [offsetX=0] The x offset of the shadow in pixels.
 * @param {Number} [offsetY=0] The y offset of the shadow in pixels.
 * @param {Number} [blur=0] The size of the blurring effect.
 */
class Shadow {

	constructor (color = "black", offsetX = 0, offsetY = 0, blur = 0) {
		/**
		 * The color of the shadow. This can be any valid CSS color value.
		 * @type {String}
		 * @default black
		 */
		this.color = color;

		/**
		 * The x offset of the shadow.
		 * @type {Number}
		 * @default 0
		 */
		this.offsetX = offsetX;

		/**
		 * The y offset of the shadow.
		 * @type {Number}
		 * @default 0
		 */
		this.offsetY = offsetY;

		/**
		 * The blur of the shadow.
		 * @type {Number}
		 * @default 0
		 */
		this.blur = blur;
	}

	/**
	 * Returns a string representation of this object.
	 * @return {String}
	 */
	toString () {
		return `[${this.constructor.name}]`;
	}

	/**
	 * Returns a clone of this Shadow instance.
	 * @return {Shadow} A clone of the current Shadow instance.
	 */
	clone () {
		return new Shadow(this.color, this.offsetX, this.offsetY, this.blur);
	}

}

/**
 * An identity shadow object (all properties are set to 0).
 * @type {easeljs.Shadow}
 * @static
 * @readonly
 */
Shadow.identity = new Shadow("transparent");


/***/ }),

/***/ "./node_modules/@createjs/easeljs/src/display/Shape.js":
/*!*************************************************************!*\
  !*** ./node_modules/@createjs/easeljs/src/display/Shape.js ***!
  \*************************************************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => /* binding */ Shape
/* harmony export */ });
/* harmony import */ var _DisplayObject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./DisplayObject */ "./node_modules/@createjs/easeljs/src/display/DisplayObject.js");
/* harmony import */ var _Graphics__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Graphics */ "./node_modules/@createjs/easeljs/src/display/Graphics.js");
/**
 * @license Shape
 * Visit http://createjs.com/ for documentation, updates and examples.
 *
 * Copyright (c) 2017 gskinner.com, inc.
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */




/**
 * A Shape allows you to display vector art in the display list. It composites a {@link easeljs.Graphics}
 * instance which exposes all of the vector drawing methods. The Graphics instance can be shared between multiple Shape
 * instances to display the same vector graphics with different positions or transforms.
 *
 * If the vector art will not change between draws, you may want to use the {@link easeljs.DisplayObject#cache}
 * method to reduce the rendering cost.
 *
 * @memberof easeljs
 * @example
 * var graphics = new Graphics().beginFill("#ff0000").drawRect(0, 0, 100, 100);
 * var shape = new Shape(graphics);
 * // Alternatively use can also use the graphics property of the Shape class to renderer the same as above.
 * var shape = new Shape();
 * shape.graphics.beginFill("#ff0000").drawRect(0, 0, 100, 100);
 *
 * @extends easeljs.DisplayObject
 * @param {easeljs.Graphics} [graphics] The graphics instance to display. If null, a new Graphics instance will be created.
 */
class Shape extends _DisplayObject__WEBPACK_IMPORTED_MODULE_0__.default {

	constructor (graphics = new _Graphics__WEBPACK_IMPORTED_MODULE_1__.default()) {
		super();

		/**
		 * The graphics instance to display.
		 * @type {easeljs.Graphics}
		 */
		this.graphics = graphics;
	}

	isVisible () {
		let hasContent = this.cacheCanvas || (this.graphics && !this.graphics.isEmpty());
		return !!(this.visible && this.alpha > 0 && this.scaleX != 0 && this.scaleY != 0 && hasContent);
	}

	draw (ctx, ignoreCache = false) {
		if (super.draw(ctx, ignoreCache)) { return true; }
		this.graphics.draw(ctx, this);
		return true;
	}

	/**
	 * Returns a clone of this Shape. Some properties that are specific to this instance's current context are reverted to
	 * their defaults (for example .parent).
	 * @override
	 * @param {Boolean} [recursive=false] If true, this Shape's {@link easeljs.Graphics} instance will also be
	 * cloned. If false, the Graphics instance will be shared with the new Shape.
	 */
	clone (recursive = false) {
		let g = (recursive && this.graphics) ? this.graphics.clone() : this.graphics;
		return this._cloneProps(new Shape(g));
	}

}


/***/ }),

/***/ "./node_modules/@createjs/easeljs/src/display/Sprite.js":
/*!**************************************************************!*\
  !*** ./node_modules/@createjs/easeljs/src/display/Sprite.js ***!
  \**************************************************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => /* binding */ Sprite
/* harmony export */ });
/* harmony import */ var _DisplayObject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./DisplayObject */ "./node_modules/@createjs/easeljs/src/display/DisplayObject.js");
/* harmony import */ var _createjs_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @createjs/core */ "./node_modules/@createjs/core/src/main.js");
/**
 * @license Sprite
 * Visit http://createjs.com/ for documentation, updates and examples.
 *
 * Copyright (c) 2017 gskinner.com, inc.
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */




/**
 * Displays a frame or sequence of frames (ie. an animation) from a SpriteSheet instance. A sprite sheet is a series of
 * images (usually animation frames) combined into a single image. For example, an animation consisting of 8 100x100
 * images could be combined into a 400x200 sprite sheet (4 frames across by 2 high). You can display individual frames,
 * play frames as an animation, and even sequence animations together.
 *
 * @memberof easeljs
 * @extends easeljs.DisplayObject
 * @example
 * let sprite = new Sprite(spriteSheet);
 * sprite.gotoAndStop("frameName");
 *
 * Until {@link easeljs.Sprite#gotoAndStop} or {@link easeljs.Sprite#gotoAndPlay} is called,
 * only the first defined frame defined in the sprite sheet will be displayed.
 *
 * @see {@link easeljs.SpriteSheet "More information on setting up frames and animations."}
 * @param {SpriteSheet} spriteSheet The SpriteSheet instance to play back. This includes the source image(s), frame
 * dimensions, and frame data.
 * @param {String | Number} [frameOrAnimation] The frame number or animation to play initially.
 */
class Sprite extends _DisplayObject__WEBPACK_IMPORTED_MODULE_0__.default {

	constructor (spriteSheet, frameOrAnimation) {
		super();

		/**
		 * The frame index that will be drawn when draw is called. Note that with some {@link easeljs.SpriteSheet}
		 * definitions, this will advance non-sequentially. This will always be an integer value.
		 * @type {Number}
		 * @default 0
		 * @readonly
		 */
		this.currentFrame = 0;

		/**
		 * Returns the name of the currently playing animation.
		 * @type {String}
		 * @readonly
		 */
		this.currentAnimation = null;

		/**
		 * Prevents the animation from advancing each tick automatically. For example, you could create a sprite
		 * sheet of icons, set paused to true, and display the appropriate icon by setting `currentFrame`.
		 * @type {Boolean}
		 * @default true
		 */
		this.paused = true;

		/**
		 * The SpriteSheet instance to play back. This includes the source image, frame dimensions, and frame data.
		 * @type {easeljs.SpriteSheet}
		 * @readonly
		 */
		this.spriteSheet = spriteSheet;

		/**
		 * Specifies the current frame index within the currently playing animation. When playing normally, this will increase
		 * from 0 to n-1, where n is the number of frames in the current animation.
		 * This could be a non-integer value if using time-based playback, or if the animation's speed is not an integer.
		 * @see {@link easeljs.Sprite#framerate}
		 * @type {Number}
		 * @default 0
		 */
		this.currentAnimationFrame = 0;

		/**
		 * By default Sprite instances advance one frame per tick. Specifying a framerate for the Sprite (or its related
		 * SpriteSheet) will cause it to advance based on elapsed time between ticks as appropriate to maintain the target
		 * framerate.
		 *
		 * For example, if a Sprite with a framerate of 10 is placed on a Stage being updated at 40fps, then the Sprite will
		 * advance roughly one frame every 4 ticks. This will not be exact, because the time between each tick will
		 * vary slightly between frames.
		 *
		 * This feature is dependent on the tick event object (or an object with an appropriate "delta" property) being
		 * passed into {@link easeljs.Stage#update}.
		 * @type {Number}
		 * @default 0
		 */
		this.framerate = 0;

		/**
		 * Current animation object.
		 * @protected
		 * @type {Object}
		 * @default null
		 */
		this._animation = null;

		/**
		 * Current frame index.
		 * @protected
		 * @type {Number}
		 * @default null
		 */
		this._currentFrame = null;

		/**
		 * Skips the next auto advance. Used by gotoAndPlay to avoid immediately jumping to the next frame
		 * @protected
		 * @type {Boolean}
		 * @default false
		 */
		this._skipAdvance = false;

		/**
		 * Set as compatible with WebGL.
		 * @protected
		 * @type {Number}
		 * @default 1
		 */
		this._webGLRenderStyle = _DisplayObject__WEBPACK_IMPORTED_MODULE_0__.default._StageGL_SPRITE;

		if (frameOrAnimation != null) {
			this.gotoAndPlay(frameOrAnimation);
		}
	}

	isVisible () {
		let hasContent = this.cacheCanvas || this.spriteSheet.complete;
		return !!(this.visible && this.alpha > 0 && this.scaleX != 0 && this.scaleY != 0 && hasContent);
	}

	draw (ctx, ignoreCache) {
		if (super.draw(ctx, ignoreCache)) { return true; }
		this._normalizeFrame();
		let o = this.spriteSheet.getFrame(this._currentFrame|0);
		if (!o) { return false; }
		let rect = o.rect;
		if (rect.width && rect.height) { ctx.drawImage(o.image, rect.x, rect.y, rect.width, rect.height, -o.regX, -o.regY, rect.width, rect.height); }
		return true;
	}

	// Note, the doc sections below document using the specified APIs (from DisplayObject) from
	// Bitmap. This is why they have no method implementations.

	/**
	 * Because the content of a Sprite is already in a raster format, cache is unnecessary for Sprite instances.
	 * You should not cache Sprite instances as it can degrade performance.
	 * @name easeljs.Sprite#cache
	 */

	/**
	 * Because the content of a Sprite is already in a raster format, cache is unnecessary for Sprite instances.
	 * You should not cache Sprite instances as it can degrade performance.
	 * @name easeljs.Sprite#updateCache
	 */

	/**
	 * Because the content of a Sprite is already in a raster format, cache is unnecessary for Sprite instances.
	 * You should not cache Sprite instances as it can degrade performance.
	 * @name easeljs.Sprite#uncache
	 */

	/**
	 * Play (unpause) the current animation. The Sprite will be paused if either {@link easeljs.Sprite#stop}
	 * or {@link easeljs.Sprite#gotoAndStop} is called. Single frame animations will remain unchanged.
	 */
	play () {
		this.paused = false;
	}

	/**
	 * Stop playing a running animation. The Sprite will be playing if {@link easeljs.Sprite#gotoAndPlay} is called.
	 * Note that calling `gotoAndPlay()` or {@link easeljs.Sprite#play} will resume playback.
	 */
	stop () {
		this.paused = true;
	}

	/**
	 * Sets paused to false and plays the specified animation name, named frame, or frame number.
	 * @param {String | Number} frameOrAnimation The frame number or animation name that the playhead should move to
	 * and begin playing.
	 */
	gotoAndPlay (frameOrAnimation) {
		this.paused = false;
		this._skipAdvance = true;
		this._goto(frameOrAnimation);
	}

	/**
	 * Sets paused to true and seeks to the specified animation name, named frame, or frame number.
	 * @param {String | Number} frameOrAnimation The frame number or animation name that the playhead should move to
	 * and stop.
	 */
	gotoAndStop (frameOrAnimation) {
		this.paused = true;
		this._goto(frameOrAnimation);
	}

	/**
	 * Advances the playhead. This occurs automatically each tick by default.
	 * @param {Number} [time] The amount of time in ms to advance by. Only applicable if framerate is set on the Sprite
	 * or its SpriteSheet.
	*/
	advance (time) {
		let fps = this.framerate || this.spriteSheet.framerate;
		let t = (fps && time != null) ? time/(1000/fps) : 1;
		this._normalizeFrame(t);
	}

	/**
	 * Returns a {@link easeljs.Rectangle} instance defining the bounds of the current frame relative to
	 * the origin. For example, a 90 x 70 frame with `regX=50` and `regY=40` would return a
	 * rectangle with [x=-50, y=-40, width=90, height=70]. This ignores transformations on the display object.
	 *
	 * @see {@link easeljs.SpriteSheet#frameBounds}
	 * @return {easeljs.Rectangle} A Rectangle instance. Returns null if the frame does not exist, or the image is not fully loaded.
	 */
	getBounds () {
		// TODO: should this normalizeFrame?
		return super.getBounds() || this.spriteSheet.getFrameBounds(this.currentFrame, this._rectangle);
	}

	/**
	 * Returns a clone of the Sprite instance. Note that the same SpriteSheet is shared between cloned instances.
	 * @return {easeljs.Sprite} a clone of the Sprite instance.
	 */
	clone () {
		return this._cloneProps(new Sprite(this.spriteSheet));
	}

	/**
	 * @param {easeljs.Sprite} o
	 * @return {easeljs.Sprite} o
	 * @protected
	 */
	_cloneProps (o) {
		super._cloneProps(o);
		o.currentFrame = this.currentFrame;
		o.currentAnimation = this.currentAnimation;
		o.paused = this.paused;
		o.currentAnimationFrame = this.currentAnimationFrame;
		o.framerate = this.framerate;

		o._animation = this._animation;
		o._currentFrame = this._currentFrame;
		o._skipAdvance = this._skipAdvance;
		return o;
	}

	_tick (evtObj) {
		if (!this.paused) {
			if (!this._skipAdvance) { this.advance(evtObj&&evtObj.delta); }
			this._skipAdvance = false;
		}
		super._tick(evtObj);
	}

	/**
	 * Normalizes the current frame, advancing animations and dispatching callbacks as appropriate.
	 * @protected
	 * @param {Number} [frameDelta=0]
	 */
	_normalizeFrame (frameDelta = 0) {
		let animation = this._animation;
		let paused = this.paused;
		let frame = this._currentFrame;

		if (animation) {
			let speed = animation.speed || 1;
			let animFrame = this.currentAnimationFrame;
			let l = animation.frames.length;
			if (animFrame + frameDelta * speed >= l) {
				let next = animation.next;
				if (this._dispatchAnimationEnd(animation, frame, paused, next, l - 1)) {
					// something changed in the event stack, so we shouldn't make any more changes here.
					return;
				} else if (next) {
					// sequence. Automatically calls _normalizeFrame again with the remaining frames.
					return this._goto(next, frameDelta - (l - animFrame) / speed);
				} else {
					// end.
					this.paused = true;
					animFrame = animation.frames.length - 1;
				}
			} else {
				animFrame += frameDelta * speed;
			}
			this.currentAnimationFrame = animFrame;
			this._currentFrame = animation.frames[animFrame | 0]
		} else {
			frame = (this._currentFrame += frameDelta);
			let l = this.spriteSheet.getNumFrames();
			if (frame >= l && l > 0) {
				if (!this._dispatchAnimationEnd(animation, frame, paused, l - 1)) {
					// looped.
					if ((this._currentFrame -= l) >= l) { return this._normalizeFrame(); }
				}
			}
		}
		frame = this._currentFrame | 0;
		if (this.currentFrame != frame) {
			this.currentFrame = frame;
			this.dispatchEvent("change");
		}
	};

	/**
	 * Dispatches the "animationend" event. Returns true if a handler changed the animation (ex. calling {@link easlejs.Sprite#stop},
	 * {@link easeljs.Sprite#gotoAndPlay}, etc.)
	 * @param animation
	 * @param frame
	 * @param paused
	 * @param next
	 * @param end
	 * @private
	 */
	_dispatchAnimationEnd (animation, frame, paused, next, end) {
		let name = animation ? animation.name : null;
		if (this.hasEventListener("animationend")) {
			let evt = new _createjs_core__WEBPACK_IMPORTED_MODULE_1__.Event("animationend");
			evt.name = name;
			evt.next = next;
			this.dispatchEvent(evt);
		}
		// did the animation get changed in the event stack?:
		let changed = (this._animation != animation || this._currentFrame != frame);
		// if the animation hasn't changed, but the sprite was paused, then we want to stick to the last frame:
		if (!changed && !paused && this.paused) { this.currentAnimationFrame = end; changed = true; }
		return changed;
	}

	/**
	 * Moves the playhead to the specified frame number or animation.
	 * @param {String | Number} frameOrAnimation The frame number or animation that the playhead should move to.
	 * @param {Number} [frame=0] The frame of the animation to go to. Defaults to 0.
	 * @protected
	 */
	_goto (frameOrAnimation, frame = 0) {
		this.currentAnimationFrame = 0;
		if (isNaN(frameOrAnimation)) {
			let data = this.spriteSheet.getAnimation(frameOrAnimation);
			if (data) {
				this._animation = data;
				this.currentAnimation = frameOrAnimation;
				this._normalizeFrame(frame);
			}
		} else {
			this.currentAnimation = this._animation = null;
			this._currentFrame = frameOrAnimation;
			this._normalizeFrame();
		}
	}

}

/**
 * Dispatched when an animation reaches its ends.
 * @event easeljs.Sprite#animationend
 * @property {Object} target The object that dispatched the event.
 * @property {String} type The event type.
 * @property {String} name The name of the animation that just ended.
 * @property {String} next The name of the next animation that will be played, or null. This will be the same as name if the animation is looping.
 * @since 0.6.0
 */

/**
 * Dispatched any time the current frame changes. For example, this could be due to automatic advancement on a tick,
 * or calling gotoAndPlay() or gotoAndStop().
 * @event easeljs.Sprite#change
 * @property {Object} target The object that dispatched the event.
 * @property {String} type The event type.
 */


/***/ }),

/***/ "./node_modules/@createjs/easeljs/src/display/SpriteSheet.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@createjs/easeljs/src/display/SpriteSheet.js ***!
  \*******************************************************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => /* binding */ SpriteSheet
/* harmony export */ });
/* harmony import */ var _createjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @createjs/core */ "./node_modules/@createjs/core/src/main.js");
/* harmony import */ var _geom_Rectangle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../geom/Rectangle */ "./node_modules/@createjs/easeljs/src/geom/Rectangle.js");
/**
 * @license SpriteSheet
 * Visit http://createjs.com/ for documentation, updates and examples.
 *
 * Copyright (c) 2017 gskinner.com, inc.
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPliED, INCLUDING BUT NOT liMITED TO THE WARRANTIES
 * OF MERCHANTABIliTY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HolDERS BE liABLE FOR ANY CLAIM, DAMAGES OR OTHER liABIliTY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEAliNGS IN THE SOFTWARE.
 */




/**
 * Encapsulates the properties and methods associated with a sprite sheet. A sprite sheet is a series of images (usually
 * animation frames) combined into a larger image (or images). For example, an animation consisting of eight 100x100
 * images could be combined into a single 400x200 sprite sheet (4 frames across by 2 high).
 * <br />
 * The data passed to the SpriteSheet constructor defines:
 * <ol>
 * 	<li> The source image or images to use.</li>
 * 	<li> The positions of individual image frames.</li>
 * 	<li> Sequences of frames that form named animations. Optional.</li>
 * 	<li> The target playback framerate. Optional.</li>
 * </ol>
 *
 * <h3>SpriteSheet Format</h3>
 * SpriteSheets are an object with two required properties (`images` and `frames`), and two optional properties
 * (`framerate` and `animations`). This makes them easy to define in javascript code, or in JSON.
 *
 * <h4>images</h4>
 * An array of source images. Images can be either an HTMlimage
 * instance, or a uri to an image. The former is recommended to control preloading.
 *
 * 	images: [image1, "path/to/image2.png"],
 *
 * <h4>frames</h4>
 * Defines the individual frames. There are two supported formats for frame data:
 * When all of the frames are the same size (in a grid), use an object with `width`, `height`, `regX`, `regY`,
 * and `count` properties.
 *
 * <ul>
 *  <li>`width` & `height` are required and specify the dimensions of the frames</li>
 *  <li>`regX` & `regY` indicate the registration point or "origin" of the frames</li>
 *  <li>`spacing` indicate the spacing between frames</li>
 *  <li>`margin` specify the margin around the image(s)</li>
 *  <li>`count` allows you to specify the total number of frames in the spritesheet; if omitted, this will
 *  be calculated based on the dimensions of the source images and the frames. Frames will be assigned
 *  indexes based on their position in the source images (left to right, top to bottom).</li>
 * </ul>
 *
 *  	frames: {width:64, height:64, count:20, regX: 32, regY:64, spacing:0, margin:0}
 *
 * If the frames are of different sizes, use an array of frame definitions. Each definition is itself an array
 * with 4 required and 3 optional entries, in the order:
 *
 * <ul>
 *  <li>The first four, `x`, `y`, `width`, and `height` are required and define the frame rectangle.</li>
 *  <li>The fifth, `imageIndex`, specifies the index of the source image (defaults to 0)</li>
 *  <li>The last two, `regX` and `regY` specify the registration point of the frame</li>
 * </ul>
 *
 * 	frames: [
 * 		// x, y, width, height, imageIndex*, regX*, regY*
 * 		[64, 0, 96, 64],
 * 		[0, 0, 64, 64, 1, 32, 32]
 * 		// etc.
 * 	]
 *
 * <h4>animations</h4>
 * Optional. An object defining sequences of frames to play as named animations. Each property corresponds to an
 * animation of the same name. Each animation must specify the frames to play, and may
 * also include a relative playback `speed` (ex. 2 would playback at double speed, 0.5 at half), and
 * the name of the `next` animation to sequence to after it completes.
 *
 * There are three formats supported for defining the frames in an animation, which can be mixed and matched as appropriate:
 * <ol>
 * 	<li>for a single frame animation, you can simply specify the frame index
 *
 * 		animations: {
 * 			sit: 7
 * 		}
 *
 * </li>
 * <li>
 *      for an animation of consecutive frames, you can use an array with two required, and two optional entries
 * 		in the order: `start`, `end`, `next`, and `speed`. This will play the frames from start to end inclusive.
 *
 * 		animations: {
 * 			// start, end, next*, speed*
 * 			run: [0, 8],
 * 			jump: [9, 12, "run", 2]
 * 		}
 *
 *  </li>
 *  <li>
 *     for non-consecutive frames, you can use an object with a `frames` property defining an array of frame
 *     indexes to play in order. The object can also specify `next` and `speed` properties.
 *
 * 		animations: {
 * 			walk: {
 * 				frames: [1,2,3,3,2,1]
 * 			},
 * 			shoot: {
 * 				frames: [1,4,5,6],
 * 				next: "walk",
 * 				speed: 0.5
 * 			}
 * 		}
 *
 *  </li>
 * </ol>
 * <strong>Note:</strong> the `speed` property was added in EaselJS 0.7.0. Earlier versions had a `frequency`
 * property instead, which was the inverse of `speed`. For example, a value of "4" would be 1/4 normal speed in
 * earlier versions, but is 4x normal speed in EaselJS 0.7.0+.
 *
 * <h4>framerate</h4>
 * Optional. Indicates the default framerate to play this spritesheet at in frames per second. See
 * {{#crossLink "SpriteSheet/framerate:property"}}{{/crossLink}} for more information.
 *
 * 		framerate: 20
 *
 * Note that the Sprite framerate will only work if the stage update method is provided with the {{#crossLink "Ticker/tick:event"}}{{/crossLink}}
 * event generated by the {{#crossLink "Ticker"}}{{/crossLink}}.
 *
 * 		createjs.Ticker.on("tick", handleTick);
 * 		function handleTick(event) {
 *			stage.update(event);
 *		}
 *
 * <h3>Example</h3>
 * To define a simple sprite sheet, with a single image "sprites.jpg" arranged in a regular 50x50 grid with three
 * animations: "stand" showing the first frame, "run" looping frame 1-5 inclusive, and "jump" playing frame 6-8 and
 * sequencing back to run.
 *
 * 		var data = {
 * 			images: ["sprites.jpg"],
 * 			frames: {width:50, height:50},
 * 			animations: {
 * 				stand:0,
 * 				run:[1,5],
 * 				jump:[6,8,"run"]
 * 			}
 * 		};
 * 		var spriteSheet = new createjs.SpriteSheet(data);
 * 		var animation = new createjs.Sprite(spriteSheet, "run");
 *
 * <h3>Generating SpriteSheet Images</h3>
 * Spritesheets can be created manually by combining images in PhotoShop, and specifying the frame size or
 * coordinates manually, however there are a number of tools that facilitate this.
 * <ul>
 *     <li>Exporting SpriteSheets or HTML5 content from Adobe Flash/Animate supports the EaselJS SpriteSheet format.</li>
 *     <li>The popular <a href="https://www.codeandweb.com/texturepacker/easeljs" target="_blank">Texture Packer</a> has
 *     EaselJS support.
 *     <li>SWF animations in Adobe Flash/Animate can be exported to SpriteSheets using <a href="http://createjs.com/zoe" target="_blank"></a></li>
 * </ul>
 *
 * <h3>Cross Origin Issues</h3>
 * <strong>Warning:</strong> Images loaded cross-origin will throw cross-origin security errors when interacted with
 * using:
 * <ul>
 *     <li>a mouse</li>
 *     <li>methods such as {{#crossLink "Container/getObjectUnderPoint"}}{{/crossLink}}</li>
 *     <li>Filters (see {{#crossLink "Filter"}}{{/crossLink}})</li>
 *     <li>caching (see {{#crossLink "DisplayObject/cache"}}{{/crossLink}})</li>
 * </ul>
 * You can get around this by setting `crossOrigin` property on your images before passing them to EaselJS, or
 * setting the `crossOrigin` property on PreloadJS' LoadQueue or LoadItems.
 *
 * 		var image = new Image();
 * 		img.crossOrigin="Anonymous";
 * 		img.src = "http://server-with-CORS-support.com/path/to/image.jpg";
 *
 * If you pass string paths to SpriteSheets, they will not work cross-origin. The server that stores the image must
 * support cross-origin requests, or this will not work. For more information, check out
 * <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS" target="_blank">CORS overview on MDN</a>.
 *
 * @memberof easeljs
 * @extends core.EventDispatcher
 * @param {Object} data An object describing the SpriteSheet data.
 */
class SpriteSheet extends _createjs_core__WEBPACK_IMPORTED_MODULE_0__.EventDispatcher {

	constructor (data) {
		super();

		/**
		 * Indicates whether all images are finished loading.
		 * @type {Boolean}
		 * @readonly
		 */
		this.complete = true;

		/**
		 * Specifies the framerate to use by default for Sprite instances using the SpriteSheet. See the Sprite class
		 * {@link easeljs.Sprite#framerate} for more information.
		 * @type Number
		 */
		this.framerate = 0;

		/**
		 * @protected
		 * @type {Array}
		 */
		this._animations = null;

		/**
		 * @protected
		 * @type {Array}
		 */
		this._frames = null;

		/**
		 * @protected
		 * @type {Array}
		 */
		this._images = null;

		/**
		 * @protected
		 * @type {Object}
		 */
		this._data = null;

		/**
		 * @protected
		 * @type {Number}
		 */
		this._loadCount = 0;

		// only used for simple frame defs:
		/**
		 * @protected
		 * @type {Number}
		 */
		this._frameHeight = 0;

		/**
		 * @protected
		 * @type {Number}
		 */
		this._frameWidth = 0;

		/**
		 * @protected
		 * @type {Number}
		 */
		this._numFrames = 0;

		/**
		 * @protected
		 * @type {Number}
		 */
		this._regX = 0;

		/**
		 * @protected
		 * @type {Number}
		 */
		this._regY = 0;

		/**
		 * @protected
		 * @type {Number}
		 */
		this._spacing = 0;

		/**
		 * @protected
		 * @type {Number}
		 */
		this._margin = 0;

		this._parseData(data);
	}

	/**
	 * Returns an array of all available animation names available on this sprite sheet as strings.
	 * @type {Array}
	 * @readonly
	 */
	get animations () {
		return this._animations.slice();
	}

	/**
	 * Returns the total number of frames in the specified animation, or in the whole sprite
	 * sheet if the animation param is omitted. Returns 0 if the spritesheet relies on calculated frame counts, and
	 * the images have not been fully loaded.
	 * @param {String} animation The name of the animation to get a frame count for.
	 * @return {Number} The number of frames in the animation, or in the entire sprite sheet if the animation param is omitted.
	 */
	getNumFrames (animation) {
		if (animation == null) {
			return this._frames ? this._frames.length : this._numFrames || 0;
		} else {
			let data = this._data[animation];
			if (data == null) { return 0; }
			else { return data.frames.length; }
		}
	}

	/**
	 * Returns an object defining the specified animation. The returned object contains:
	 * <ul>
	 * 	<li>frames: an array of the frame ids in the animation</li>
	 * 	<li>speed: the playback speed for this animation</li>
	 * 	<li>name: the name of the animation</li>
	 * 	<li>next: the default animation to play next. If the animation loops, the name and next property will be the same.</li>
	 * </ul>
	 * @param {String} name The name of the animation to get.
	 * @return {Object} a generic object with frames, speed, name, and next properties.
	 */
	getAnimation (name) {
		return this._data[name];
	}

	/**
	 * Returns an object specifying the image and source rect of the specified frame. The returned object has:
	 * <ul>
	 * 	<li>an image property holding a reference to the image object in which the frame is found</li>
	 * 	<li>a rect property containing a Rectangle instance which defines the boundaries for the frame within that image.</li>
	 * 	<li> A regX and regY property corresponding to the regX/Y values for the frame.
	 * </ul>
	 * @param {Number} frameIndex The index of the frame.
	 * @return {Object} a generic object with image and rect properties. Returns null if the frame does not exist.
	 */
	getFrame (frameIndex) {
		let frame;
		if (this._frames && (frame = this._frames[frameIndex])) { return frame; }
		return null;
	}

	/**
	 * Returns a {@link easeljs.Rectangle} instance defining the bounds of the specified frame relative
	 * to the origin.
	 *
	 * @param {Number} frameIndex The index of the frame.
	 * @param {easeljs.Rectangle} [rectangle] A Rectangle instance to copy the values into. By default a new instance is created.
	 * @return {easeljs.Rectangle} A Rectangle instance. Returns null if the frame does not exist, or the image is not fully loaded.
	 */
	getFrameBounds (frameIndex, rectangle = new _geom_Rectangle__WEBPACK_IMPORTED_MODULE_1__.default()) {
		let frame = this.getFrame(frameIndex);
		return frame ? rectangle.setValues(-frame.regX, -frame.regY, frame.rect.width, frame.rect.height) : null;
	}

	/**
	 * Returns a string representation of this object.
	 * @return {String} a string representation of the instance.
	 */
	toString () {
		return `[${this.constructor.name}]`;
	}

	/**
	 * SpriteSheet cannot be cloned. A SpriteSheet can be shared by multiple Sprite instances without cloning it.
	 * @override
	 * @throws SpriteSheet cannot be cloned.
	 */
	clone () {
		throw "SpriteSheet cannot be cloned.";
	}

	/**
	 * @param {Object} data An object describing the SpriteSheet data.
	 * @protected
	 */
	_parseData (data) {
		if (data == null) { return; }
		this.framerate = data.framerate||0;

		// parse images:
		if (data.images) {
			for (let img of data.images) {
				let a = this._images = [];
				let src;
				if (typeof img === "string") {
					src = img;
					img = document.createElement("img");
					img.src = src;
				}
				a.push(img);
				if (!img.getContext && !img.naturalWidth) {
					this._loadCount++;
					this.complete = false;
					img.onload = () => this._handleImageLoad(src);
					img.onerror = () => this._handleImageError(src);
				}
			}
		}

		// parse frames:
		if (data.frames != null) {
			if (Array.isArray(data.frames)) {
				this._frames = [];
				for (let arr of data.frames) {
					this._frames.push({image:this._images[arr[4]?arr[4]:0], rect:new _geom_Rectangle__WEBPACK_IMPORTED_MODULE_1__.default(arr[0],arr[1],arr[2],arr[3]), regX:arr[5]||0, regY:arr[6]||0 });
				}
			} else {
				let o = data.frames;
				this._frameWidth = o.width;
				this._frameHeight = o.height;
				this._regX = o.regX||0;
				this._regY = o.regY||0;
				this._spacing = o.spacing||0;
				this._margin = o.margin||0;
				this._numFrames = o.count;
				if (this._loadCount === 0) { this._calculateFrames(); }
			}
		}

		// parse animations:
		this._animations = [];
		if (data.animations != null) {
			this._data = {};
			let o = data.animations;
			for (let name in o) {
				let anim = { name };
				let obj = o[name];
				let a;
				if (typeof obj === "number") { // single frame
					a = anim.frames = [obj];
				} else if (Array.isArray(obj)) { // simple
					if (obj.length === 1) { anim.frames = [obj[0]]; }
					else {
						anim.speed = obj[3];
						anim.next = obj[2];
						a = anim.frames = [];
						for (let i=obj[0];i<=obj[1];i++) {
							a.push(i);
						}
					}
				} else { // complex
					anim.speed = obj.speed;
					anim.next = obj.next;
					let frames = obj.frames;
					a = anim.frames = (typeof frames === "number") ? [frames] : frames.slice(0);
				}
				if (anim.next === true || anim.next === undefined) { anim.next = name; } // loop
				if (anim.next === false || (a.length < 2 && anim.next === name)) { anim.next = null; } // stop
				if (!anim.speed) { anim.speed = 1; }
				this._animations.push(name);
				this._data[name] = anim;
			}
		}
	}

	/**
	 * @emits easeljs.SpriteSheet#event:complete
	 * @protected
	 * @param {Object} src
	 */
	 _handleImageLoad (src) {
		if (--this._loadCount === 0) {
			this._calculateFrames();
			this.complete = true;
			this.dispatchEvent("complete");
		}
	}

	/**
	 * @emits easeljs.SpriteSheet#event:complete
	 * @emits easeljs.SpriteSheet#event:error
	 * @protected
	 * @param {Object} src
	 */
	_handleImageError (src) {
		let errorEvent = new _createjs_core__WEBPACK_IMPORTED_MODULE_0__.Event("error");
		errorEvent.src = src;
		this.dispatchEvent(errorEvent);

		// Complete is still dispatched.
		if (--this._loadCount === 0) {
			this.dispatchEvent("complete");
		}
	}

	/**
	 * @protected
	 */
	_calculateFrames () {
		if (this._frames || this._frameWidth === 0) { return; }

		this._frames = [];

		let maxFrames = this._numFrames || 100000; // if we go over this, something is wrong.
		let frameCount = 0, frameWidth = this._frameWidth, frameHeight = this._frameHeight;
		let spacing = this._spacing, margin = this._margin;

		imgLoop:
		for (let i=0, imgs=this._images, l=imgs.length; i<l; i++) {
			let img = imgs[i],
				imgW = (img.width||img.naturalWidth),
				imgH = (img.height||img.naturalHeight);

			let y = margin;
			while (y <= imgH-margin-frameHeight) {
				let x = margin;
				while (x <= imgW-margin-frameWidth) {
					if (frameCount >= maxFrames) { break imgLoop; }
					frameCount++;
					this._frames.push({
						image: img,
						rect: new _geom_Rectangle__WEBPACK_IMPORTED_MODULE_1__.default(x, y, frameWidth, frameHeight),
						regX: this._regX,
						regY: this._regY
					});
					x += frameWidth+spacing;
				}
				y += frameHeight+spacing;
			}
		}
		this._numFrames = frameCount;
	}

}

/**
 * Dispatched when all images are loaded.  Note that this only fires if the images
 * were not fully loaded when the sprite sheet was initialized. You should check the complete property
 * to prior to adding a listener. Ex.
 *
 * 	var sheet = new createjs.SpriteSheet(data);
 * 	if (!sheet.complete) {
 * 		// not preloaded, listen for the complete event:
 * 		sheet.addEventListener("complete", handler);
 * 	}
 *
 * @event easeljs.SpriteSheet#complete
 * @property {Object} target The object that dispatched the event.
 * @property {String} type The event type.
 * @since 0.6.0
 */

/**
 * Dispatched when getFrame is called with a valid frame index. This is primarily intended for use by {@link easeljs.SpriteSheetBuilder}
 * when doing on-demand rendering.
 * @event easeljs.SpriteSheet#getframe
 * @property {Number} index The frame index.
 * @property {Object} frame The frame object that getFrame will return.
 */

/**
 * Dispatched when an image encounters an error. A SpriteSheet will dispatch an error event for each image that
 * encounters an error, and will still dispatch a {@link easeljs.SpriteSheet#event:complete}
 * event once all images are finished processing, even if an error is encountered.
 * @event easeljs.SpriteSheet#error
 * @property {String} src The source of the image that failed to load.
 * @since 0.8.2
 */


/***/ }),

/***/ "./node_modules/@createjs/easeljs/src/display/Stage.js":
/*!*************************************************************!*\
  !*** ./node_modules/@createjs/easeljs/src/display/Stage.js ***!
  \*************************************************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => /* binding */ Stage
/* harmony export */ });
/* harmony import */ var _Container__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Container */ "./node_modules/@createjs/easeljs/src/display/Container.js");
/* harmony import */ var _DisplayObject__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./DisplayObject */ "./node_modules/@createjs/easeljs/src/display/DisplayObject.js");
/* harmony import */ var _createjs_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @createjs/core */ "./node_modules/@createjs/core/src/main.js");
/* harmony import */ var _events_MouseEvent__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../events/MouseEvent */ "./node_modules/@createjs/easeljs/src/events/MouseEvent.js");
/**
 * @license Stage
 * Visit http://createjs.com/ for documentation, updates and examples.
 *
 * Copyright (c) 2017 gskinner.com, inc.
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */






/**
 * A stage is the root level {@link easeljs.Container} for a display list. Each time its {@link easeljs.Stage#tick}
 * method is called, it will render its display list to its target canvas.
 *
 * @memberof easeljs
 * @extends easeljs.Container
 * @example
 * let stage = new Stage("canvasElementId");
 * let image = new Bitmap("imagePath.png");
 * stage.addChild(image);
 * Ticker.addEventListener("tick", event => {
 *   image.x += 10;
 * 	 stage.update();
 * });
 *
 * @param {HTMLCanvasElement | String | Object} canvas A canvas object that the Stage will render to, or the string id
 * of a canvas object in the current document.
 */
class Stage extends _Container__WEBPACK_IMPORTED_MODULE_0__.default {

	constructor (canvas) {
		super();

		/**
		 * Indicates whether the stage should automatically clear the canvas before each render. You can set this to `false`
		 * to manually control clearing (for generative art, or when pointing multiple stages at the same canvas for
		 * example).
		 *
		 * @example
		 * let stage = new Stage("canvasId");
		 * stage.autoClear = false;
		 *
		 * @type {Boolean}
		 * @default true
		 */
		this.autoClear = true;

		/**
		 * The canvas the stage will render to. Multiple stages can share a single canvas, but you must disable autoClear for all but the
		 * first stage that will be ticked (or they will clear each other's render).
		 *
		 * When changing the canvas property you must disable the events on the old canvas, and enable events on the
		 * new canvas or mouse events will not work as expected.
		 *
		 * @example
		 * stage.enableDOMEvents(false);
		 * stage.canvas = anotherCanvas;
		 * stage.enableDOMEvents(true);
		 *
		 * @type {HTMLCanvasElement | Object}
		 */
		this.canvas = (typeof canvas === "string") ? document.getElementById(canvas) : canvas;

		/**
		 * The current mouse X position on the canvas. If the mouse leaves the canvas, this will indicate the most recent
		 * position over the canvas, and mouseInBounds will be set to false.
		 * @type {Number}
		 * @default 0
		 * @readonly
		 */
		this.mouseX = 0;

		/**
		 * The current mouse Y position on the canvas. If the mouse leaves the canvas, this will indicate the most recent
		 * position over the canvas, and mouseInBounds will be set to false.
		 * @type {Number}
		 * @default 0
		 * @readonly
		 */
		this.mouseY = 0;

		/**
		 * Specifies the area of the stage to affect when calling update. This can be use to selectively
		 * re-draw specific regions of the canvas. If null, the whole canvas area is drawn.
		 * @type {easeljs.Rectangle}
		 */
		this.drawRect = null;

		/**
		 * Indicates whether display objects should be rendered on whole pixels. You can set the {@link easeljs.DisplayObject.snapToPixelEnabled}
		 * property of display objects to false to enable/disable this behaviour on a per instance basis.
		 * @type {Boolean}
		 * @default false
		 */
		this.snapToPixelEnabled = false;

		/**
		 * Indicates whether the mouse is currently within the bounds of the canvas.
		 * @type {Boolean}
		 * @default false
		 */
		this.mouseInBounds = false;

		/**
		 * If true, tick callbacks will be called on all display objects on the stage prior to rendering to the canvas.
		 * @type {Boolean}
		 * @default true
		 */
		this.tickOnUpdate = true;

		/**
		 * If true, mouse move events will continue to be called when the mouse leaves the target canvas.
		 * See {@link easeljs.Stage#mouseInBounds}, and {@link easeljs.MouseEvent} x/y/rawX/rawY.
		 * @type {Boolean}
		 * @default false
		 */
		this.mouseMoveOutside = false;


		/**
		 * Prevents selection of other elements in the html page if the user clicks and drags, or double clicks on the canvas.
		 * This works by calling `preventDefault()` on any mousedown events (or touch equivalent) originating on the canvas.
		 * @type {Boolean}
		 * @default true
		 */
		this.preventSelection = true;

		/**
		 * The hitArea property is not supported for Stage.
		 * @property hitArea
		 * @override
		 * @default null
		 * @private
		 */

		/**
		 * Holds objects with data for each active pointer id. Each object has the following properties:
		 * x, y, event, target, overTarget, overX, overY, inBounds, posEvtObj (native event that last updated position)
		 * @type {Object}
		 * @private
		 */
		this._pointerData = {};

		/**
		 * Number of active pointers.
		 * @type {Number}
		 * @private
		 */
		this._pointerCount = 0;

		/**
		 * The ID of the primary pointer.
		 * @type {String}
		 * @private
		 */
		this._primaryPointerID = null;

		/**
		 * @protected
		 * @type {Number}
		 */
		this._mouseOverIntervalID = null;

		/**
		 * @protected
		 * @type {easeljs.Stage}
		 */
		this._nextStage = null;

		/**
		 * @protected
		 * @type {easeljs.Stage}
		 */
		this._prevStage = null;

		this.enableDOMEvents(true);
	}

	/**
	 * Specifies a target stage that will have mouse/touch interactions relayed to it after this stage handles them.
	 * This can be useful in cases where you have multiple layered canvases and want user interactions
	 * events to pass through.
	 *
	 * MouseOver, MouseOut, RollOver, and RollOut interactions are also passed through using the mouse over settings
	 * of the top-most stage, but are only processed if the target stage has mouse over interactions enabled.
	 * Considerations when using roll over in relay targets:
	 * <ol>
	 *   <li> The top-most (first) stage must have mouse over interactions enabled (via enableMouseOver)</li>
	 *   <li> All stages that wish to participate in mouse over interaction must enable them via enableMouseOver</li>
	 *   <li> All relay targets will share the frequency value of the top-most stage</li>
	 * </ol>
	 *
	 * @example <caption>Relay mouse events from topStage to bottomStage</caption>
	 * topStage.nextStage = bottomStage;
	 *
	 * @example <caption>Disable DOM events</caption>
	 * stage.enableDOMEvents(false);
	 *
	 * @type {easeljs.Stage}
	 */
	get nextStage () { return this._nextStage; }
	set nextStage (stage) {
		if (this._nextStage) { this._nextStage._prevStage = null; }
		if (stage) { stage._prevStage = this; }
		this._nextStage = stage;
	}

// public methods:
	/**
	 * Each time the update method is called, the stage will call {@link easeljs.Stage#tick}
	 * unless {@link easeljs.Stage#tickOnupdate} is set to false,
	 * and then render the display list to the canvas.
	 *
	 * @param {Object} [props] Props object to pass to `tick()`. Should usually be a {@link core.Ticker} event object, or similar object with a delta property.
	 */
	update (props) {
		if (!this.canvas) { return; }
		if (this.tickOnUpdate) { this.tick(props); }
		if (this.dispatchEvent("drawstart", false, true) === false) { return; }
		_DisplayObject__WEBPACK_IMPORTED_MODULE_1__.default._snapToPixelEnabled = this.snapToPixelEnabled;
		let r = this.drawRect, ctx = this.canvas.getContext("2d");
		ctx.setTransform(1, 0, 0, 1, 0, 0);
		if (this.autoClear) {
			if (r) { ctx.clearRect(r.x, r.y, r.width, r.height); }
			else { ctx.clearRect(0, 0, this.canvas.width+1, this.canvas.height+1); }
		}
		ctx.save();
		if (this.drawRect) {
			ctx.beginPath();
			ctx.rect(r.x, r.y, r.width, r.height);
			ctx.clip();
		}
		this.updateContext(ctx);
		this.draw(ctx, false);
		ctx.restore();
		this.dispatchEvent("drawend");
	}

	/**
	 * Propagates a tick event through the display list. This is automatically called by {@link easeljs.Stage#update}
	 * unless {@link easeljs.Stage#tickOnUpdate} is set to false.
	 *
	 * If a props object is passed to `tick()`, then all of its properties will be copied to the event object that is
	 * propagated to listeners.
	 *
	 * Some time-based features in EaselJS (for example {@link easeljs.Sprite#framerate} require that
	 * a {@link core.Ticker#event:tick} event object (or equivalent object with a delta property) be
	 * passed as the `props` parameter to `tick()`.
	 *
	 * @example
	 * Ticker.on("tick", (evt) => {
	 *   // clone the event object from Ticker, and add some custom data to it:
	 * 	 let data = evt.clone().set({ greeting: "hello", name: "world" });
	 * 	 // pass it to stage.update():
	 * 	 stage.update(data); // subsequently calls tick() with the same param
	 * });
	 *
	 * shape.on("tick", (evt) => {
	 *   console.log(evt.delta); // the delta property from the Ticker tick event object
	 * 	 console.log(evt.greeting, evt.name); // custom data: "hello world"
	 * });
	 *
	 * @emits easeljs.Stage#event:tickstart
	 * @emits easeljs.Stage#event:tickend
	 * @param {Object} [props] An object with properties that should be copied to the event object. Should usually be a Ticker event object, or similar object with a delta property.
	 */
	tick (props) {
		if (!this.tickEnabled || this.dispatchEvent("tickstart", false, true) === false) { return; }
		let evtObj = new _createjs_core__WEBPACK_IMPORTED_MODULE_2__.Event("tick");
		if (props) {
			for (let n in props) {
				if (props.hasOwnProperty(n)) { evtObj[n] = props[n]; }
			}
		}
		this._tick(evtObj);
		this.dispatchEvent("tickend");
	}

	/**
	 * Default event handler that calls the Stage {@link easeljs.Stage#update} method when a {@link easeljs.DisplayObject#event:tick}
	 * event is received. This allows you to register a Stage instance as a event listener on {@link core.Ticker} directly.
	 * Note that if you subscribe to ticks using this pattern, then the tick event object will be passed through to
	 * display object tick handlers, instead of `delta` and `paused` parameters.
	 */
	handleEvent (evt) {
		if (evt.type === "tick") { this.update(evt); }
	}

	/**
	 * Clears the target canvas. Useful if {@link easeljs.State#autoClear} is set to `false`.
	 */
	clear () {
		if (!this.canvas) { return; }
		let ctx = this.canvas.getContext("2d");
		ctx.setTransform(1, 0, 0, 1, 0, 0);
		ctx.clearRect(0, 0, this.canvas.width+1, this.canvas.height+1);
	}

	/**
	 * Returns a data url that contains a Base64-encoded image of the contents of the stage. The returned data url can
	 * be specified as the src value of an image element.
	 *
	 * @param {String} [backgroundColor] The background color to be used for the generated image. Any valid CSS color
	 * value is allowed. The default value is a transparent background.
	 * @param {String} [mimeType="image/png"] The MIME type of the image format to be create. If an unknown MIME type
	 * is passed in, or if the browser does not support the specified MIME type, the default value will be used.
	 * @return {String} a Base64 encoded image.
	 */
	toDataURL (backgroundColor, mimeType = "image/png") {
		let data, ctx = this.canvas.getContext('2d'), w = this.canvas.width, h = this.canvas.height;

		if (backgroundColor) {
			data = ctx.getImageData(0, 0, w, h);
			var compositeOperation = ctx.globalCompositeOperation;
			ctx.globalCompositeOperation = "destination-over";

			ctx.fillStyle = backgroundColor;
			ctx.fillRect(0, 0, w, h);
		}

		let dataURL = this.canvas.toDataURL(mimeType);

		if (backgroundColor) {
			ctx.putImageData(data, 0, 0);
			ctx.globalCompositeOperation = compositeOperation;
		}

		return dataURL;
	}

	/**
	 * Enables or disables (by passing a frequency of 0) mouse over {@link easeljs.DisplayObject#event:mouseover}
	 * and {@link easeljs.DisplayObject#event:mouseout} and roll over events {@link easeljs.DisplayObject#event:rollover}
	 * and {@link easeljs.DisplayObject#event:rollout} for this stage's display list. These events can
	 * be expensive to generate, so they are disabled by default. The frequency of the events can be controlled
	 * independently of mouse move events via the optional `frequency` parameter.
	 *
	 * @example
	 * const stage = new Stage("canvasId");
	 * stage.enableMouseOver(10); // 10 updates per second
	 *
	 * @param {Number} [frequency=20] Optional param specifying the maximum number of times per second to broadcast
	 * mouse over/out events. Set to 0 to disable mouse over events completely. Maximum is 50. A lower frequency is less
	 * responsive, but uses less CPU.
	 */
	enableMouseOver (frequency = 20) {
		if (this._mouseOverIntervalID) {
			clearInterval(this._mouseOverIntervalID);
			this._mouseOverIntervalID = null;
			if (frequency === 0) {
				this._testMouseOver(true);
			}
		}
		if (frequency <= 0) { return; }
		this._mouseOverIntervalID = setInterval(() => this._testMouseOver(), 1000/Math.min(50,frequency));
	}

	/**
	 * Enables or disables the event listeners that stage adds to DOM elements (window, document and canvas). It is good
	 * practice to disable events when disposing of a Stage instance, otherwise the stage will continue to receive
	 * events from the page.
	 * When changing the canvas property you must disable the events on the old canvas, and enable events on the
	 * new canvas or mouse events will not work as expected.
	 *
	 * @example
	 * stage.enableDOMEvents(false);
	 * stage.canvas = anotherCanvas;
	 * stage.enableDOMEvents(true);
	 *
	 * @param {Boolean} [enable=true] Indicates whether to enable or disable the events.
	 */
	enableDOMEvents (enable = true) {
		let ls = this._eventListeners;
		if (!enable && ls) {
			for (let n in ls) {
				let o = ls[n];
				o.t.removeEventListener(n, o.f, false);
			}
			this._eventListeners = null;
		} else if (enable && !ls && this.canvas) {
			let t = window.addEventListener ? window : document;
			ls = this._eventListeners = {
				mouseup: {t, f:e => this._handleMouseUp(e) },
				mousemove: {t, f:e => this._handleMouseMove(e) },
				dblclick: {t:this.canvas, f:e => this._handleDoubleClick(e) },
				mousedown: {t:this.canvas, f:e => this._handleMouseDown(e) }
			};
			for (let n in ls) {
				let o = ls[n];
				o.t.addEventListener && o.t.addEventListener(n, o.f, false);
			}
		}
	}

	/**
	 * Stage instances cannot be cloned.
	 * @throws Stage cannot be cloned
	 * @override
	 */
	clone () {
		throw "Stage cannot be cloned.";
	}

	/**
	 * @protected
	 * @param {HTMLElement} e
	 * @returns {Object}
	 */
	_getElementRect (e) {
		let bounds;
		try { bounds = e.getBoundingClientRect(); } // this can fail on disconnected DOM elements in IE9
		catch (err) { bounds = {top:e.offsetTop, left:e.offsetLeft, width:e.offsetWidth, height:e.offsetHeight}; }

		let offX = (window.pageXOffset || document.scrollLeft || 0) - (document.clientLeft || document.body.clientLeft || 0);
		let offY = (window.pageYOffset || document.scrollTop || 0) - (document.clientTop  || document.body.clientTop  || 0);

		let styles = window.getComputedStyle ? getComputedStyle(e, null) : e.currentStyle; // IE <9 compatibility.
		let padL = parseInt(styles.paddingLeft)+parseInt(styles.borderLeftWidth);
		let padT = parseInt(styles.paddingTop)+parseInt(styles.borderTopWidth);
		let padR = parseInt(styles.paddingRight)+parseInt(styles.borderRightWidth);
		let padB = parseInt(styles.paddingBottom)+parseInt(styles.borderBottomWidth);

		// note: in some browsers bounds properties are read only.
		return {
			left: bounds.left+offX+padL,
			right: bounds.right+offX-padR,
			top: bounds.top+offY+padT,
			bottom: bounds.bottom+offY-padB
		};
	}

	/**
	 * @protected
	 * @param {Number} id
	 * @returns {Object}
	 */
	_getPointerData (id) {
		let data = this._pointerData[id];
		if (!data) { data = this._pointerData[id] = {x:0, y:0}; }
		return data;
	}

	/**
	 * @protected
	 * @param {easeljs.MouseEvent} [e=window.event]
	 */
	_handleMouseMove (e = window.event) {
		this._handlePointerMove(-1, e, e.pageX, e.pageY);
	}

	/**
	 * @emits {@link easeljs.DisplayObject#event:mouseleave}
	 * @emits {@link easeljs.DisplayObject#event:mouseenter}
	 * @emits {@link easeljs.DisplayObject#event:pressmove}
	 * @emits {@link easeljs.Stage#event:stagemousemove}
	 * @protected
	 * @param {Number} id
	 * @param {easeljs.MouseEvent | Event} e
	 * @param {Number} pageX
	 * @param {Number} pageY
	 * @param {easeljs.Stage} owner Indicates that the event has already been captured & handled by the indicated stage.
	 */
	_handlePointerMove (id, e, pageX, pageY, owner) {
		if (this._prevStage && owner === undefined) { return; } // redundant listener.
		if (!this.canvas) { return; }
		let nextStage=this._nextStage, o=this._getPointerData(id);

		let inBounds = o.inBounds;
		this._updatePointerPosition(id, e, pageX, pageY);
		if (inBounds || o.inBounds || this.mouseMoveOutside) {
			if (id === -1 && o.inBounds === !inBounds) {
				this._dispatchMouseEvent(this, (inBounds ? "mouseleave" : "mouseenter"), false, id, o, e);
			}

			this._dispatchMouseEvent(this, "stagemousemove", false, id, o, e);
			this._dispatchMouseEvent(o.target, "pressmove", true, id, o, e);
		}

		nextStage&&nextStage._handlePointerMove(id, e, pageX, pageY, null);
	}

	/**
	 * @protected
	 * @param {Number} id
	 * @param {easeljs.MouseEvent | Event} e
	 * @param {Number} pageX
	 * @param {Number} pageY
	 */
	_updatePointerPosition (id, e, pageX, pageY) {
		let rect = this._getElementRect(this.canvas);
		pageX -= rect.left;
		pageY -= rect.top;

		let w = this.canvas.width;
		let h = this.canvas.height;
		pageX /= (rect.right-rect.left)/w;
		pageY /= (rect.bottom-rect.top)/h;
		let o = this._getPointerData(id);
		if (o.inBounds = (pageX >= 0 && pageY >= 0 && pageX <= w-1 && pageY <= h-1)) {
			o.x = pageX;
			o.y = pageY;
		} else if (this.mouseMoveOutside) {
			o.x = pageX < 0 ? 0 : (pageX > w-1 ? w-1 : pageX);
			o.y = pageY < 0 ? 0 : (pageY > h-1 ? h-1 : pageY);
		}

		o.posEvtObj = e;
		o.rawX = pageX;
		o.rawY = pageY;

		if (id === this._primaryPointerID || id === -1) {
			this.mouseX = o.x;
			this.mouseY = o.y;
			this.mouseInBounds = o.inBounds;
		}
	}

	/**
	 * @protected
	 * @param {easeljs.MouseEvent} e
	 */
	_handleMouseUp (e) {
		this._handlePointerUp(-1, e, false);
	}

	/**
	 * @emits {@link easeljs.Stage#event:stagemouseup}
	 * @emits {@link easeljs.DisplayObject#event:click}
	 * @emits {@link easeljs.DisplayObject#event:pressup}
	 * @protected
	 * @param {Number} id
	 * @param {easeljs.MouseEvent | Event} e
	 * @param {Boolean} clear
	 * @param {easeljs.Stage} owner Indicates that the event has already been captured & handled by the indicated stage.
	 */
	_handlePointerUp (id, e, clear, owner) {
		let nextStage = this._nextStage, o = this._getPointerData(id);
		if (this._prevStage && owner === undefined) { return; } // redundant listener.

		let target=null, oTarget = o.target;
		if (!owner && (oTarget || nextStage)) { target = this._getObjectsUnderPoint(o.x, o.y, null, true); }

		if (o.down) { this._dispatchMouseEvent(this, "stagemouseup", false, id, o, e, target); o.down = false; }

		if (target === oTarget) { this._dispatchMouseEvent(oTarget, "click", true, id, o, e); }
		this._dispatchMouseEvent(oTarget, "pressup", true, id, o, e);

		if (clear) {
			if (id==this._primaryPointerID) { this._primaryPointerID = null; }
			delete(this._pointerData[id]);
		} else { o.target = null; }

		nextStage&&nextStage._handlePointerUp(id, e, clear, owner || target && this);
	}

	/**
	 * @protected
	 * @param {easeljs.MouseEvent} e
	 */
	_handleMouseDown (e) {
		this._handlePointerDown(-1, e, e.pageX, e.pageY);
	}

	/**
	 * @emits {@link easeljs.Stage#event:stagemousedown}
	 * @emits {@link easeljs.DisplayObject#event:mousedown}
	 * @protected
	 * @param {Number} id
	 * @param {easeljs.MouseEvent | Event} e
	 * @param {Number} pageX
	 * @param {Number} pageY
	 * @param {easeljs.Stage} owner Indicates that the event has already been captured & handled by the indicated stage.
	 */
	_handlePointerDown (id, e, pageX, pageY, owner) {
		if (this.preventSelection) { e.preventDefault(); }
		if (this._primaryPointerID == null || id === -1) { this._primaryPointerID = id; } // mouse always takes over.

		if (pageY != null) { this._updatePointerPosition(id, e, pageX, pageY); }
		let target = null, nextStage = this._nextStage, o = this._getPointerData(id);
		if (!owner) { target = o.target = this._getObjectsUnderPoint(o.x, o.y, null, true); }

		if (o.inBounds) { this._dispatchMouseEvent(this, "stagemousedown", false, id, o, e, target); o.down = true; }
		this._dispatchMouseEvent(target, "mousedown", true, id, o, e);

		nextStage&&nextStage._handlePointerDown(id, e, pageX, pageY, owner || target && this);
	}

	/**
	 * @emits {@link easeljs.DisplayObject#event:mouseout}
	 * @emits {@link easeljs.DisplayObject#event:rollout}
	 * @emits {@link easeljs.DisplayObject#event:rollover}
	 * @emits {@link easeljs.DisplayObject#event:mouseover}
	 * @param {Boolean} clear If true, clears the mouseover / rollover (ie. no target)
	 * @param {easeljs.Stage} owner Indicates that the event has already been captured & handled by the indicated stage.
	 * @param {easeljs.Stage} eventTarget The stage that the cursor is actively over.
	 * @protected
	 */
	_testMouseOver (clear, owner, eventTarget) {
		if (this._prevStage && owner === undefined) { return; } // redundant listener.

		let nextStage = this._nextStage;
		if (!this._mouseOverIntervalID) {
			// not enabled for mouseover, but should still relay the event.
			nextStage&&nextStage._testMouseOver(clear, owner, eventTarget);
			return;
		}
		let o = this._getPointerData(-1);
		// only update if the mouse position has changed. This provides a lot of optimization, but has some trade-offs.
		if (!o || (!clear && this.mouseX === this._mouseOverX && this.mouseY === this._mouseOverY && this.mouseInBounds)) { return; }

		let e = o.posEvtObj;
		let isEventTarget = eventTarget || e&&(e.target === this.canvas);
		let target=null, common = -1, cursor="";

		if (!owner && (clear || this.mouseInBounds && isEventTarget)) {
			target = this._getObjectsUnderPoint(this.mouseX, this.mouseY, null, true);
			this._mouseOverX = this.mouseX;
			this._mouseOverY = this.mouseY;
		}

		let oldList = this._mouseOverTarget||[];
		let oldTarget = oldList[oldList.length-1];
		let list = this._mouseOverTarget = [];

		// generate ancestor list and check for cursor:
		let t = target;
		while (t) {
			list.unshift(t);
			if (!cursor) { cursor = t.cursor; }
			t = t.parent;
		}
		this.canvas.style.cursor = cursor;
		if (!owner && eventTarget) { eventTarget.canvas.style.cursor = cursor; }

		// find common ancestor:
		for (let i=0,l=list.length; i<l; i++) {
			if (list[i] != oldList[i]) { break; }
			common = i;
		}

		if (oldTarget != target) {
			this._dispatchMouseEvent(oldTarget, "mouseout", true, -1, o, e, target);
		}

		for (let i=oldList.length-1; i>common; i--) {
			this._dispatchMouseEvent(oldList[i], "rollout", false, -1, o, e, target);
		}

		for (let i=list.length-1; i>common; i--) {
			this._dispatchMouseEvent(list[i], "rollover", false, -1, o, e, oldTarget);
		}

		if (oldTarget != target) {
			this._dispatchMouseEvent(target, "mouseover", true, -1, o, e, oldTarget);
		}

		nextStage&&nextStage._testMouseOver(clear, owner || target && this, eventTarget || isEventTarget && this);
	}

	/**
	 * @emits {@link easeljs.DisplayObject#event:dblclick}
	 * @protected
	 * @param {easeljs.MouseEvent} e
	 * @param {easeljs.Stage} owner Indicates that the event has already been captured & handled by the indicated stage.
	 */
	_handleDoubleClick (e, owner) {
		let target=null, nextStage=this._nextStage, o=this._getPointerData(-1);
		if (!owner) {
			target = this._getObjectsUnderPoint(o.x, o.y, null, true);
			this._dispatchMouseEvent(target, "dblclick", true, -1, o, e);
		}
		nextStage&&nextStage._handleDoubleClick(e, owner || target && this);
	}

	/**
	 * @protected
	 * @param {easeljs.DisplayObject} target
	 * @param {String} type
	 * @param {Boolean} bubbles
	 * @param {Number} pointerId
	 * @param {Object} o
	 * @param {easeljs.MouseEvent} [nativeEvent]
	 * @param {easeljs.DisplayObject} [relatedTarget]
	 */
	_dispatchMouseEvent (target, type, bubbles, pointerId, o, nativeEvent, relatedTarget) {
		// TODO: might be worth either reusing MouseEvent instances, or adding a willTrigger method to avoid GC.
		if (!target || (!bubbles && !target.hasEventListener(type))) { return; }
		/*
		// TODO: account for stage transformations?
		this._mtx = this.getConcatenatedMatrix(this._mtx).invert();
		let pt = this._mtx.transformPoint(o.x, o.y);
		let evt = new MouseEvent(type, bubbles, false, pt.x, pt.y, nativeEvent, pointerId, pointerId==this._primaryPointerID || pointerId==-1, o.rawX, o.rawY);
		*/
		let evt = new _events_MouseEvent__WEBPACK_IMPORTED_MODULE_3__.default(type, bubbles, false, o.x, o.y, nativeEvent, pointerId, pointerId === this._primaryPointerID || pointerId === -1, o.rawX, o.rawY, relatedTarget);
		target.dispatchEvent(evt);
	}

}

/**
 * Dispatched when the user moves the mouse over the canvas.
 * @see {@link easeljs.MouseEvent}
 * @event easeljs.Stage#stagemousemove
 * @since 0.6.0
 */
/**
 * Dispatched when the user presses their left mouse button on the canvas.
 * You can use {@link easeljs.Stage#mouseInBounds} to check whether the mouse is currently within the stage bounds.
 * @see {@link easeljs.MouseEvent}
 * @event easeljs.Stage#stagemousedown
 * @since 0.6.0
 */
/**
 * Dispatched when the user the user presses somewhere on the stage, then releases the mouse button anywhere that the page can detect it (this varies slightly between browsers).
 * You can use {@link easeljs.Stage#mouseInBounds} to check whether the mouse is currently within the stage bounds.
 * @see {@link easeljs.MouseEvent}
 * @event easeljs.Stage#stagemouseup
 * @since 0.6.0
 */
/**
 * Dispatched when the mouse moves from within the canvas area (mouseInBounds === true) to outside it (mouseInBounds === false).
 * This is currently only dispatched for mouse input (not touch).
 * @see {@link easeljs.MouseEvent}
 * @event easeljs.Stage#mouseleave
 * @since 0.7.0
 */
/**
 * Dispatched when the mouse moves into the canvas area (mouseInBounds === false) from outside it (mouseInBounds === true).
 * This is currently only dispatched for mouse input (not touch).
 * @see {@link easeljs.MouseEvent}
 * @event easeljs.Stage#mouseenter
 * @since 0.7.0
 */
/**
 * Dispatched each update immediately before the tick event is propagated through the display list.
 * You can call preventDefault on the event object to cancel propagating the tick event.
 * @event easeljs.Stage#tickstart
 * @since 0.7.0
 */
/**
 * Dispatched each update immediately after the tick event is propagated through the display list. Does not fire if
 * tickOnUpdate is false. Precedes the "drawstart" event.
 * @event easeljs.Stage#tickend
 * @since 0.7.0
 */
/**
 * Dispatched each update immediately before the canvas is cleared and the display list is drawn to it.
 * You can call preventDefault on the event object to cancel the draw.
 * @event easeljs.Stage#drawstart
 * @since 0.7.0
 */
/**
 * Dispatched each update immediately after the display list is drawn to the canvas and the canvas context is restored.
 * @event easeljs.Stage#drawend
 * @since 0.7.0
 */


/***/ }),

/***/ "./node_modules/@createjs/easeljs/src/display/StageGL.js":
/*!***************************************************************!*\
  !*** ./node_modules/@createjs/easeljs/src/display/StageGL.js ***!
  \***************************************************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_exports__, __webpack_require__.r, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => __WEBPACK_DEFAULT_EXPORT__
/* harmony export */ });
/**
 * @license
 *
 * StageGL
 * Visit http://createjs.com/ for documentation, updates and examples.
 *
 * Copyright (c) 2017 gskinner.com, inc.
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

class StageGL {
	constructor () {
		throw new Error(`
			StageGL is not currently supported on the EaselJS 2.0 branch.
			End of Q1 2018 is targetted for StageGL support.
			Follow @CreateJS on Twitter for updates.
		`);
	}
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (StageGL);


/***/ }),

/***/ "./node_modules/@createjs/easeljs/src/display/Text.js":
/*!************************************************************!*\
  !*** ./node_modules/@createjs/easeljs/src/display/Text.js ***!
  \************************************************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => /* binding */ Text
/* harmony export */ });
/* harmony import */ var _DisplayObject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./DisplayObject */ "./node_modules/@createjs/easeljs/src/display/DisplayObject.js");
/* harmony import */ var _utils_Canvas__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/Canvas */ "./node_modules/@createjs/easeljs/src/utils/Canvas.js");
/**
 * @license Text
 * Visit http://createjs.com/ for documentation, updates and examples.
 *
 * Copyright (c) 2017 gskinner.com, inc.
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */




/**
 * Display one or more lines of dynamic text (not user editable) in the display list. Line wrapping support (using the
 * lineWidth) is very basic, wrapping on spaces and tabs only. Note that as an alternative to Text, you can position HTML
 * text above or below the canvas relative to items in the display list using the {@link easeljs.DisplayObject#localToGlobal}
 * method, or using {@link easeljs.DOMElement}.
 *
 * <b>Please note that Text does not support HTML text, and can only display one font style at a time.</b> To use
 * multiple font styles, you will need to create multiple text instances, and position them manually.
 *
 * CreateJS Text supports web fonts (the same rules as Canvas). The font must be loaded and supported by the browser
 * before it can be displayed.
 *
 * <strong>Note:</strong> Text can be expensive to generate, so cache instances where possible. Be aware that not all
 * browsers will render Text exactly the same.
 *
 * @memberof easeljs
 * @extends easeljs.DisplayObject
 * @example
 * let text = new Text("Hello World", "20px Arial", "#ff7700");
 * text.x = 100;
 * text.textBaseline = "alphabetic";
 *
 * @param {String} [text] The text to display.
 * @param {String} [font] The font style to use. Any valid value for the CSS font attribute is acceptable (ex. "bold
 * 36px Arial").
 * @param {String} [color] The color to draw the text in. Any valid value for the CSS color attribute is acceptable (ex.
 * "#F00", "red", or "#FF0000").
 */
class Text extends _DisplayObject__WEBPACK_IMPORTED_MODULE_0__.default {

	constructor (text, font, color) {
		super();

		/**
		 * The text to display.
		 * @type {String}
		 */
		this.text = text;

		/**
		 * The font style to use. Any valid value for the CSS font attribute is acceptable (ex. "bold 36px Arial").
		 * @type {String}
		 */
		this.font = font;

		/**
		 * The color to draw the text in. Any valid value for the CSS color attribute is acceptable (ex. "#F00"). Default is "#000".
		 * It will also accept valid canvas fillStyle values.
		 * @type {String}
		 */
		this.color = color;

		/**
		 * The horizontal text alignment. Any of "start", "end", "left", "right", and "center".
		 * @see {@link http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#text-styles "WHATWG spec"}
		 * @type {String}
		 * @default left
		 */
		this.textAlign = "left";

		/**
		 * The vertical alignment point on the font. Any of "top", "hanging", "middle", "alphabetic", "ideographic", or "bottom".
		 * @see {@link http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#text-styles "WHATWG spec"}
		 * @type {String}
		 * @default top
		*/
		this.textBaseline = "top";

		/**
		 * The maximum width to draw the text. If maxWidth is specified (not null), the text will be condensed or
		 * shrunk to make it fit in this width.
		 * @see {@link http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#text-styles "WHATWG spec"}
		 * @type {Number}
		*/
		this.maxWidth = null;

		/**
		 * If greater than 0, the text will be drawn as a stroke (outline) of the specified width.
		 * @type {Number}
		 */
		this.outline = 0;

		/**
		 * Indicates the line height (vertical distance between baselines) for multi-line text. If null or 0,
		 * the value of getMeasuredLineHeight is used.
		 * @type {Number}
		 * @default 0
		 */
		this.lineHeight = 0;

		/**
		 * Indicates the maximum width for a line of text before it is wrapped to multiple lines. If null,
		 * the text will not be wrapped.
		 * @type {Number}
		 */
		this.lineWidth = null;
	}

 	isVisible () {
 		let hasContent = this.cacheCanvas || (this.text != null && this.text !== "");
 		return !!(this.visible && this.alpha > 0 && this.scaleX != 0 && this.scaleY != 0 && hasContent);
 	}

 	draw (ctx, ignoreCache) {
 		if (super.draw(ctx, ignoreCache)) { return true; }

 		let col = this.color || "#000";
 		if (this.outline) { ctx.strokeStyle = col; ctx.lineWidth = this.outline*1; }
 		else { ctx.fillStyle = col; }

 		this._drawText(this._prepContext(ctx));
 		return true;
 	}

 	/**
 	 * Returns the measured, untransformed width of the text without wrapping. Use getBounds for a more robust value.
 	 * @return {Number} The measured, untransformed width of the text.
 	 */
 	getMeasuredWidth () {
 		return this._getMeasuredWidth(this.text);
 	}

 	/**
 	 * Returns an approximate line height of the text, ignoring the lineHeight property. This is based on the measured
 	 * width of a "M" character multiplied by 1.2, which provides an approximate line height for most fonts.
 	 * @return {Number} an approximate line height of the text, ignoring the lineHeight property. This is
 	 * based on the measured width of a "M" character multiplied by 1.2, which approximates em for most fonts.
 	 */
 	getMeasuredLineHeight () {
 		return this._getMeasuredWidth("M")*1.2;
 	}

 	/**
 	 * Returns the approximate height of multi-line text by multiplying the number of lines against either the
 	 * `lineHeight` (if specified) or {@link easeljs.Text#getMeasuredLineHeight}. Note that
 	 * this operation requires the text flowing logic to run, which has an associated CPU cost.
 	 * @return {Number} The approximate height of the untransformed multi-line text.
 	 */
 	getMeasuredHeight () {
 		return this._drawText(null, {}).height;
 	}

 	getBounds () {
 		let rect = super.getBounds();
 		if (rect) { return rect; }
 		if (this.text == null || this.text === "") { return null; }
 		let o = this._drawText(null, {});
 		let w = (this.maxWidth && this.maxWidth < o.width) ? this.maxWidth : o.width;
 		let x = w * Text.H_OFFSETS[this.textAlign||"left"];
 		let lineHeight = this.lineHeight||this.getMeasuredLineHeight();
 		let y = lineHeight * Text.V_OFFSETS[this.textBaseline||"top"];
 		return this._rectangle.setValues(x, y, w, o.height);
 	}

 	/**
 	 * Returns an object with width, height, and lines properties. The width and height are the visual width and height
 	 * of the drawn text. The lines property contains an array of strings, one for
 	 * each line of text that will be drawn, accounting for line breaks and wrapping. These strings have trailing
 	 * whitespace removed.
 	 * @return {Object} An object with width, height, and lines properties.
 	 */
 	getMetrics () {
 		let o = {lines:[]};
 		o.lineHeight = this.lineHeight || this.getMeasuredLineHeight();
 		o.vOffset = o.lineHeight * Text.V_OFFSETS[this.textBaseline||"top"];
 		return this._drawText(null, o, o.lines);
 	}

 	/**
 	 * Returns a clone of the Text instance.
 	 * @return {easeljs.Text} a clone of the Text instance.
 	 */
 	clone () {
 		return this._cloneProps(new Text(this.text, this.font, this.color));
 	}

 	/**
 	 * Returns a string representation of this object.
 	 * @override
 	 * @return {String} a string representation of the instance.
 	 */
 	toString () {
 		return `[${this.constructor.name} (text=${this.text.length > 20 ? `${this.text.substr(0, 17)}...` : this.text})]`;
 	}

 	/**
 	 * @param {easeljs.Text} o
 	 * @protected
 	 * @return {easeljs.Text} o
 	 */
 	_cloneProps (o) {
 		super._cloneProps(o);
 		o.textAlign = this.textAlign;
 		o.textBaseline = this.textBaseline;
 		o.maxWidth = this.maxWidth;
 		o.outline = this.outline;
 		o.lineHeight = this.lineHeight;
 		o.lineWidth = this.lineWidth;
 		return o;
 	}

 	/**
 	 * @param {CanvasRenderingContext2D} ctx
 	 * @return {CanvasRenderingContext2D}
 	 * @protected
 	 */
 	_prepContext (ctx) {
 		ctx.font = this.font||"10px sans-serif";
 		ctx.textAlign = this.textAlign||"left";
 		ctx.textBaseline = this.textBaseline||"top";
		ctx.lineJoin = "miter";
		ctx.miterLimit = 2.5;
		return ctx;
	}

	/**
	 * Draws multiline text.
	 * @param {CanvasRenderingContext2D} ctx
	 * @param {Object} o
	 * @param {Array} lines
	 * @return {Object}
	 * @protected
	 */
 	_drawText (ctx, o, lines) {
 		const paint = !!ctx;
 		if (!paint) {
 			ctx = Text._ctx;
 			ctx.save();
 			this._prepContext(ctx);
 		}
 		let lineHeight = this.lineHeight||this.getMeasuredLineHeight();

 		let maxW = 0, count = 0;
 		let hardLines = String(this.text).split(/(?:\r\n|\r|\n)/);
 		for (let str of hardLines) {
 			let w = null;

 			if (this.lineWidth != null && (w = ctx.measureText(str).width) > this.lineWidth) {
 				// text wrapping:
 				let words = str.split(/(\s)/);
 				str = words[0];
 				w = ctx.measureText(str).width;

				const l = words.length;
 				for (let i=1; i<l; i+=2) {
 					// Line needs to wrap:
 					let wordW = ctx.measureText(words[i] + words[i+1]).width;
 					if (w + wordW > this.lineWidth) {
 						if (paint) { this._drawTextLine(ctx, str, count*lineHeight); }
 						if (lines) { lines.push(str); }
 						if (w > maxW) { maxW = w; }
 						str = words[i+1];
 						w = ctx.measureText(str).width;
 						count++;
 					} else {
 						str += words[i] + words[i+1];
 						w += wordW;
 					}
 				}
 			}

 			if (paint) { this._drawTextLine(ctx, str, count*lineHeight); }
 			if (lines) { lines.push(str); }
 			if (o && w == null) { w = ctx.measureText(str).width; }
 			if (w > maxW) { maxW = w; }
 			count++;
 		}

 		if (o) {
 			o.width = maxW;
 			o.height = count*lineHeight;
 		}
 		if (!paint) { ctx.restore(); }
 		return o;
 	}

 	/**
 	 * @param {CanvasRenderingContext2D} ctx
 	 * @param {String} text
 	 * @param {Number} y
 	 * @protected
 	 */
 	_drawTextLine (ctx, text, y) {
 		// Chrome 17 will fail to draw the text if the last param is included but null, so we feed it a large value instead:
 		if (this.outline) { ctx.strokeText(text, 0, y, this.maxWidth||0xFFFF); }
 		else { ctx.fillText(text, 0, y, this.maxWidth||0xFFFF); }
 	}

 	/**
 	 * @param {String} text
 	 * @protected
 	 */
 	_getMeasuredWidth (text) {
 		let ctx = Text._ctx;
 		ctx.save();
 		let w = this._prepContext(ctx).measureText(text).width;
 		ctx.restore();
 		return w;
 	}

}

/**
 * Lookup table for the ratio to offset bounds x calculations based on the textAlign property.
 * @type {Object}
 * @readonly
 * @static
 */
Text.H_OFFSETS = {start: 0, left: 0, center: -0.5, end: -1, right: -1};
/**
 * Lookup table for the ratio to offset bounds y calculations based on the textBaseline property.
 * @type {Object}
 * @readonly
 * @static
 */
Text.V_OFFSETS = {top: 0, hanging: -0.01, middle: -0.4, alphabetic: -0.8, ideographic: -0.85, bottom: -1};

/**
 * @property _ctx
 * @type {CanvasRenderingContext2D}
 * @private
 * @static
 */
Text._ctx = (0,_utils_Canvas__WEBPACK_IMPORTED_MODULE_1__.default)().getContext("2d");


/***/ }),

/***/ "./node_modules/@createjs/easeljs/src/events/MouseEvent.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@createjs/easeljs/src/events/MouseEvent.js ***!
  \*****************************************************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => /* binding */ MouseEvent
/* harmony export */ });
/* harmony import */ var _createjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @createjs/core */ "./node_modules/@createjs/core/src/main.js");
/**
 * @license MouseEvent
 * Visit http://createjs.com/ for documentation, updates and examples.
 *
 * Copyright (c) 2017 gskinner.com, inc.
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */



/**
 * Passed as the parameter to all mouse/pointer/touch related events. For a listing of mouse events and their properties,
 * see the {@link easeljs.DisplayObject} and {@link easeljs.Stage} event listings.
 * @memberof easeljs
 * @extends core.Event
 * @param {String} type The event type.
 * @param {Boolean} bubbles Indicates whether the event will bubble through the display list.
 * @param {Boolean} cancelable Indicates whether the default behaviour of this event can be cancelled.
 * @param {Number} stageX The normalized x position relative to the stage.
 * @param {Number} stageY The normalized y position relative to the stage.
 * @param {easeljs.MouseEvent} nativeEvent The native DOM event related to this mouse event.
 * @param {Number} pointerID The unique id for the pointer.
 * @param {Boolean} primary Indicates whether this is the primary pointer in a multitouch environment.
 * @param {Number} rawX The raw x position relative to the stage.
 * @param {Number} rawY The raw y position relative to the stage.
 * @param {easeljs.DisplayObject} relatedTarget The secondary target for the event.
 */
class MouseEvent extends _createjs_core__WEBPACK_IMPORTED_MODULE_0__.Event {

	constructor (type, bubbles, cancelable, stageX, stageY, nativeEvent, pointerID, primary, rawX, rawY, relatedTarget) {
		super(type, bubbles, cancelable);

// public properties:
		/**
		 * The normalized x position on the stage. This will always be within the range 0 to stage width.
		 * @type {Number}
		*/
		this.stageX = stageX;

		/**
		 * The normalized y position on the stage. This will always be within the range 0 to stage height.
		 * @type {Number}
		 */
		this.stageY = stageY;

		/**
		 * The raw x position relative to the stage. Normally this will be the same as the stageX value, unless
		 * stage.mouseMoveOutside is true and the pointer is outside of the stage bounds.
		 * @type {Number}
		*/
		this.rawX = (rawX==null)?stageX:rawX;

		/**
		 * The raw y position relative to the stage. Normally this will be the same as the stageY value, unless
		 * stage.mouseMoveOutside is true and the pointer is outside of the stage bounds.
		 * @type {Number}
		*/
		this.rawY = (rawY==null)?stageY:rawY;

		/**
		 * The native MouseEvent generated by the browser. The properties and API for this
		 * event may differ between browsers. This property will be null if the
		 * EaselJS property was not directly generated from a native MouseEvent.
		 * @type {HTMLMouseEvent}
		 */
		this.nativeEvent = nativeEvent;

		/**
		 * The unique id for the pointer (touch point or cursor). This will be either -1 for the mouse, or the system
		 * supplied id value.
		 * @type {Number}
		 */
		this.pointerID = pointerID;

		/**
		 * Indicates whether this is the primary pointer in a multitouch environment. This will always be true for the mouse.
		 * For touch pointers, the first pointer in the current stack will be considered the primary pointer.
		 * @type {Boolean}
		 */
		this.primary = !!primary;

		/**
		 * The secondary target for the event, if applicable. This is used for mouseout/rollout
		 * events to indicate the object that the mouse entered from, mouseover/rollover for the object the mouse exited,
		 * and stagemousedown/stagemouseup events for the object that was the under the cursor, if any.
		 *
		 * Only valid interaction targets will be returned (ie. objects with mouse listeners or a cursor set).
		 * @type {easeljs.DisplayObject}
		 */
		this.relatedTarget = relatedTarget;
	}

	/**
	 * Returns the x position of the mouse in the local coordinate system of the current target (ie. the dispatcher).
	 * @type {Number}
	 * @readonly
	 */
	get localX () {
		return this.currentTarget.globalToLocal(this.rawX, this.rawY).x;
	}

	/**
	 * Returns the y position of the mouse in the local coordinate system of the current target (ie. the dispatcher).
	 * @type {Number}
	 * @readonly
	 */
	get localY () {
		return this.currentTarget.globalToLocal(this.rawX, this.rawY).y;
	}

	/**
	 * Indicates whether the event was generated by a touch input (versus a mouse input).
	 * @type {Boolean}
	 * @readonly
	 */
	get isTouch () {
		return this.pointerID !== -1;
	}

	/**
	 * Returns a clone of the MouseEvent instance.
	 * @return {easeljs.MouseEvent} a clone of the MouseEvent instance.
	 */
	clone () {
		return new MouseEvent(this.type, this.bubbles, this.cancelable, this.stageX, this.stageY, this.nativeEvent, this.pointerID, this.primary, this.rawX, this.rawY);
	}

	/**
	 * Returns a string representation of this object.
	 * @return {String} a string representation of the instance.
	 */
	toString () {
		return `[${this.constructor.name} (type=${this.type} stageX=${this.stageX} stageY=${this.stageY})]`;
	}

}


/***/ }),

/***/ "./node_modules/@createjs/easeljs/src/filters/AlphaMapFilter.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@createjs/easeljs/src/filters/AlphaMapFilter.js ***!
  \**********************************************************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => /* binding */ AlphaMapFilter
/* harmony export */ });
/* harmony import */ var _Filter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Filter */ "./node_modules/@createjs/easeljs/src/filters/Filter.js");
/**
 * @license AlphaMapFilter
 * Visit http://createjs.com/ for documentation, updates and examples.
 *
 * Copyright (c) 2017 gskinner.com, inc.
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */



/**
 * Applies a greyscale alpha map image (or canvas) to the target, such that the alpha channel of the result will
 * be copied from the red channel of the map, and the RGB channels will be copied from the target.
 *
 * Generally, it is recommended that you use {@link easeljs.AlphaMaskFilter}, because it has much better performance.
 *
 * @memberof easeljs
 * @extends easeljs.Filter
 * @example *
 * let box = new Shape();
 * box.graphics.beginLinearGradientFill(["#ff0000", "#0000ff"], [0, 1], 0, 0, 0, 100)
 * box.graphics.drawRect(0, 0, 100, 100);
 * box.cache(0, 0, 100, 100);
 * let bmp = new Bitmap("path/to/image.jpg");
 * bmp.filters = [ new AlphaMapFilter(box.cacheCanvas) ];
 * bmp.cache(0, 0, 100, 100);
 *
 * @param {HTMLImageElement | HTMLCanvasElement} alphaMap The greyscale image (or canvas) to use as the alpha value for the
 * result. This should be exactly the same dimensions as the target.
 */
class AlphaMapFilter extends _Filter__WEBPACK_IMPORTED_MODULE_0__.default {

	constructor (alphaMap) {
		super();

		/**
		 * The greyscale image (or canvas) to use as the alpha value for the result. This should be exactly the same
		 * dimensions as the target.
		 * @type {HTMLImageElement | HTMLCanvasElement}
		 */
		this.alphaMap = alphaMap;

		/**
		 * @protected
		 * @type {HTMLImageElement | HTMLCanvasElement}
		 * @default null
		 */
		this._alphaMap = null;

		/**
		 * @protected
		 * @type {Uint8ClampedArray}
		 * @default null
		 */
		this._mapData = null;

		/**
		 * @protected
		 * @type {*}
		 * @default null
		 */
		this._mapTexture = null;

		this.FRAG_SHADER_BODY = `
			uniform sampler2D uAlphaSampler;

			void main (void) {
				vec4 color = texture2D(uSampler, vRenderCoord);
				vec4 alphaMap = texture2D(uAlphaSampler, vTextureCoord);

				// some image formats can have transparent white rgba(1,1,1, 0) when put on the GPU, this means we need a slight tweak
				// using ceil ensure that the colour will be used so long as it exists but pure transparency will be treated black
				gl_FragColor = vec4(color.rgb, color.a * (alphaMap.r * ceil(alphaMap.a)));
			}
		`;
	}

	/**
	 * @todo docs
	 * @param {*} gl
	 * @param {*} stage
	 * @param {*} shaderProgram
	 */
	shaderParamSetup (gl, stage, shaderProgram) {
		if (!this._mapTexture) { this._mapTexture = gl.createTexture(); }

		gl.activeTexture(gl.TEXTURE1);
		gl.bindTexture(gl.TEXTURE_2D, this._mapTexture);
		stage.setTextureParams(gl);
		gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, this.alphaMap);

		gl.uniform1i(
			gl.getUniformLocation(shaderProgram, "uAlphaSampler"),
			1
		);
	}

	/**
	 * @return {easeljs.AlphaMapFilter}
	 */
	clone () {
		let o = new AlphaMapFilter(this.alphaMap);
		o._alphaMap = this._alphaMap;
		o._mapData = this._mapData;
		return o;
	}

	_applyFilter (imageData) {
		if (!this.alphaMap) { return true; }
		if (!this._prepAlphaMap()) { return false; }

		// TODO: update to support scenarios where the target has different dimensions.
		let data = imageData.data;
		let map = this._mapData;
		const l = data.length;
		for (let i=0; i<l; i += 4) { data[i + 3] = map[i] || 0; }

		return true;
	}

	/**
	 * @protected
	 */
	_prepAlphaMap () {
		if (!this.alphaMap) { return false; }
		if (this.alphaMap === this._alphaMap && this._mapData) { return true; }
		this._mapData = null;

		let map = this._alphaMap = this.alphaMap;
		let canvas = map;
		let ctx;
		if (map instanceof HTMLCanvasElement) {
			ctx = canvas.getContext("2d");
		} else {
			canvas = window.createjs && createjs.createCanvas ? createjs.createCanvas() : document.createElement("canvas");
			canvas.width = map.width;
			canvas.height = map.height;
			ctx = canvas.getContext("2d");
			ctx.drawImage(map, 0, 0);
		}

		try {
			this._mapData = ctx.getImageData(0, 0, map.width, map.height).data
			return true;
		} catch (e) {
			//if (!this.suppressCrossDomainErrors) throw new Error("unable to access local image data: " + e);
			return false;
		}
	}

}


/***/ }),

/***/ "./node_modules/@createjs/easeljs/src/filters/AlphaMaskFilter.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@createjs/easeljs/src/filters/AlphaMaskFilter.js ***!
  \***********************************************************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => /* binding */ AlphaMaskFilter
/* harmony export */ });
/* harmony import */ var _Filter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Filter */ "./node_modules/@createjs/easeljs/src/filters/Filter.js");
/**
 * @license AlphaMaskFilter
 * Visit http://createjs.com/ for documentation, updates and examples.
 *
 * Copyright (c) 2017 gskinner.com, inc.
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */



/**
 * Applies the alpha from the mask image (or canvas) to the target, such that the alpha channel of the result will
 * be derived from the mask, and the RGB channels will be copied from the target. This can be used, for example, to
 * apply an alpha mask to a display object. This can also be used to combine a JPG compressed RGB image with a PNG32
 * alpha mask, which can result in a much smaller file size than a single PNG32 containing ARGB.
 *
 * <b>IMPORTANT NOTE: This filter currently does not support the targetCtx, or targetX/Y parameters correctly.</b>
 *
 * @memberof easeljs
 * @extends easeljs.Filter
 * @example
 * var box = new Shape();
 * box.graphics.beginLinearGradientFill(["#000000", "rgba(0, 0, 0, 0)"], [0, 1], 0, 0, 100, 100)
 * box.graphics.drawRect(0, 0, 100, 100);
 * box.cache(0, 0, 100, 100);
 * var bmp = new Bitmap("path/to/image.jpg");
 * bmp.filters = [ new AlphaMaskFilter(box.cacheCanvas) ];
 * bmp.cache(0, 0, 100, 100);
 *
 * @param {HTMLImageElement | HTMLCanvasElement} mask
 */
class AlphaMaskFilter extends _Filter__WEBPACK_IMPORTED_MODULE_0__.default {

	constructor (mask) {
		super();

		/**
		 * The image (or canvas) to use as the mask.
		 * @type {HTMLImageElement | HTMLCanvasElement}
		 */
		this.mask = mask;

		this.usesContext = true;

		this.FRAG_SHADER_BODY = `
			uniform sampler2D uAlphaSampler;

			void main (void) {
				vec4 color = texture2D(uSampler, vRenderCoord);
				vec4 alphaMap = texture2D(uAlphaSampler, vTextureCoord);

				gl_FragColor = vec4(color.rgb, color.a * alphaMap.a);
			}
		`;
	}

	/**
	 * Applies the filter to the specified context.
	 *
	 * <strong>IMPORTANT NOTE: This filter currently does not support the targetCtx, or targetX/Y parameters correctly.</strong>
	 * @param {CanvasRenderingContext2D} ctx The 2D context to use as the source.
	 * @param {Number} x The x position to use for the source rect.
	 * @param {Number} y The y position to use for the source rect.
	 * @param {Number} width The width to use for the source rect.
	 * @param {Number} height The height to use for the source rect.
	 * @param {CanvasRenderingContext2D} [targetCtx] NOT SUPPORTED IN THIS FILTER. The 2D context to draw the result to. Defaults to the context passed to ctx.
	 * @param {Number} [targetX] NOT SUPPORTED IN THIS FILTER. The x position to draw the result to. Defaults to the value passed to x.
	 * @param {Number} [targetY] NOT SUPPORTED IN THIS FILTER. The y position to draw the result to. Defaults to the value passed to y.
	 * @return {Boolean} If the filter was applied successfully.
	 */
	applyFilter (ctx, x, y, width, height, targetCtx, targetX, targetY) {
		if (!this.mask) { return true; }
		targetCtx = targetCtx || ctx;
		if (targetX == null) { targetX = x; }
		if (targetY == null) { targetY = y; }

		targetCtx.save();
		if (ctx != targetCtx) {
			// TODO: support targetCtx and targetX/Y
			// clearRect, then draw the ctx in?
			return false;
		}

		targetCtx.globalCompositeOperation = "destination-in";
		targetCtx.drawImage(this.mask, targetX, targetY);
		targetCtx.restore();
		return true;
	}

	/**
	 * @return {easeljs.AlphaMaskFilter}
	 */
	clone () {
		return new AlphaMaskFilter(this.mask);
	}

	/**
	 * @todo docs
	 * @param {*} gl
	 * @param {*} stage
	 * @param {*} shaderProgram
	 */
	shaderParamSetup (gl, stage, shaderProgram) {
		if(!this._mapTexture) { this._mapTexture = gl.createTexture(); }

		gl.activeTexture(gl.TEXTURE1);
		gl.bindTexture(gl.TEXTURE_2D, this._mapTexture);
		stage.setTextureParams(gl);
		gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, this.mask);

		gl.uniform1i(
			gl.getUniformLocation(shaderProgram, "uAlphaSampler"),
			1
		);
	}

}


/***/ }),

/***/ "./node_modules/@createjs/easeljs/src/filters/BitmapCache.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@createjs/easeljs/src/filters/BitmapCache.js ***!
  \*******************************************************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => /* binding */ BitmapCache
/* harmony export */ });
/* harmony import */ var _Filter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Filter */ "./node_modules/@createjs/easeljs/src/filters/Filter.js");
/* harmony import */ var _geom_Rectangle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../geom/Rectangle */ "./node_modules/@createjs/easeljs/src/geom/Rectangle.js");
/* harmony import */ var _display_StageGL__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../display/StageGL */ "./node_modules/@createjs/easeljs/src/display/StageGL.js");
/**
 * @license BitmapCache
 * Visit http://createjs.com/ for documentation, updates and examples.
 *
 * Copyright (c) 2017 gskinner.com, inc.
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */





/**
 * The BitmapCache is an internal representation of all the cache properties and logic required in order to "cache"
 * an object. This information and functionality used to be located on a {@link easeljs.DisplayObject#cache}
 * method in {@link easeljs.DisplayObject}, but was moved to its own class.
 *
 * Caching in this context is purely visual, and will render the DisplayObject out into an image to be used instead
 * of the object. The actual cache itself is still stored on the target with the {@link easeljs.DisplayObject#cacheCanvas}.
 *
 * Working with a singular image like a {@link easeljs.Bitmap}, there is little benefit to performing
 * a cache operation, as it is already a single image. Caching is best done on containers that have multiple complex
 * parts that do not change often, so that rendering the image will improve overall rendering speed. A cached object
 * will not visually update until explicitly told to do so with a call to {@link easeljs.Stage#update},
 * much like a Stage. If a cache is being updated every frame, it is likely not improving rendering performance.
 * Caches are best used when updates will be sparse.
 *
 * Caching is also a co-requisite for applying filters to prevent expensive filters running constantly without need.
 * The BitmapCache is also responsible for applying filters to objects, and reads each {@link easeljs.Filter}.
 * Real-time Filters are not recommended when dealing with a Context2D canvas if performance is a concern. For best
 * performance and to still allow for some visual effects, use a {{#crossLink "DisplayObject/compositeOperation:property"}}{{/crossLink}}
 * when possible.
 *
 * @memberof easeljs
 * @extends easeljs.Filter
 */
class BitmapCache extends _Filter__WEBPACK_IMPORTED_MODULE_0__.default {

	constructor () {
		super();

		/**
		 * Width of the cache relative to the target object.
		 * @protected
		 * @type {Number}
		 * @default undefined
		 */
		this.width = undefined;

		/**
		 * Height of the cache relative to the target object.
		 * @protected
		 * @type {Number}
		 * @default undefined
		 */
		this.height = undefined;

		/**
		 * Horizontal position of the cache relative to the target's origin.
		 * @protected
		 * @type {Number}
		 * @default undefined
		 */
		this.x = undefined;

		/**
		 * Vertical position of the cache relative to target's origin.
		 * @protected
		 * @type {Number}
		 * @default undefined
		 */
		this.y = undefined;

		/**
		 * The internal scale of the cache image, does not affects display size. This is useful to both increase and
		 * decrease render quality. Objects with increased scales are more likely to look good when scaled up. Objects
		 * with decreased scales can save on rendering performance.
		 * @protected
		 * @type {Number}
		 * @default 1
		 */
		this.scale = 1;

		/**
		 * The relative offset of the {@link easeljs.BitmapCache#x} position, used for drawing
		 * into the cache with the correct offsets. Re-calculated every update call before drawing.
		 * @protected
		 * @type {Number}
		 * @default 0
		 */
		this.offX = 0;

		/**
		 * The relative offset of the {@link easeljs.BitmapCache#y} position, used for drawing
		 * into the cache with the correct offsets. Re-calculated every update call before drawing.
		 * @protected
		 * @type {Number}
		 * @default 0
		 */
		this.offY = 0;

		/**
		 * Track how many times the cache has been updated, mostly used for preventing duplicate cacheURLs. This can be
		 * useful to see if a cache has been updated.
		 * @type {Number}
		 * @default 0
		 */
		this.cacheID = 0;

		/**
		 * Relative offset of the x position, used for drawing the cache into other scenes.
		 * Re-calculated every update call before drawing.
		 * @protected
		 * @type {Number}
		 * @default 0
		 * @todo Is this description right? Its the same as offX.
		 */
		this._filterOffX = 0;

		/**
		 * Relative offset of the y position, used for drawing into the cache into other scenes.
		 * Re-calculated every update call before drawing.
		 * @protected
		 * @type {Number}
		 * @default 0
		 * @todo Is this description right? Its the same as offY.
		 */
		this._filterOffY = 0;

		/**
		 * The cacheID when a DataURL was requested.
		 * @protected
		 * @type {Number}
		 * @default 0
		 */
		this._cacheDataURLID = 0;

		/**
		 * The cache's DataURL, generated on-demand using the getter.
		 * @protected
		 * @type {String}
		 * @default null
		 */
		this._cacheDataURL = null;

		/**
		 * Internal tracking of final bounding width, approximately `width*scale;` however, filters can complicate the actual value.
		 * @protected
		 * @type {Number}
		 * @default 0
		 */
		this._drawWidth = 0;

		/**
		 * Internal tracking of final bounding height, approximately `height*scale;` however, filters can complicate the actual value.
		 * @protected
		 * @type {Number}
		 * @default 0
		 */
		this._drawHeight = 0;

		/**
		 * Internal tracking of the last requested bounds, may happen repeadtedly so stored to avoid object creation.
		 * @protected
		 * @type {easeljs.Rectangle}
		 * @default easeljs.Rectangle
		 */
		this._boundRect = new _geom_Rectangle__WEBPACK_IMPORTED_MODULE_1__.default();

	}

	/**
	 * Returns the bounds that surround all applied filters. This relies on each filter to describe how it changes bounds.
	 * @param {easeljs.DisplayObject} target The object to check the filter bounds for.
	 * @param {easeljs.Rectangle} [output] Calculated bounds will be applied to this rect.
	 * @return {easeljs.Rectangle}
	 * @static
	 */
	static getFilterBounds (target, output = new _geom_Rectangle__WEBPACK_IMPORTED_MODULE_1__.default()) {
		let filters = target.filters;
		let filterCount = filters && filters.length;
		if (!!filterCount <= 0) { return output; }

		for (let i=0; i<filterCount; i++) {
			let f = filters[i];
			if (!f || !f.getBounds) { continue; }
			let test = f.getBounds();
			if (!test) { continue; }
			if (i==0) {
				output.setValues(test.x, test.y, test.width, test.height);
			} else {
				output.extend(test.x, test.y, test.width, test.height);
			}
		}

		return output;
	}

	/**
	 * Directly called via {@link easeljs.DisplayObject#cache}. Creates and sets properties needed
	 * for a cache to function, and performs the initial update.
	 * @param {easeljs.DisplayObject} target The DisplayObject this cache is linked to.
	 * @param {Number} [x=0] The x coordinate origin for the cache region.
	 * @param {Number} [y=0] The y coordinate origin for the cache region.
	 * @param {Number} [width=1] The width of the cache region.
	 * @param {Number} [height=1] The height of the cache region.
	 * @param {Number} [scale=1] The scale at which the cache will be created. For example, if you cache a vector shape
	 * using `myShape.cache(0,0,100,100,2)`, then the resulting cacheCanvas will be 200x200 pixels. This lets you scale
	 * and rotate cached elements with greater fidelity.
	 * @param {Object} [options] When using things like {@link easeljs.StageGL} there may be
	 * extra caching opportunities or requirements.
	 */
	define (target, x = 0, y = 0, width = 1, height = 1, scale = 1, options) {
		if (!target) { throw "No symbol to cache"; }
		this._options = options;
		this._useWebGL = options !== undefined;
		this.target = target;

		this.width = width >= 1 ? width : 1;
		this.height = height >= 1 ? height : 1;
		this.x = x;
		this.y = y;
		this.scale = scale;

		this.update();
	}

	/**
	 * Directly called via {@link easeljs.DisplayObject#updateCache}, but also internally. This
	 * has the dual responsibility of making sure the surface is ready to be drawn to, and performing the draw. For
	 * full details of each behaviour, check the protected functions {@link easeljs.BitmapCache#_updateSurface}
	 * and {@link easeljs.BitmapCache#_drawToCache} respectively.
	 * @param {String} [compositeOperation] The DisplayObject this cache is linked to.
	 */
	update (compositeOperation) {
		if (!this.target) { throw "define() must be called before update()"; }

		let filterBounds = BitmapCache.getFilterBounds(this.target);
		let surface = this.target.cacheCanvas;

		this._drawWidth = Math.ceil(this.width*this.scale) + filterBounds.width;
		this._drawHeight = Math.ceil(this.height*this.scale) + filterBounds.height;

		if (!surface || this._drawWidth != surface.width || this._drawHeight != surface.height) {
			this._updateSurface();
		}

		this._filterOffX = filterBounds.x;
		this._filterOffY = filterBounds.y;
		this.offX = this.x*this.scale + this._filterOffX;
		this.offY = this.y*this.scale + this._filterOffY;

		this._drawToCache(compositeOperation);

		this.cacheID = this.cacheID?this.cacheID+1:1;
	}

	/**
	 * Reset and release all the properties and memory associated with this cache.
	 */
	release () {
		let stage = this.target.stage;
		if (this._useWebGL && this._webGLCache) {
			// if it isn't cache controlled clean up after yourself
			if (!this._webGLCache.isCacheControlled) {
				if (this.__lastRT) { this.__lastRT = undefined; }
				if (this.__rtA) { this._webGLCache._killTextureObject(this.__rtA); }
				if (this.__rtB) { this._webGLCache._killTextureObject(this.__rtB); }
				if (this.target && this.target.cacheCanvas) { this._webGLCache._killTextureObject(this.target.cacheCanvas); }
			}
			// set the context to none and let the garbage collector get the rest when the canvas itself gets removed
			this._webGLCache = false;
		} else if (stage instanceof _display_StageGL__WEBPACK_IMPORTED_MODULE_2__.default) {
			stage.releaseTexture(this.target.cacheCanvas);
		}
		this.target = this.target.cacheCanvas = null;
		this.cacheID = this._cacheDataURLID = this._cacheDataURL = undefined;
		this.width = this.height = this.x = this.y = this.offX = this.offY = 0;
		this.scale = 1;
	}

	/**
	 * Returns a data URL for the cache, or `null` if this display object is not cached.
	 * Uses {@link easeljs.BitmapCache#cacheID} to ensure a new data URL is not generated if the
	 * cache has not changed.
	 * @return {String} The image data url for the cache.
	 */
	getCacheDataURL () {
		let cacheCanvas = this.target && this.target.cacheCanvas;
		if (!cacheCanvas) { return null; }
		if (this.cacheID != this._cacheDataURLID) {
			this._cacheDataURLID = this.cacheID;
			this._cacheDataURL = cacheCanvas.toDataURL?cacheCanvas.toDataURL():null;	// incase function is
		}
		return this._cacheDataURL;
	}

	/**
	 * Use context2D drawing commands to display the cache canvas being used.
	 * @param {CanvasRenderingContext2D} ctx The context to draw into.
	 * @return {Boolean} Whether the draw was handled successfully.
	 */
	draw (ctx) {
		if (!this.target) { return false; }
		ctx.drawImage(
			this.target.cacheCanvas,
			this.x + (this._filterOffX/this.scale),
			this.y + (this._filterOffY/this.scale),
			this._drawWidth/this.scale,
			this._drawHeight/this.scale
		);
		return true;
	}

	/**
	 * Determine the bounds of the shape in local space.
	 * @returns {easeljs.Rectangle}
	 */
	getBounds () {
		const scale = this.scale;
		return this._boundRect.setValue(
			this._filterOffX/scale,
			this._filterOffY/scale,
			this.width/scale,
			this.height/scale
		);
	}

	/**
	 * Basic context2D caching works by creating a new canvas element and setting its physical size. This function will
	 * create and or size the canvas as needed.
	 * @protected
	 */
	_updateSurface () {
		let surface;
		if (!this._useWebGL) {
			surface = this.target.cacheCanvas;
			// create it if it's missing
			if (!surface) {
				surface = this.target.cacheCanvas = window.createjs&&createjs.createCanvas?createjs.createCanvas():document.createElement("canvas");
			}
			// now size it
			surface.width = this._drawWidth;
			surface.height = this._drawHeight;
			// skip the webgl-only updates
			return;
		}

		// create it if it's missing
		if (!this._webGLCache) {
			if (this._options.useGL === "stage") {
				if(!(this.target.stage != null && this.target.stage.isWebGL)) {
					throw `Cannot use 'stage' for cache because the object's parent stage is ${this.target.stage != null ? "non WebGL." : "not set, please addChild to the correct stage."}`;
				}
				this.target.cacheCanvas = true; // will be replaced with RenderTexture, temporary positive value for old "isCached" checks
				this._webGLCache = this.target.stage;
			} else if (this._options.useGL === "new") {
				this.target.cacheCanvas = document.createElement("canvas"); // we can turn off autopurge because we wont be making textures here
				this._webGLCache = new _display_StageGL__WEBPACK_IMPORTED_MODULE_2__.default(this.target.cacheCanvas, {antialias: true, transparent: true, autoPurge: -1});
				this._webGLCache.isCacheControlled = true;    // use this flag to control stage sizing and final output
			} else {
				throw "Invalid option provided to useGL, expected ['stage', 'new', StageGL, undefined], got "+ this._options.useGL;
			}
		}

		// now size render surfaces
		let stageGL = this._webGLCache;
		surface = this.target.cacheCanvas;

		// if we have a dedicated stage we've gotta size it
		if (stageGL.isCacheControlled) {
			surface.width = this._drawWidth;
			surface.height = this._drawHeight;
			stageGL.updateViewport(this._drawWidth, this._drawHeight);
		}
		if (this.target.filters) {
			// with filters we can't tell how many we'll need but the most we'll ever need is two, so make them now
			stageGL.getTargetRenderTexture(this.target, this._drawWidth,this._drawHeight);
			stageGL.getTargetRenderTexture(this.target, this._drawWidth,this._drawHeight);
		} else if (!stageGL.isCacheControlled) {
			// without filters then we only need one RenderTexture, and that's only if its not a dedicated stage
			stageGL.getTargetRenderTexture(this.target, this._drawWidth,this._drawHeight);
		}
	}

	/**
	 * Perform the cache draw out for context 2D now that the setup properties have been performed.
	 * @protected
	 */
	_drawToCache (compositeOperation) {
		let target = this.target;
		let surface = target.cacheCanvas;
		let webGL = this._webGLCache;

		if (!this._useWebGL || !webGL) {
			let ctx = surface.getContext("2d");

			if (!compositeOperation) {
				ctx.clearRect(0, 0, this._drawWidth+1, this._drawHeight+1);
			}

			ctx.save();
			ctx.globalCompositeOperation = compositeOperation;
			ctx.setTransform(this.scale,0,0,this.scale, -this._filterOffX,-this._filterOffY);
			ctx.translate(-this.x, -this.y);
			target.draw(ctx, true);
			ctx.restore();

			if (target.filters && target.filters.length) {
				this._applyFilters(target);
			}
			surface._invalid = true;
			return;
		}

		this._webGLCache.cacheDraw(target, target.filters, this);
		// NOTE: we may of swapped around which element the surface is, so we re-fetch it
		surface = this.target.cacheCanvas;
		surface.width = this._drawWidth;
		surface.height = this._drawHeight;
		surface._invalid = true;
	}

	/**
	 * Work through every filter and apply its individual transformation to it.
	 * @protected
	 */
	_applyFilters () {
		let surface = this.target.cacheCanvas;
		let filters = this.target.filters;

		let w = this._drawWidth;
		let h = this._drawHeight;

		// setup
		let data = surface.getContext("2d").getImageData(0,0, w,h);

		// apply
		let l = filters.length;
		for (let i=0; i<l; i++) {
			filters[i]._applyFilter(data);
		}

		//done
		surface.getContext("2d").putImageData(data, 0,0);
	}

}

/**
 * Functionality injected to {@link easeljs.BitmapCache}. Ensure StageGL is loaded after all other
 * standard EaselJS classes are loaded but before making any DisplayObject instances for injection to take full effect.
 * Replaces the context2D cache draw with the option for WebGL or context2D drawing.
 * If options is set to "true" a StageGL is created and contained on the object for use when rendering a cache.
 * If options is a StageGL instance it will not create an instance but use the one provided.
 * If possible it is best to provide the StageGL instance that is a parent to this DisplayObject for performance reasons.
 * A StageGL cache does not infer the ability to draw objects a StageGL cannot currently draw,
 * i.e. do not use a WebGL context cache when caching a Shape, Text, etc.
 *
 * You can make your own StageGL and have it render to a canvas if you set ".isCacheControlled" to true on your stage.
 * You may wish to create your own StageGL instance to control factors like background color/transparency, AA, and etc.
 * You must set "options" to its own stage if you wish to use the fast Render Textures available only to StageGLs.
 * If you use WebGL cache on a container with Shapes you will have to cache each shape individually before the container,
 * otherwise the WebGL cache will not render the shapes.
 *
 * @name easeljs.BitmapCache#cache
 *
 * @example <caption>WebGL cache with 2d context</caption>
 * let stage = new Stage();
 * let bmp = new Bitmap(src);
 * bmp.cache(0, 0, bmp.width, bmp.height, 1, true); // no StageGL to use, so make one
 * let shape = new Shape();
 * shape.graphics.clear().fill("red").drawRect(0,0,20,20);
 * shape.cache(0, 0, 20, 20, 1); // cannot use WebGL cache
 *
 * @example <caption>WebGL cache with WebGL context</caption>
 * let stageGL = new StageGL();
 * let bmp = new Bitmap(src);
 * bmp.cache(0, 0, bmp.width, bmp.height, 1, stageGL); // use our StageGL to cache
 * let shape = new Shape();
 * shape.graphics.clear().fill("red").drawRect(0,0,20,20);
 * shape.cache(0, 0, 20, 20, 1); // cannot use WebGL cache
 *
 * @param {Number} x The x coordinate origin for the cache region.
 * @param {Number} y The y coordinate origin for the cache region.
 * @param {Number} width The width of the cache region.
 * @param {Number} height The height of the cache region.
 * @param {Number} [scale=1] The scale at which the cache will be created. For example, if you cache a vector shape using
 * 	myShape.cache(0,0,100,100,2) then the resulting cacheCanvas will be 200x200 px. This lets you scale and rotate
 * 	cached elements with greater fidelity.
 * @param {Boolean | easeljs.StageGL} [options] Select whether to use context 2D, or WebGL rendering, and whether to make a new stage instance or use an existing one.
 */


/***/ }),

/***/ "./node_modules/@createjs/easeljs/src/filters/BlurFilter.js":
/*!******************************************************************!*\
  !*** ./node_modules/@createjs/easeljs/src/filters/BlurFilter.js ***!
  \******************************************************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => /* binding */ BlurFilter
/* harmony export */ });
/* harmony import */ var _Filter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Filter */ "./node_modules/@createjs/easeljs/src/filters/Filter.js");
/* harmony import */ var _geom_Rectangle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../geom/Rectangle */ "./node_modules/@createjs/easeljs/src/geom/Rectangle.js");
/**
 * @license BlurFilter
 * Visit http://createjs.com/ for documentation, updates and examples.
 *
 * Copyright (c) 2017 gskinner.com, inc.
 *
 * BoxBlur Algorithm by Mario Klingemann, quasimondo.com
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */




/**
 * Applies a box blur to DisplayObjects. Note that this filter is fairly CPU intensive, particularly if the quality is
 * set higher than 1.
 *
 * @memberof easeljs
 * @extends easeljs.Filter
 * @example
 * let shape = new Shape().set({x:100,y:100});
 * shape.graphics.beginFill("#ff0000").drawCircle(0,0,50);
 * let blurFilter = new BlurFilter(5, 5, 1);
 * shape.filters = [blurFilter];
 * let bounds = blurFilter.getBounds();
 * shape.cache(-50+bounds.x, -50+bounds.y, 100+bounds.width, 100+bounds.height);
 *
 * @param {Number} [blurX=0] The horizontal blur radius in pixels.
 * @param {Number} [blurY=0] The vertical blur radius in pixels.
 * @param {Number} [quality=1] The number of blur iterations.
 */
class BlurFilter extends _Filter__WEBPACK_IMPORTED_MODULE_0__.default {

	constructor (blurX = 0, blurY = 0, quality = 1) {
		super();

		/**
		 * @protected
		 * @default 0
		 * @type {Number}
		 */
		this._blurX = blurX;
		/**
		 * @protected
		 * @type {Array}
		 */
		this._blurXTable = [];
		/**
		 * @protected
		 * @type {Number}
		 * @default null
		 */
		this._lastBlurX = null;

		/**
		 * @default 0
		 * @type {Number}
		 */
		this._blurY = blurY;
		/**
		 * @protected
		 * @type {Array}
		 */
		this._blurYTable = [];
		/**
		 * @protected
		 * @type {Number}
		 * @default null
		 */
		this._lastBlurY = null;

		/**
		 * Number of blur iterations. For example, a value of 1 will produce a rough blur. A value of 2 will produce a
		 * smoother blur, but take twice as long to run.
		 * @default 1
		 * @type {Number}
		 */
		this._quality = (isNaN(quality) || quality < 1) ? 1 : quality;
		/**
		 * @protected
		 * @type {Number}
		 * @default null
		 */
		this._lastQuality = null;

		this.FRAG_SHADER_TEMPLATE = `
			uniform float xWeight[{{blurX}}];
			uniform float yWeight[{{blurY}}];
			uniform vec2 textureOffset;
			void main (void) {
				vec4 color = vec4(0.0);

				float xAdj = ({{blurX}}.0-1.0)/2.0;
				float yAdj = ({{blurY}}.0-1.0)/2.0;
				vec2 sampleOffset;

				for(int i=0; i<{{blurX}}; i++) {
					for(int j=0; j<{{blurY}}; j++) {
						sampleOffset = vRenderCoord + (textureOffset * vec2(float(i)-xAdj, float(j)-yAdj));
						color += texture2D(uSampler, sampleOffset) * (xWeight[i] * yWeight[j]);
					}
				}

				gl_FragColor = color.rgba;
			}
		`;
	}

	/**
	 * Horizontal blur radius in pixels.
	 * @type {Number}
	 */
	get blurX () { return this._blurX; }
	set blurX (blurX) {
		if (isNaN(blurX) || blurX < 0) { blurX = 0; }
		this._blurX = blurX;
	}

	/**
	 * Vertical blur radius in pixels.
	 * @type {Number}
	 */
	get blurY () { return this._blurY; }
	set blurY (blurY) {
		if (isNaN(blurY) || blurY < 0) { blurY = 0; }
		this._blurY = blurY;
	}

	/**
	 * Number of blur iterations. For example, a value of 1 will produce a rough blur. A value of 2 will produce a
	 * smoother blur, but take twice as long to run.
	 * @type {Number}
	 */
	get quality () { return this._quality | 0; }
	set quality (quality) {
		if (isNaN(quality) || quality < 0) { quality = 0; }
		this._quality = quality;
	}

	/**
	 * @protected
	 * @type {*}
	 */
	get _buildShader () {
		const xChange = this._lastBlurX !== this._blurX;
		const yChange = this._lastBlurY !== this._blurY;
		const qChange = this._lastQuality !== this._quality;
		if (xChange || yChange || qChange) {
				if (xChange || qChange) { this._blurXTable = this._getTable(this._blurX * this._quality); }
				if (yChange || qChange) { this._blurYTable = this._getTable(this._blurY * this._quality); }
				this._updateShader();
				this._lastBlurX = this._blurX;
				this._lastBlurY = this._blurY;
				this._lastQuality = this._quality;
				return undefined; // force a rebuild
		}
		return this._compiledShader;
	}
	set _builtShader (value) { this._compiledShader = value; }

	shaderParamSetup (gl, stage, shaderProgram) {
		// load the normalized gaussian weight tables
		gl.uniform1fv(
			gl.getUniformLocation(shaderProgram, "xWeight"),
			this._blurXTable
		);
		gl.uniform1fv(
			gl.getUniformLocation(shaderProgram, "yWeight"),
			this._blurYTable
		);

		// what is the size of a single pixel in -1, 1 (webGL) space
		gl.uniform2f(
			gl.getUniformLocation(shaderProgram, "textureOffset"),
			2/(stage._viewportWidth*this._quality), 2/(stage._viewportHeight*this._quality)
		);
	}

	getBounds (rect) {
		let x = this.blurX|0, y = this.blurY| 0;
		if (x <= 0 && y <= 0) { return rect; }
		let q = Math.pow(this.quality, 0.2);
		return (rect || new _geom_Rectangle__WEBPACK_IMPORTED_MODULE_1__.default()).pad(y*q+1,x*q+1,y*q+1,x*q+1);
	}

	/**
	 * @return {easeljs.BlurFilter}
	 */
	clone () {
		return new BlurFilter(this.blurX, this.blurY, this.quality);
	}

	_updateShader () {
		let result = this.FRAG_SHADER_TEMPLATE;
		result = result.replace(/{{blurX}}/g, this._blurXTable.length.toFixed(0));
		result = result.replace(/{{blurY}}/g, this._blurYTable.length.toFixed(0));
		this.FRAG_SHADER_BODY = result;
	}

	_getTable (spread) {
		const EDGE = 4.2;
		if (spread <= 1) { return [1]; }

		let result = [];
		let count = Math.ceil(spread*2);
		count += (count%2)?0:1;
		let adjust = (count/2)|0;
		for (let i = -adjust; i<=adjust; i++) {
			let x = (i/adjust)*EDGE;
			result.push(1/Math.sqrt(2*Math.PI) * Math.pow(Math.E, -(Math.pow(x,2)/4)));
		}
		let factor = result.reduce((a, b) => a + b, 0);
		return result.map(currentValue => currentValue / factor);
	}

	_applyFilter (imageData) {
		let radiusX = this._blurX >> 1;
		if (isNaN(radiusX) || radiusX < 0) return false;
		let radiusY = this._blurY >> 1;
		if (isNaN(radiusY) || radiusY < 0) return false;
		if (radiusX === 0 && radiusY === 0) return false;

		let iterations = this.quality;
		if (isNaN(iterations) || iterations < 1) iterations = 1;
		iterations |= 0;
		if (iterations > 3) iterations = 3;
		if (iterations < 1) iterations = 1;

		let px = imageData.data;
		let x=0, y=0, i=0, p=0, yp=0, yi=0, yw=0, r=0, g=0, b=0, a=0, pr=0, pg=0, pb=0, pa=0;

		let divx = (radiusX + radiusX + 1) | 0;
		let divy = (radiusY + radiusY + 1) | 0;
		let w = imageData.width | 0;
		let h = imageData.height | 0;

		let w1 = (w - 1) | 0;
		let h1 = (h - 1) | 0;
		let rxp1 = (radiusX + 1) | 0;
		let ryp1 = (radiusY + 1) | 0;

		let ssx = {r:0,b:0,g:0,a:0};
		let sx = ssx;
		for ( i = 1; i < divx; i++ )
		{
			sx = sx.n = {r:0,b:0,g:0,a:0};
		}
		sx.n = ssx;

		let ssy = {r:0,b:0,g:0,a:0};
		let sy = ssy;
		for ( i = 1; i < divy; i++ )
		{
			sy = sy.n = {r:0,b:0,g:0,a:0};
		}
		sy.n = ssy;

		let si = null;


		let mtx = BlurFilter.MUL_TABLE[radiusX] | 0;
		let stx = BlurFilter.SHG_TABLE[radiusX] | 0;
		let mty = BlurFilter.MUL_TABLE[radiusY] | 0;
		let sty = BlurFilter.SHG_TABLE[radiusY] | 0;

		while (iterations-- > 0) {

			yw = yi = 0;
			let ms = mtx;
			let ss = stx;
			for (y = h; --y > -1;) {
				r = rxp1 * (pr = px[(yi) | 0]);
				g = rxp1 * (pg = px[(yi + 1) | 0]);
				b = rxp1 * (pb = px[(yi + 2) | 0]);
				a = rxp1 * (pa = px[(yi + 3) | 0]);

				sx = ssx;

				for( i = rxp1; --i > -1; )
				{
					sx.r = pr;
					sx.g = pg;
					sx.b = pb;
					sx.a = pa;
					sx = sx.n;
				}

				for( i = 1; i < rxp1; i++ )
				{
					p = (yi + ((w1 < i ? w1 : i) << 2)) | 0;
					r += ( sx.r = px[p]);
					g += ( sx.g = px[p+1]);
					b += ( sx.b = px[p+2]);
					a += ( sx.a = px[p+3]);

					sx = sx.n;
				}

				si = ssx;
				for ( x = 0; x < w; x++ )
				{
					px[yi++] = (r * ms) >>> ss;
					px[yi++] = (g * ms) >>> ss;
					px[yi++] = (b * ms) >>> ss;
					px[yi++] = (a * ms) >>> ss;

					p = ((yw + ((p = x + radiusX + 1) < w1 ? p : w1)) << 2);

					r -= si.r - ( si.r = px[p]);
					g -= si.g - ( si.g = px[p+1]);
					b -= si.b - ( si.b = px[p+2]);
					a -= si.a - ( si.a = px[p+3]);

					si = si.n;

				}
				yw += w;
			}

			ms = mty;
			ss = sty;
			for (x = 0; x < w; x++) {
				yi = (x << 2) | 0;

				r = (ryp1 * (pr = px[yi])) | 0;
				g = (ryp1 * (pg = px[(yi + 1) | 0])) | 0;
				b = (ryp1 * (pb = px[(yi + 2) | 0])) | 0;
				a = (ryp1 * (pa = px[(yi + 3) | 0])) | 0;

				sy = ssy;
				for( i = 0; i < ryp1; i++ )
				{
					sy.r = pr;
					sy.g = pg;
					sy.b = pb;
					sy.a = pa;
					sy = sy.n;
				}

				yp = w;

				for( i = 1; i <= radiusY; i++ )
				{
					yi = ( yp + x ) << 2;

					r += ( sy.r = px[yi]);
					g += ( sy.g = px[yi+1]);
					b += ( sy.b = px[yi+2]);
					a += ( sy.a = px[yi+3]);

					sy = sy.n;

					if( i < h1 )
					{
						yp += w;
					}
				}

				yi = x;
				si = ssy;
				if ( iterations > 0 )
				{
					for ( y = 0; y < h; y++ )
					{
						p = yi << 2;
						px[p+3] = pa =(a * ms) >>> ss;
						if ( pa > 0 )
						{
							px[p]   = ((r * ms) >>> ss );
							px[p+1] = ((g * ms) >>> ss );
							px[p+2] = ((b * ms) >>> ss );
						} else {
							px[p] = px[p+1] = px[p+2] = 0
						}

						p = ( x + (( ( p = y + ryp1) < h1 ? p : h1 ) * w )) << 2;

						r -= si.r - ( si.r = px[p]);
						g -= si.g - ( si.g = px[p+1]);
						b -= si.b - ( si.b = px[p+2]);
						a -= si.a - ( si.a = px[p+3]);

						si = si.n;

						yi += w;
					}
				} else {
					for ( y = 0; y < h; y++ )
					{
						p = yi << 2;
						px[p+3] = pa =(a * ms) >>> ss;
						if ( pa > 0 )
						{
							pa = 255 / pa;
							px[p]   = ((r * ms) >>> ss ) * pa;
							px[p+1] = ((g * ms) >>> ss ) * pa;
							px[p+2] = ((b * ms) >>> ss ) * pa;
						} else {
							px[p] = px[p+1] = px[p+2] = 0
						}

						p = ( x + (( ( p = y + ryp1) < h1 ? p : h1 ) * w )) << 2;

						r -= si.r - ( si.r = px[p]);
						g -= si.g - ( si.g = px[p+1]);
						b -= si.b - ( si.b = px[p+2]);
						a -= si.a - ( si.a = px[p+3]);

						si = si.n;

						yi += w;
					}
				}
			}

		}
		return true;
	}

}

/**
 * Array of multiply values for blur calculations.
 * @type {Array}
 * @protected
 * @readonly
 * @static
 */
BlurFilter.MUL_TABLE = [1, 171, 205, 293, 57, 373, 79, 137, 241, 27, 391, 357, 41, 19, 283, 265, 497, 469, 443, 421, 25, 191, 365, 349, 335, 161, 155, 149, 9, 278, 269, 261, 505, 245, 475, 231, 449, 437, 213, 415, 405, 395, 193, 377, 369, 361, 353, 345, 169, 331, 325, 319, 313, 307, 301, 37, 145, 285, 281, 69, 271, 267, 263, 259, 509, 501, 493, 243, 479, 118, 465, 459, 113, 446, 55, 435, 429, 423, 209, 413, 51, 403, 199, 393, 97, 3, 379, 375, 371, 367, 363, 359, 355, 351, 347, 43, 85, 337, 333, 165, 327, 323, 5, 317, 157, 311, 77, 305, 303, 75, 297, 294, 73, 289, 287, 71, 141, 279, 277, 275, 68, 135, 67, 133, 33, 262, 260, 129, 511, 507, 503, 499, 495, 491, 61, 121, 481, 477, 237, 235, 467, 232, 115, 457, 227, 451, 7, 445, 221, 439, 218, 433, 215, 427, 425, 211, 419, 417, 207, 411, 409, 203, 202, 401, 399, 396, 197, 49, 389, 387, 385, 383, 95, 189, 47, 187, 93, 185, 23, 183, 91, 181, 45, 179, 89, 177, 11, 175, 87, 173, 345, 343, 341, 339, 337, 21, 167, 83, 331, 329, 327, 163, 81, 323, 321, 319, 159, 79, 315, 313, 39, 155, 309, 307, 153, 305, 303, 151, 75, 299, 149, 37, 295, 147, 73, 291, 145, 289, 287, 143, 285, 71, 141, 281, 35, 279, 139, 69, 275, 137, 273, 17, 271, 135, 269, 267, 133, 265, 33, 263, 131, 261, 130, 259, 129, 257, 1];
/**
 * Array of shift values for blur calculations.
 * @type {Array}
 * @protected
 * @static
 */
BlurFilter.SHG_TABLE = [0, 9, 10, 11, 9, 12, 10, 11, 12, 9, 13, 13, 10, 9, 13, 13, 14, 14, 14, 14, 10, 13, 14, 14, 14, 13, 13, 13, 9, 14, 14, 14, 15, 14, 15, 14, 15, 15, 14, 15, 15, 15, 14, 15, 15, 15, 15, 15, 14, 15, 15, 15, 15, 15, 15, 12, 14, 15, 15, 13, 15, 15, 15, 15, 16, 16, 16, 15, 16, 14, 16, 16, 14, 16, 13, 16, 16, 16, 15, 16, 13, 16, 15, 16, 14, 9, 16, 16, 16, 16, 16, 16, 16, 16, 16, 13, 14, 16, 16, 15, 16, 16, 10, 16, 15, 16, 14, 16, 16, 14, 16, 16, 14, 16, 16, 14, 15, 16, 16, 16, 14, 15, 14, 15, 13, 16, 16, 15, 17, 17, 17, 17, 17, 17, 14, 15, 17, 17, 16, 16, 17, 16, 15, 17, 16, 17, 11, 17, 16, 17, 16, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 16, 17, 17, 17, 16, 14, 17, 17, 17, 17, 15, 16, 14, 16, 15, 16, 13, 16, 15, 16, 14, 16, 15, 16, 12, 16, 15, 16, 17, 17, 17, 17, 17, 13, 16, 15, 17, 17, 17, 16, 15, 17, 17, 17, 16, 15, 17, 17, 14, 16, 17, 17, 16, 17, 17, 16, 15, 17, 16, 14, 17, 16, 15, 17, 16, 17, 17, 16, 17, 15, 16, 17, 14, 17, 16, 15, 17, 16, 17, 13, 17, 16, 17, 17, 16, 17, 14, 17, 16, 17, 16, 17, 16, 17, 9];


/***/ }),

/***/ "./node_modules/@createjs/easeljs/src/filters/ColorFilter.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@createjs/easeljs/src/filters/ColorFilter.js ***!
  \*******************************************************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => /* binding */ ColorFilter
/* harmony export */ });
/* harmony import */ var _Filter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Filter */ "./node_modules/@createjs/easeljs/src/filters/Filter.js");
/**
 * @license ColorFilter
 * Visit http://createjs.com/ for documentation, updates and examples.
 *
 * Copyright (c) 2017 gskinner.com, inc.
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */



/**
 * Applies a color transform to DisplayObjects.
 *
 * @memberof easeljs
 * @extends easeljs.Filter
 * @example
 * let shape = new Shape().set({ x: 100, y: 100 });
 * shape.graphics.beginFill("#ff0000").drawCircle(0,0,50);
 * shape.filters = [ new ColorFilter(0,0,0,1, 0,0,255,0) ];
 * shape.cache(-50, -50, 100, 100);
 *
 * @param {Number} [redMultiplier=1] The amount to multiply against the red channel. This is a range between 0 and 1.
 * @param {Number} [greenMultiplier=1] The amount to multiply against the green channel. This is a range between 0 and 1.
 * @param {Number} [blueMultiplier=1] The amount to multiply against the blue channel. This is a range between 0 and 1.
 * @param {Number} [alphaMultiplier=1] The amount to multiply against the alpha channel. This is a range between 0 and 1.
 * @param {Number} [redOffset=0] The amount to add to the red channel after it has been multiplied. This is a range
 * between -255 and 255.
 * @param {Number} [greenOffset=0] The amount to add to the green channel after it has been multiplied. This is a range
 * between -255 and 255.
 * @param {Number} [blueOffset=0] The amount to add to the blue channel after it has been multiplied. This is a range
 * between -255 and 255.
 * @param {Number} [alphaOffset=0] The amount to add to the alpha channel after it has been multiplied. This is a range
 * between -255 and 255.
 */
class ColorFilter extends _Filter__WEBPACK_IMPORTED_MODULE_0__.default {

	constructor (redMultiplier = 1, greenMultiplier = 1, blueMultiplier = 1, alphaMultiplier = 1, redOffset = 0, greenOffset = 0, blueOffset = 0, alphaOffset = 0) {
		super();

		/**
		 * Red channel multiplier.
		 * @type {Number}
		 */
		this.redMultiplier = redMultiplier;

		/**
		 * Green channel multiplier.
		 * @type {Number}
		 */
		this.greenMultiplier = greenMultiplier;

		/**
		 * Blue channel multiplier.
		 * @type {Number}
		 */
		this.blueMultiplier = blueMultiplier;

		/**
		 * Alpha channel multiplier.
		 * @type {Number}
		 */
		this.alphaMultiplier = alphaMultiplier;

		/**
		 * Red channel offset (added to value).
		 * @type {Number}
		 */
		this.redOffset = redOffset;

		/**
		 * Green channel offset (added to value).
		 * @type {Number}
		 */
		this.greenOffset = greenOffset;

		/**
		 * Blue channel offset (added to value).
		 * @type {Number}
		 */
		this.blueOffset = blueOffset;

		/**
		 * Alpha channel offset (added to value).
		 * @type {Number}
		 */
		this.alphaOffset = alphaOffset;

		this.FRAG_SHADER_BODY = `
			uniform vec4 uColorMultiplier;
			uniform vec4 uColorOffset;

			void main (void) {
				vec4 color = texture2D(uSampler, vRenderCoord);

				gl_FragColor = (color * uColorMultiplier) + uColorOffset;
			}
		`;

	}

	shaderParamSetup (gl, stage, shaderProgram) {
		gl.uniform4f(
			gl.getUniformLocation(shaderProgram, "uColorMultiplier"),
			this.redMultiplier, this.greenMultiplier, this.blueMultiplier, this.alphaMultiplier
		);

		gl.uniform4f(
			gl.getUniformLocation(shaderProgram, "uColorOffset"),
			this.redOffset/255, this.greenOffset/255, this.blueOffset/255, this.alphaOffset/255
		);
	}

	/**
	 * @return {easeljs.ColorFilter}
	 */
	clone () {
		return new ColorFilter(
			this.redMultiplier, this.greenMultiplier, this.blueMultiplier, this.alphaMultiplier,
			this.redOffset, this.greenOffset, this.blueOffset, this.alphaOffset
		);
	}

	_applyFilter (imageData) {
		let data = imageData.data;
		const l = data.length;
		for (let i=0; i<l; i+=4) {
			data[i] = data[i]*this.redMultiplier+this.redOffset;
			data[i+1] = data[i+1]*this.greenMultiplier+this.greenOffset;
			data[i+2] = data[i+2]*this.blueMultiplier+this.blueOffset;
			data[i+3] = data[i+3]*this.alphaMultiplier+this.alphaOffset;
		}
		return true;
	}

}


/***/ }),

/***/ "./node_modules/@createjs/easeljs/src/filters/ColorMatrix.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@createjs/easeljs/src/filters/ColorMatrix.js ***!
  \*******************************************************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => /* binding */ ColorMatrix
/* harmony export */ });
/**
 * @license ColorMatrix
 * Visit http://createjs.com/ for documentation, updates and examples.
 *
 * Copyright (c) 2017 gskinner.com, inc.
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Provides helper functions for assembling a matrix for use with the {@link easeljs.ColorMatrixFilter}.
 * Most methods return the instance to facilitate chained calls.
 *
 * @memberof easeljs
 * @example
 * colorMatrix.adjustHue(20).adjustBrightness(50);
 *
 * @param {Number} brightness
 * @param {Number} contrast
 * @param {Number} saturation
 * @param {Number} hue
 */
class ColorMatrix {

	constructor (brightness, contrast, saturation, hue) {
		this.setColor(brightness, contrast, saturation, hue);
	}

	/**
	 * Resets the instance with the specified values.
	 * @param {Number} brightness
	 * @param {Number} contrast
	 * @param {Number} saturation
	 * @param {Number} hue
	 * @return {easeljs.ColorMatrix} The ColorMatrix instance the method is called on (useful for chaining calls.)
	 * @chainable
	 */
	setColor (brightness, contrast, saturation, hue) {
		return this.reset().adjustColor(brightness, contrast, saturation, hue);
	}

	/**
	 * Resets the matrix to identity values.
	 * @return {easeljs.ColorMatrix} The ColorMatrix instance the method is called on (useful for chaining calls.)
	 * @chainable
	 */
	reset () {
		return this.copy(ColorMatrix.IDENTITY_MATRIX);
	}

	/**
	 * Shortcut method to adjust brightness, contrast, saturation and hue. Equivalent to calling adjustHue(hue), adjustContrast(contrast),
	 * adjustBrightness(brightness), adjustSaturation(saturation), in that order.
	 * @param {Number} brightness
	 * @param {Number} contrast
	 * @param {Number} saturation
	 * @param {Number} hue
	 * @return {easeljs.ColorMatrix} The ColorMatrix instance the method is called on (useful for chaining calls.)
	 * @chainable
	 */
	adjustColor (brightness, contrast, saturation, hue) {
		return this.adjustBrightness(brightness).adjustContrast(contrast).adjustSaturation(saturation).adjustHue(hue);
	}

	/**
	 * Adjusts the brightness of pixel color by adding the specified value to the red, green and blue channels.
	 * Positive values will make the image brighter, negative values will make it darker.
	 * @param {Number} value A value between -255 & 255 that will be added to the RGB channels.
	 * @return {easeljs.ColorMatrix} The ColorMatrix instance the method is called on (useful for chaining calls.)
	 * @chainable
	 */
	adjustBrightness (value) {
		if (value === 0 || isNaN(value)) { return this; }
		value = this._cleanValue(value, 255);
		this._multiplyMatrix([
			1,0,0,0,value,
			0,1,0,0,value,
			0,0,1,0,value,
			0,0,0,1,0,
			0,0,0,0,1
		]);
		return this;
	}

	/**
	 * Adjusts the contrast of pixel color.
	 * Positive values will increase contrast, negative values will decrease contrast.
	 * @param {Number} value A value between -100 & 100.
	 * @return {easeljs.ColorMatrix} The ColorMatrix instance the method is called on (useful for chaining calls.)
	 * @chainable
	 */
	adjustContrast (value) {
		if (value === 0 || isNaN(value)) { return this; }
		value = this._cleanValue(value, 100);
		let x;
		if (value<0) {
			x = 127+value/100*127;
		} else {
			x = value%1;
			if (x === 0) {
				x = ColorMatrix.DELTA_INDEX[value];
			} else {
				x = ColorMatrix.DELTA_INDEX[(value<<0)]*(1-x)+ColorMatrix.DELTA_INDEX[(value<<0)+1]*x; // use linear interpolation for more granularity.
			}
			x = x*127+127;
		}
		this._multiplyMatrix([
			x/127,0,0,0,0.5*(127-x),
			0,x/127,0,0,0.5*(127-x),
			0,0,x/127,0,0.5*(127-x),
			0,0,0,1,0,
			0,0,0,0,1
		]);
		return this;
	}

	/**
	 * Adjusts the color saturation of the pixel.
	 * Positive values will increase saturation, negative values will decrease saturation (trend towards greyscale).
	 * @param {Number} value A value between -100 & 100.
	 * @return {easeljs.ColorMatrix} The ColorMatrix instance the method is called on (useful for chaining calls.)
	 * @chainable
	 */
	adjustSaturation (value) {
		if (value === 0 || isNaN(value)) { return this; }
		value = this._cleanValue(value, 100);
		let x = 1+((value > 0) ? 3*value/100 : value/100);
		let lumR = 0.3086;
		let lumG = 0.6094;
		let lumB = 0.0820;
		this._multiplyMatrix([
			lumR*(1-x)+x,lumG*(1-x),lumB*(1-x),0,0,
			lumR*(1-x),lumG*(1-x)+x,lumB*(1-x),0,0,
			lumR*(1-x),lumG*(1-x),lumB*(1-x)+x,0,0,
			0,0,0,1,0,
			0,0,0,0,1
		]);
		return this;
	}


	/**
	 * Adjusts the hue of the pixel color.
	 * @param {Number} value A value between -180 & 180.
	 * @return {easeljs.ColorMatrix} The ColorMatrix instance the method is called on (useful for chaining calls.)
	 * @chainable
	 */
	adjustHue (value) {
		if (value === 0 || isNaN(value)) { return this; }
		value = this._cleanValue(value, 180)/180*Math.PI;
		let cosVal = Math.cos(value);
		let sinVal = Math.sin(value);
		let lumR = 0.213;
		let lumG = 0.715;
		let lumB = 0.072;
		this._multiplyMatrix([
			lumR+cosVal*(1-lumR)+sinVal*(-lumR),lumG+cosVal*(-lumG)+sinVal*(-lumG),lumB+cosVal*(-lumB)+sinVal*(1-lumB),0,0,
			lumR+cosVal*(-lumR)+sinVal*(0.143),lumG+cosVal*(1-lumG)+sinVal*(0.140),lumB+cosVal*(-lumB)+sinVal*(-0.283),0,0,
			lumR+cosVal*(-lumR)+sinVal*(-(1-lumR)),lumG+cosVal*(-lumG)+sinVal*(lumG),lumB+cosVal*(1-lumB)+sinVal*(lumB),0,0,
			0,0,0,1,0,
			0,0,0,0,1
		]);
		return this;
	}

	/**
	 * Concatenates (multiplies) the specified matrix with this one.
	 * @param {Array} matrix An array or ColorMatrix instance.
	 * @return {easeljs.ColorMatrix} The ColorMatrix instance the method is called on (useful for chaining calls.)
	 * @chainable
	 */
	concat (matrix) {
		matrix = this._fixMatrix(matrix);
		if (matrix.length != ColorMatrix.LENGTH) { return this; }
		this._multiplyMatrix(matrix);
		return this;
	}

	/**
	 * @return {easeljs.ColorMatrix} A clone of this ColorMatrix.
	 */
	clone () {
		return (new ColorMatrix()).copy(this);
	}

	/**
	 * Return a length 25 (5x5) array instance containing this matrix's values.
	 * @return {Array} An array holding this matrix's values.
	 */
	toArray () {
		const arr = [];
		const l = ColorMatrix.LENGTH;
		for (let i=0; i<l; i++) {
			arr[i] = this[i];
		}
		return arr;
	}

	/**
	 * Copy the specified matrix's values to this matrix.
	 * @param {Array | easeljs.ColorMatrix} matrix An array or ColorMatrix instance.
	 * @return {easeljs.ColorMatrix} The ColorMatrix instance the method is called on (useful for chaining calls.)
	 * @chainable
	 */
	copy (matrix) {
		const l = ColorMatrix.LENGTH;
		for (let i=0;i<l;i++) {
			this[i] = matrix[i];
		}
		return this;
	}

	/**
	 * Returns a string representation of this object.
	 * @return {String} a string representation of the instance.
	 */
	toString () {
		return `[${this.constructor.name}]`;
	}

	/**
	 * @param {Array} matrix
	 * @protected
	 */
	_multiplyMatrix (matrix) {
		let col = [];

		for (let i=0;i<5;i++) {
			for (let j=0;j<5;j++) {
				col[j] = this[j+i*5];
			}
			for (let j=0;j<5;j++) {
				let val=0;
				for (let k=0;k<5;k++) {
					val += matrix[j+k*5]*col[k];
				}
				this[j+i*5] = val;
			}
		}
	}

	/**
	 * Make sure values are within the specified range, hue has a limit of 180, brightness is 255, others are 100.
	 * @param {Number} value The raw number
	 * @param {Number} limit The maximum that the number can be. The minimum is the limit * -1.
	 * @protected
	 */
	_cleanValue (value, limit) {
		return Math.min(limit, Math.max(-limit, value));
	}

	/**
	 * Makes sure matrixes are 5x5 (25 long).
	 * @param {Array} matrix
	 * @protected
	 */
	_fixMatrix (matrix) {
		if (matrix instanceof ColorMatrix) { matrix = matrix.toArray(); }
		if (matrix.length < ColorMatrix.LENGTH) {
			matrix = matrix.slice(0, matrix.length).concat(ColorMatrix.IDENTITY_MATRIX.slice(matrix.length, ColorMatrix.LENGTH));
		} else if (matrix.length > ColorMatrix.LENGTH) {
			matrix = matrix.slice(0, ColorMatrix.LENGTH);
		}
		return matrix;
	}

}

/**
 * Array of delta values for contrast calculations.
 * @type {Array<Number>}
 * @protected
 * @readonly
 * @static
 */
ColorMatrix.DELTA_INDEX = Object.freeze([
 	0,    0.01, 0.02, 0.04, 0.05, 0.06, 0.07, 0.08, 0.1,  0.11,
 	0.12, 0.14, 0.15, 0.16, 0.17, 0.18, 0.20, 0.21, 0.22, 0.24,
 	0.25, 0.27, 0.28, 0.30, 0.32, 0.34, 0.36, 0.38, 0.40, 0.42,
 	0.44, 0.46, 0.48, 0.5,  0.53, 0.56, 0.59, 0.62, 0.65, 0.68,
 	0.71, 0.74, 0.77, 0.80, 0.83, 0.86, 0.89, 0.92, 0.95, 0.98,
 	1.0,  1.06, 1.12, 1.18, 1.24, 1.30, 1.36, 1.42, 1.48, 1.54,
 	1.60, 1.66, 1.72, 1.78, 1.84, 1.90, 1.96, 2.0,  2.12, 2.25,
 	2.37, 2.50, 2.62, 2.75, 2.87, 3.0,  3.2,  3.4,  3.6,  3.8,
 	4.0,  4.3,  4.7,  4.9,  5.0,  5.5,  6.0,  6.5,  6.8,  7.0,
 	7.3,  7.5,  7.8,  8.0,  8.4,  8.7,  9.0,  9.4,  9.6,  9.8,
 	10.0
]);
/**
 * Identity matrix values.
 * @type {Array<Number>}
 * @protected
 * @readonly
 * @static
 */
ColorMatrix.IDENTITY_MATRIX = Object.freeze([
 	1,0,0,0,0,
 	0,1,0,0,0,
 	0,0,1,0,0,
 	0,0,0,1,0,
 	0,0,0,0,1
]);
/**
 * The constant length of a color matrix.
 * @type {Number}
 * @protected
 * @readonly
 * @static
 */
ColorMatrix.LENGTH = 25;


/***/ }),

/***/ "./node_modules/@createjs/easeljs/src/filters/ColorMatrixFilter.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@createjs/easeljs/src/filters/ColorMatrixFilter.js ***!
  \*************************************************************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => /* binding */ ColorMatrixFilter
/* harmony export */ });
/* harmony import */ var _Filter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Filter */ "./node_modules/@createjs/easeljs/src/filters/Filter.js");
/**
 * @license ColorMatrixFilter
 * Visit http://createjs.com/ for documentation, updates and examples.
 *
 * Copyright (c) 2017 gskinner.com, inc.
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */



/**
 * Allows you to carry out complex color operations such as modifying saturation, brightness, or inverting. See the
 * {@link easeljs.ColorMatrix} for more information on changing colors. For an easier color transform,
 * consider the {@link easeljs.ColorFilter}.
 *
 *
 * @memberof easeljs
 * @extends easeljs.Filter
 * @example
 * let shape = new Shape().set({ x: 100, y: 100 });
 * shape.graphics.beginFill("#ff0000").drawCircle(0, 0, 50);
 * let matrix = new ColorMatrix().adjustHue(180).adjustSaturation(100);
 * shape.filters = [ new ColorMatrixFilter(matrix) ];
 * shape.cache(-50, -50, 100, 100);
 *
 * @param {Array | easeljs.ColorMatrix} matrix A 4x5 matrix describing the color operation to perform.
 */
class ColorMatrixFilter extends _Filter__WEBPACK_IMPORTED_MODULE_0__.default {

	constructor (matrix) {
		super();

		/**
		 * A 4x5 matrix describing the color operation to perform.
		 * @type {Array | easeljs.ColorMatrix}
		 */
		this.matrix = matrix;

		this.FRAG_SHADER_BODY = `
			uniform mat4 uColorMatrix;
			uniform vec4 uColorMatrixOffset;

			void main (void) {
				vec4 color = texture2D(uSampler, vRenderCoord);

				mat4 m = uColorMatrix;
				vec4 newColor = vec4(0,0,0,0);
				newColor.r = color.r*m[0][0] + color.g*m[0][1] + color.b*m[0][2] + color.a*m[0][3];
				newColor.g = color.r*m[1][0] + color.g*m[1][1] + color.b*m[1][2] + color.a*m[1][3];
				newColor.b = color.r*m[2][0] + color.g*m[2][1] + color.b*m[2][2] + color.a*m[2][3];
				newColor.a = color.r*m[3][0] + color.g*m[3][1] + color.b*m[3][2] + color.a*m[3][3];

				gl_FragColor = newColor + uColorMatrixOffset;
			}
		`;
	}

	shaderParamSetup (gl, stage, shaderProgram) {
		let mat = this.matrix;
		let colorMatrix = new Float32Array([
			mat[0],mat[1],mat[2],mat[3],
			mat[5],mat[6],mat[7],mat[8],
			mat[10],mat[11],mat[12],mat[13],
			mat[15],mat[16],mat[17],mat[18]
		]);

		gl.uniformMatrix4fv(
			gl.getUniformLocation(shaderProgram, "uColorMatrix"),
			false, colorMatrix
		);
		gl.uniform4f(
			gl.getUniformLocation(shaderProgram, "uColorMatrixOffset"),
			mat[4]/255, mat[9]/255, mat[14]/255, mat[19]/255
		);
	}

	/**
	 * @return {easeljs.ColorMatrixFilter}
	 */
	clone () {
		return new ColorMatrixFilter(this.matrix);
	}

	_applyFilter (imageData) {
		let data = imageData.data;
		const l = data.length;
		let r,g,b,a;
		let mtx = this.matrix;
		let m0 =  mtx[0],  m1 =  mtx[1],  m2 =  mtx[2],  m3 =  mtx[3],  m4 =  mtx[4];
		let m5 =  mtx[5],  m6 =  mtx[6],  m7 =  mtx[7],  m8 =  mtx[8],  m9 =  mtx[9];
		let m10 = mtx[10], m11 = mtx[11], m12 = mtx[12], m13 = mtx[13], m14 = mtx[14];
		let m15 = mtx[15], m16 = mtx[16], m17 = mtx[17], m18 = mtx[18], m19 = mtx[19];

		for (let i=0; i<l; i+=4) {
			r = data[i];
			g = data[i+1];
			b = data[i+2];
			a = data[i+3];
			data[i] = r*m0+g*m1+b*m2+a*m3+m4; // red
			data[i+1] = r*m5+g*m6+b*m7+a*m8+m9; // green
			data[i+2] = r*m10+g*m11+b*m12+a*m13+m14; // blue
			data[i+3] = r*m15+g*m16+b*m17+a*m18+m19; // alpha
		}

		return true;
	}

}


/***/ }),

/***/ "./node_modules/@createjs/easeljs/src/filters/Filter.js":
/*!**************************************************************!*\
  !*** ./node_modules/@createjs/easeljs/src/filters/Filter.js ***!
  \**************************************************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => /* binding */ Filter
/* harmony export */ });
/**
 * @license Filter
 * Visit http://createjs.com/ for documentation, updates and examples.
 *
 * Copyright (c) 2017 gskinner.com, inc.
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Base class that all filters should inherit from. Filters need to be applied to objects that have been cached using
 * the {@link easeljs.DisplayObject#cache} method. If an object changes, please cache it again, or use
 * {@link easeljs.DisplayObject#updateCache}. Note that the filters must be applied before caching.
 *
 * Note that each filter can implement a {@link easeljs.Filter#getBounds} method, which returns the
 * margins that need to be applied in order to fully display the filter. For example, the {@link easeljs.BlurFilter}
 * will cause an object to feather outwards, resulting in a margin around the shape.
 *
 * <h4>EaselJS Filters</h4>
 * EaselJS comes with a number of pre-built filters:
 * <ul>
 *   <li>{@link easeljs.AlphaMapFilter}: Map a greyscale image to the alpha channel of a display object</li>
 *   <li>{@link easeljs.AlphaMaskFilter}: Map an image's alpha channel to the alpha channel of a display object</li>
 *   <li>{@link easeljs.BlurFilter}: Apply vertical and horizontal blur to a display object</li>
 *   <li>{@link easeljs.ColorFilter}: Color transform a display object</li>
 *   <li>{@link easeljs.ColorMatrixFilter}: Transform an image using a {{#crossLink "ColorMatrix"}}{{/crossLink}}</li>
 * </ul>
 *
 * @memberof easeljs
 * @example
 * shape.filters = [
 *   new createjs.ColorFilter(0, 0, 0, 1, 255, 0, 0),
 *   new createjs.BlurFilter(5, 5, 10)
 * ];
 * shape.cache(0, 0, 100, 100);
 */
class Filter {

	constructor () {
		/**
		 * A flag stating that this filter uses a context draw mode and cannot be batched into imageData processing.
		 * @type {Boolean}
		 * @default false
		 */
		this.usesContext = false;

		/**
		 * Another filter that is required to act as part of this filter and created and managed under the hood.
		 * @private
		 * @type {easeljs.Filter}
		 * @default null
		 */
		this._multiPass = null;

		/**
		 * Pre-processing shader code, will be parsed before being fed in.
		 * This should be based upon StageGL.SHADER_VERTEX_BODY_REGULAR
		 * @virtual
		 * @type {String}
		 * @readonly
		 */
		this.VTX_SHADER_BODY = null;

		/**
		 * Pre-processing shader code, will be parsed before being fed in.
		 * This should be based upon StageGL.SHADER_FRAGMENT_BODY_REGULAR
		 * @virtual
		 * @type {String}
		 * @readonly
		 */
		this.FRAG_SHADER_BODY = null;
	}

	/**
	 * Provides padding values for this filter. That is, how much the filter will extend the visual bounds of an object it is applied to.
	 * @abstract
	 * @param {easeljs.Rectangle} [rect] If specified, the provided Rectangle instance will be expanded by the padding amounts and returned.
	 * @return {easeljs.Rectangle} If a `rect` param was provided, it is returned. If not, either a new rectangle with the padding values, or null if no padding is required for this filter.
	 */
	getBounds (rect) { }

	/**
	 * @virtual
	 * @abstract
	 * @param {WebGLContext} gl The context associated with the stage performing the render.
	 * @param {easeljs.StageGL} stage The stage instance that will be rendering.
	 * @param {ShaderProgram} shaderProgram The compiled shader that is going to be sued to perform the render.
	 */
	shaderParamSetup (gl, stage, shaderProgram) { }

	/**
	 * Applies the filter to the specified context.
	 * @param {CanvasRenderingContext2D} ctx The 2D context to use as the source.
	 * @param {Number} x The x position to use for the source rect.
	 * @param {Number} y The y position to use for the source rect.
	 * @param {Number} width The width to use for the source rect.
	 * @param {Number} height The height to use for the source rect.
	 * @param {CanvasRenderingContext2D} [targetCtx] The 2D context to draw the result to. Defaults to the context passed to ctx.
	 * @param {Number} [targetX] The x position to draw the result to. Defaults to the value passed to x.
	 * @param {Number} [targetY] The y position to draw the result to. Defaults to the value passed to y.
	 * @return {Boolean} If the filter was applied successfully.
	 */
	applyFilter (ctx, x, y, width, height, targetCtx, targetX, targetY) {
		// this is the default behaviour because most filters access pixel data. It is overridden when not needed.
		targetCtx = targetCtx || ctx;
		if (targetX == null) { targetX = x; }
		if (targetY == null) { targetY = y; }
		try {
			let imageData = ctx.getImageData(x, y, width, height);
			if (this._applyFilter(imageData)) {
				targetCtx.putImageData(imageData, targetX, targetY);
				return true;
			}
		} catch (e) {}
		return false;
	}

	/**
	 * Returns a string representation of this object.
	 * @return {String} a string representation of the instance.
	 */
	toString () {
		return `[${this.constructor.name}]`;
	}

	/**
	 * Returns a clone of this Filter instance.
	 * @return {easeljs.Filter} A clone of the current Filter instance.
	 */
	clone () {
		return new Filter();
	}

	/**
	 * @abstract
	 * @param {ImageData} imageData Target ImageData instance.
	 * @return {Boolean}
	 */
	_applyFilter (imageData) { }

}


/***/ }),

/***/ "./node_modules/@createjs/easeljs/src/geom/DisplayProps.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@createjs/easeljs/src/geom/DisplayProps.js ***!
  \*****************************************************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => /* binding */ DisplayProps
/* harmony export */ });
/* harmony import */ var _Matrix2D__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Matrix2D */ "./node_modules/@createjs/easeljs/src/geom/Matrix2D.js");
/**
 * @license DisplayProps
 * Visit http://createjs.com/ for documentation, updates and examples.
 *
 * Copyright (c) 2017 gskinner.com, inc.
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */



/**
 * Used for calculating and encapsulating display related properties.
 * @memberof easeljs
 * @param {Number} [visible] Visible value.
 * @param {Number} [alpha] Alpha value.
 * @param {Number} [shadow] A Shadow instance or null.
 * @param {Number} [compositeOperation] A compositeOperation value or null.
 * @param {Number} [matrix] A transformation matrix. Defaults to a new identity matrix.
 */
class DisplayProps {

	constructor (visible, alpha, shadow, compositeOperation, matrix) {
		this.setValues(visible, alpha, shadow, compositeOperation, matrix);

		// assigned in the setValues method.
		/**
		 * Property representing the alpha that will be applied to a display object.
		 * @property alpha
		 * @type {Number}
		 */

		/**
		 * Property representing the shadow that will be applied to a display object.
		 * @property shadow
		 * @type {easeljs.Shadow}
		 */

		/**
		 * Property representing the compositeOperation that will be applied to a display object.
		 * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Compositing}
		 * @property compositeOperation
		 * @type {String}
		 */

		/**
		 * Property representing the value for visible that will be applied to a display object.
		 * @property visible
		 * @type {Boolean}
		 */

		/**
		 * The transformation matrix that will be applied to a display object.
		 * @property matrix
		 * @type {easeljs.Matrix2D}
		 */
	}

	/**
	 * Reinitializes the instance with the specified values.
	 * @param {Number} [visible=true] Visible value.
	 * @param {Number} [alpha=1] Alpha value.
	 * @param {Number} [shadow] A Shadow instance or null.
	 * @param {Number} [compositeOperation] A compositeOperation value or null.
	 * @param {Number} [matrix] A transformation matrix. Defaults to an identity matrix.
	 * @return {easeljs.DisplayProps} This instance. Useful for chaining method calls.
	 * @chainable
	*/
	setValues (visible = true, alpha = 1, shadow, compositeOperation, matrix) {
		this.visible = visible;
		this.alpha = alpha;
		this.shadow = shadow;
		this.compositeOperation = compositeOperation;
		this.matrix = matrix || (this.matrix&&this.matrix.identity()) || new _Matrix2D__WEBPACK_IMPORTED_MODULE_0__.default();
		return this;
	}

	/**
	 * Appends the specified display properties. This is generally used to apply a child's properties its parent's.
	 * @param {Boolean} visible desired visible value
	 * @param {Number} alpha desired alpha value
	 * @param {easeljs.Shadow} shadow desired shadow value
	 * @param {String} compositeOperation desired composite operation value
	 * @param {easeljs.Matrix2D} [matrix] a Matrix2D instance
	 * @return {easeljs.DisplayProps} This instance. Useful for chaining method calls.
	 * @chainable
	*/
	append (visible, alpha, shadow, compositeOperation, matrix) {
		this.alpha *= alpha;
		this.shadow = shadow || this.shadow;
		this.compositeOperation = compositeOperation || this.compositeOperation;
		this.visible = this.visible && visible;
		matrix&&this.matrix.appendMatrix(matrix);
		return this;
	}

	/**
	 * Prepends the specified display properties. This is generally used to apply a parent's properties to a child's.
	 * For example, to get the combined display properties that would be applied to a child, you could use:
	 *
	 * @example
	 * let o = displayObject;
	 * let props = new DisplayProps();
	 * do {
	 * 	 // prepend each parent's props in turn:
	 * 	 props.prepend(o.visible, o.alpha, o.shadow, o.compositeOperation, o.getMatrix());
	 * } while (o = o.parent);
	 *
	 * @param {Boolean} visible desired visible value
	 * @param {Number} alpha desired alpha value
	 * @param {easeljs.Shadow} shadow desired shadow value
	 * @param {String} compositeOperation desired composite operation value
	 * @param {easeljs.Matrix2D} [matrix] a Matrix2D instance
	 * @return {easeljs.DisplayProps} This instance. Useful for chaining method calls.
	 * @chainable
	*/
	prepend (visible, alpha, shadow, compositeOperation, matrix) {
		this.alpha *= alpha;
		this.shadow = this.shadow || shadow;
		this.compositeOperation = this.compositeOperation || compositeOperation;
		this.visible = this.visible && visible;
		matrix&&this.matrix.prependMatrix(matrix);
		return this;
	}

	/**
	 * Resets this instance and its matrix to default values.
	 * @return {easeljs.DisplayProps} This instance. Useful for chaining method calls.
	 * @chainable
	*/
	identity () {
		this.visible = true;
		this.alpha = 1;
		this.shadow = this.compositeOperation = null;
		this.matrix.identity();
		return this;
	}

	/**
	 * Returns a clone of the DisplayProps instance. Clones the associated matrix.
	 * @return {easeljs.DisplayProps} a clone of the DisplayProps instance.
	 */
	clone () {
		return new DisplayProps(this.alpha, this.shadow, this.compositeOperation, this.visible, this.matrix.clone());
	}

}


/***/ }),

/***/ "./node_modules/@createjs/easeljs/src/geom/Matrix2D.js":
/*!*************************************************************!*\
  !*** ./node_modules/@createjs/easeljs/src/geom/Matrix2D.js ***!
  \*************************************************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => /* binding */ Matrix2D
/* harmony export */ });
/* harmony import */ var _Point__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Point */ "./node_modules/@createjs/easeljs/src/geom/Point.js");
/**
 * @license Matrix2D
 * Visit http://createjs.com/ for documentation, updates and examples.
 *
 * Copyright (c) 2017 gskinner.com, inc.
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */



/**
 * Represents an affine transformation matrix, and provides tools for constructing and concatenating matrices.
 *
 * <pre>
 * This matrix can be visualized as:
 *
 * 	[ a  c  tx
 * 	  b  d  ty
 * 	  0  0  1  ]
 *
 * Note the locations of b and c.
 * </pre>
 *
 * @param {Number} [a] Specifies the a property for the new matrix.
 * @param {Number} [b] Specifies the b property for the new matrix.
 * @param {Number} [c] Specifies the c property for the new matrix.
 * @param {Number} [d] Specifies the d property for the new matrix.
 * @param {Number} [tx] Specifies the tx property for the new matrix.
 * @param {Number} [ty] Specifies the ty property for the new matrix.
 */
class Matrix2D {

	constructor (a, b, c, d, tx, ty) {
		this.setValues(a, b, c, d, tx, ty);

		// assigned in the setValues method.
		/**
		 * Position (0, 0) in a 3x3 affine transformation matrix.
		 * @property a
		 * @type {Number}
		 */

		/**
		 * Position (0, 1) in a 3x3 affine transformation matrix.
		 * @property b
		 * @type {Number}
		 */

		/**
		 * Position (1, 0) in a 3x3 affine transformation matrix.
		 * @property c
		 * @type {Number}
		 */

		/**
		 * Position (1, 1) in a 3x3 affine transformation matrix.
		 * @property d
		 * @type {Number}
		 */

		/**
		 * Position (2, 0) in a 3x3 affine transformation matrix.
		 * @property tx
		 * @type {Number}
		 */

		/**
		 * Position (2, 1) in a 3x3 affine transformation matrix.
		 * @property ty
		 * @type {Number}
		 */
	}

	/**
	 * Sets the specified values on this instance.
	 * @param {Number} [a=1] Specifies the a property for the new matrix.
	 * @param {Number} [b=0] Specifies the b property for the new matrix.
	 * @param {Number} [c=0] Specifies the c property for the new matrix.
	 * @param {Number} [d=1] Specifies the d property for the new matrix.
	 * @param {Number} [tx=0] Specifies the tx property for the new matrix.
	 * @param {Number} [ty=0] Specifies the ty property for the new matrix.
	 * @return {Matrix2D} This instance. Useful for chaining method calls.
	 * @chainable
	*/
	setValues (a = 1, b = 0, c = 0, d = 1, tx = 0, ty = 0) {
		// don't forget to update docs in the constructor if these change:
		this.a = a;
		this.b = b;
		this.c = c;
		this.d = d;
		this.tx = tx;
		this.ty = ty;
		return this;
	}

	/**
	 * Appends the specified matrix properties to this matrix. All parameters are required.
	 * This is the equivalent of multiplying `(this matrix) * (specified matrix)`.
	 * @param {Number} a
	 * @param {Number} b
	 * @param {Number} c
	 * @param {Number} d
	 * @param {Number} tx
	 * @param {Number} ty
	 * @return {easeljs.Matrix2D} This matrix. Useful for chaining method calls.
	 * @chainable
	 */
	append (a, b, c, d, tx, ty) {
		let a1 = this.a;
		let b1 = this.b;
		let c1 = this.c;
		let d1 = this.d;
		if (a != 1 || b != 0 || c != 0 || d != 1) {
			this.a  = a1*a+c1*b;
			this.b  = b1*a+d1*b;
			this.c  = a1*c+c1*d;
			this.d  = b1*c+d1*d;
		}
		this.tx = a1*tx+c1*ty+this.tx;
		this.ty = b1*tx+d1*ty+this.ty;
		return this;
	};

	/**
	 * Prepends the specified matrix properties to this matrix.
	 * This is the equivalent of multiplying `(specified matrix) * (this matrix)`.
	 * @param {Number} a
	 * @param {Number} b
	 * @param {Number} c
	 * @param {Number} d
	 * @param {Number} tx
	 * @param {Number} ty
	 * @return {easeljs.Matrix2D} This matrix. Useful for chaining method calls.
	 * @chainable
	 */
	prepend (a, b, c, d, tx, ty) {
		let a1 = this.a;
		let c1 = this.c;
		let tx1 = this.tx;

		this.a  = a*a1+c*this.b;
		this.b  = b*a1+d*this.b;
		this.c  = a*c1+c*this.d;
		this.d  = b*c1+d*this.d;
		this.tx = a*tx1+c*this.ty+tx;
		this.ty = b*tx1+d*this.ty+ty;
		return this;
	}

	/**
	 * Appends the specified matrix to this matrix.
	 * This is the equivalent of multiplying `(this matrix) * (specified matrix)`.
	 * @param {easeljs.Matrix2D} matrix
	 * @return {easeljs.Matrix2D} This matrix. Useful for chaining method calls.
	 * @chainable
	 */
	appendMatrix (matrix) {
		return this.append(matrix.a, matrix.b, matrix.c, matrix.d, matrix.tx, matrix.ty);
	}

	/**
	 * Prepends the specified matrix to this matrix.
	 * This is the equivalent of multiplying `(specified matrix) * (this matrix)`.
	 *
	 * @example <caption>Calculate the combined transformation for a child object</caption>
	 * let o = displayObject;
	 * let mtx = o.getMatrix();
	 * while (o = o.parent) {
	 * 	 // prepend each parent's transformation in turn:
	 * 	 o.prependMatrix(o.getMatrix());
	 * }
	 *
	 * @param {easeljs.Matrix2D} matrix
	 * @return {easeljs.Matrix2D} This matrix. Useful for chaining method calls.
	 * @chainable
	 */
	prependMatrix (matrix) {
		return this.prepend(matrix.a, matrix.b, matrix.c, matrix.d, matrix.tx, matrix.ty);
	}

	/**
	 * Generates matrix properties from the specified display object transform properties, and appends them to this matrix.
	 *
	 * @example <caption>Generate a matrix representing the transformations of a display object</caption>
	 * let mtx = new Matrix2D();
	 * mtx.appendTransform(o.x, o.y, o.scaleX, o.scaleY, o.rotation);
	 *
	 * @param {Number} x
	 * @param {Number} y
	 * @param {Number} scaleX
	 * @param {Number} scaleY
	 * @param {Number} rotation
	 * @param {Number} skewX
	 * @param {Number} skewY
	 * @param {Number} [regX]
	 * @param {Number} [regY]
	 * @return {easeljs.Matrix2D} This matrix. Useful for chaining method calls.
	 * @chainable
	 */
	appendTransform (x, y, scaleX, scaleY, rotation, skewX, skewY, regX, regY) {
		let r, cos, sin;
		if (rotation%360) {
			r = rotation*Matrix2D.DEG_TO_RAD;
			cos = Math.cos(r);
			sin = Math.sin(r);
		} else {
			cos = 1;
			sin = 0;
		}

		if (skewX || skewY) {
			// TODO: can this be combined into a single append operation?
			skewX *= Matrix2D.DEG_TO_RAD;
			skewY *= Matrix2D.DEG_TO_RAD;
			this.append(Math.cos(skewY), Math.sin(skewY), -Math.sin(skewX), Math.cos(skewX), x, y);
			this.append(cos*scaleX, sin*scaleX, -sin*scaleY, cos*scaleY, 0, 0);
		} else {
			this.append(cos*scaleX, sin*scaleX, -sin*scaleY, cos*scaleY, x, y);
		}

		if (regX || regY) {
			// append the registration offset:
			this.tx -= regX*this.a+regY*this.c;
			this.ty -= regX*this.b+regY*this.d;
		}
		return this;
	}

	/**
	 * Generates matrix properties from the specified display object transform properties, and prepends them to this matrix.
	 *
	 * Note that the above example would not account for {@link easeljs.DisplayObject#transformMatrix} values.
	 * See {@link easeljs.Matrix2D#prependMatrix} for an example that does.
	 *
	 * @example <caption>Calculate the combined transformation for a child object</caption>
	 * let o = displayObject;
	 * let mtx = new Matrix2D();
	 * do  {
	 * 	 // prepend each parent's transformation in turn:
	 * 	 mtx.prependTransform(o.x, o.y, o.scaleX, o.scaleY, o.rotation, o.skewX, o.skewY, o.regX, o.regY);
	 * } while (o = o.parent);
	 *
	 * @param {Number} x
	 * @param {Number} y
	 * @param {Number} scaleX
	 * @param {Number} scaleY
	 * @param {Number} rotation
	 * @param {Number} skewX
	 * @param {Number} skewY
	 * @param {Number} [regX]
	 * @param {Number} [regY]
	 * @return {easeljs.Matrix2D} This matrix. Useful for chaining method calls.
	 */
	prependTransform (x, y, scaleX, scaleY, rotation, skewX, skewY, regX, regY) {
		let r, cos, sin;
		if (rotation%360) {
			r = rotation*Matrix2D.DEG_TO_RAD;
			cos = Math.cos(r);
			sin = Math.sin(r);
		} else {
			cos = 1;
			sin = 0;
		}

		if (regX || regY) {
			// prepend the registration offset:
			this.tx -= regX; this.ty -= regY;
		}
		if (skewX || skewY) {
			// TODO: can this be combined into a single prepend operation?
			skewX *= Matrix2D.DEG_TO_RAD;
			skewY *= Matrix2D.DEG_TO_RAD;
			this.prepend(cos*scaleX, sin*scaleX, -sin*scaleY, cos*scaleY, 0, 0);
			this.prepend(Math.cos(skewY), Math.sin(skewY), -Math.sin(skewX), Math.cos(skewX), x, y);
		} else {
			this.prepend(cos*scaleX, sin*scaleX, -sin*scaleY, cos*scaleY, x, y);
		}
		return this;
	}

	/**
	 * Applies a clockwise rotation transformation to the matrix.
	 * @param {Number} angle The angle to rotate by, in degrees. To use a value in radians, multiply it by `Math.PI/180`.
	 * @return {easeljs.Matrix2D} This matrix. Useful for chaining method calls.
	 * @chainable
	 */
	rotate (angle) {
		angle *= Matrix2D.DEG_TO_RAD;
		let cos = Math.cos(angle);
		let sin = Math.sin(angle);

		let a1 = this.a;
		let b1 = this.b;

		this.a = a1*cos+this.c*sin;
		this.b = b1*cos+this.d*sin;
		this.c = -a1*sin+this.c*cos;
		this.d = -b1*sin+this.d*cos;
		return this;
	}

	/**
	 * Applies a skew transformation to the matrix.
	 * @param {Number} skewX The amount to skew horizontally in degrees. To use a value in radians, multiply it by `Math.PI/180`.
	 * @param {Number} skewY The amount to skew vertically in degrees.
	 * @return {easeljs.Matrix2D} This matrix. Useful for chaining method calls.
	 * @chainable
	*/
	skew (skewX, skewY) {
		skewX *= Matrix2D.DEG_TO_RAD;
		skewY *= Matrix2D.DEG_TO_RAD;
		this.append(Math.cos(skewY), Math.sin(skewY), -Math.sin(skewX), Math.cos(skewX), 0, 0);
		return this;
	}

	/**
	 * Applies a scale transformation to the matrix.
	 * @param {Number} x The amount to scale horizontally. E.G. a value of 2 will double the size in the X direction, and 0.5 will halve it.
	 * @param {Number} y The amount to scale vertically.
	 * @return {easeljs.Matrix2D} This matrix. Useful for chaining method calls.
	 * @chainable
	 */
	scale (x, y) {
		this.a *= x;
		this.b *= x;
		this.c *= y;
		this.d *= y;
		//this.tx *= x;
		//this.ty *= y;
		return this;
	}

	/**
	 * Translates the matrix on the x and y axes.
	 * @param {Number} x
	 * @param {Number} y
	 * @return {easeljs.Matrix2D} This matrix. Useful for chaining method calls.
	 * @chainable
	 */
	translate (x, y) {
		this.tx += this.a*x + this.c*y;
		this.ty += this.b*x + this.d*y;
		return this;
	}

	/**
	 * Sets the properties of the matrix to those of an identity matrix (one that applies a null transformation).
	 * @return {easeljs.Matrix2D} This matrix. Useful for chaining method calls.
	 * @chainable
	 */
	identity () {
		this.a = this.d = 1;
		this.b = this.c = this.tx = this.ty = 0;
		return this;
	}

	/**
	 * Inverts the matrix, causing it to perform the opposite transformation.
	 * @return {easeljs.Matrix2D} This matrix. Useful for chaining method calls.
	 * @chainable
	 */
	invert () {
		let a1 = this.a;
		let b1 = this.b;
		let c1 = this.c;
		let d1 = this.d;
		let tx1 = this.tx;
		let n = a1*d1-b1*c1;

		this.a = d1/n;
		this.b = -b1/n;
		this.c = -c1/n;
		this.d = a1/n;
		this.tx = (c1*this.ty-d1*tx1)/n;
		this.ty = -(a1*this.ty-b1*tx1)/n;
		return this;
	}

	/**
	 * Returns true if the matrix is an identity matrix.
	 * @return {Boolean}
	 */
	isIdentity () {
		return this.tx === 0 && this.ty === 0 && this.a === 1 && this.b === 0 && this.c === 0 && this.d === 1;
	}

	/**
	 * Returns true if this matrix is equal to the specified matrix (all property values are equal).
	 * @param {easeljs.Matrix2D} matrix The matrix to compare.
	 * @return {Boolean}
	 */
	equals (matrix) {
		return this.tx === matrix.tx && this.ty === matrix.ty && this.a === matrix.a && this.b === matrix.b && this.c === matrix.c && this.d === matrix.d;
	}

	/**
	 * Transforms a point according to this matrix.
	 * @param {Number} x The x component of the point to transform.
	 * @param {Number} y The y component of the point to transform.
	 * @param {easeljs.Point | Object} [pt] An object to copy the result into. If omitted a generic object with x/y properties will be returned.
	 * @return {easeljs.Point} This matrix. Useful for chaining method calls.
	 */
	transformPoint (x, y, pt = new _Point__WEBPACK_IMPORTED_MODULE_0__.default()) {
		pt.x = x*this.a+y*this.c+this.tx;
		pt.y = x*this.b+y*this.d+this.ty;
		return pt;
	}

	/**
	 * Decomposes the matrix into transform properties (x, y, scaleX, scaleY, and rotation). Note that these values
	 * may not match the transform properties you used to generate the matrix, though they will produce the same visual
	 * results.
	 * @param {Object} [target] The object to apply the transform properties to. If null, then a new object will be returned.
	 * @return {Object} The target, or a new generic object with the transform properties applied.
	*/
	decompose (target = {}) {
		// TODO: it would be nice to be able to solve for whether the matrix can be decomposed into only scale/rotation even when scale is negative
		target.x = this.tx;
		target.y = this.ty;
		target.scaleX = Math.sqrt(this.a * this.a + this.b * this.b);
		target.scaleY = Math.sqrt(this.c * this.c + this.d * this.d);

		let skewX = Math.atan2(-this.c, this.d);
		let skewY = Math.atan2(this.b, this.a);

		let delta = Math.abs(1-skewX/skewY);
		if (delta < 0.00001) { // effectively identical, can use rotation:
			target.rotation = skewY/Matrix2D.DEG_TO_RAD;
			if (this.a < 0 && this.d >= 0) {
				target.rotation += (target.rotation <= 0) ? 180 : -180;
			}
			target.skewX = target.skewY = 0;
		} else {
			target.skewX = skewX/Matrix2D.DEG_TO_RAD;
			target.skewY = skewY/Matrix2D.DEG_TO_RAD;
		}
		return target;
	}

	/**
	 * Copies all properties from the specified matrix to this matrix.
	 * @param {easeljs.Matrix2D} matrix The matrix to copy properties from.
	 * @return {easeljs.Matrix2D} This matrix. Useful for chaining method calls.
	 * @chainable
	*/
	copy (matrix) {
		return this.setValues(matrix.a, matrix.b, matrix.c, matrix.d, matrix.tx, matrix.ty);
	}

	/**
	 * Returns a clone of the Matrix2D instance.
	 * @return {easeljs.Matrix2D} a clone of the Matrix2D instance.
	 */
	clone () {
		return new Matrix2D(this.a, this.b, this.c, this.d, this.tx, this.ty);
	}

	/**
	 * Returns a string representation of this object.
	 * @return {String} a string representation of the instance.
	 */
	toString () {
		return `[${this.constructor.name} (a=${this.a} b=${this.b} c=${this.c} d=${this.d} tx=${this.tx} ty=${this.ty})]`;
	}

}

/**
 * Multiplier for converting degrees to radians. Used internally by Matrix2D.
 * @static
 * @type {Number}
 * @readonly
 */
Matrix2D.DEG_TO_RAD = Math.PI/180;
/**
 * An identity matrix, representing a null transformation.
 * @static
 * @type {easeljs.Matrix2D}
 * @readonly
 */
Matrix2D.identity = new Matrix2D();


/***/ }),

/***/ "./node_modules/@createjs/easeljs/src/geom/Point.js":
/*!**********************************************************!*\
  !*** ./node_modules/@createjs/easeljs/src/geom/Point.js ***!
  \**********************************************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => /* binding */ Point
/* harmony export */ });
/**
 * @license Point
 * Visit http://createjs.com/ for documentation, updates and examples.
 *
 * Copyright (c) 2017 gskinner.com, inc.
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Represents a point on a 2 dimensional x / y coordinate system.
 *
 * @memberof easeljs
 * @example
 * let point = new Point(0, 100);
 *
 * @param {Number} [x] X position.
 * @param {Number} [y] Y position.
 */
class Point {

	constructor (x, y) {
		this.setValues(x, y);

		// assigned in the setValues method.
		/**
		 * X position.
		 * @property x
		 * @type {Number}
		 */

		/**
		 * Y position.
		 * @property y
		 * @type {Number}
		 */
	}

	/**
	 * Sets the specified values on this instance.
	 * @param {Number} [x=0] X position.
	 * @param {Number} [y=0] Y position.
	 * @return {easeljs.Point} This instance. Useful for chaining method calls.
	 * @chainable
	*/
	setValues (x = 0, y = 0) {
		this.x = x;
		this.y = y;
		return this;
	}

	/**
	 * Copies all properties from the specified point to this point.
	 * @param {easeljs.Point} point The point to copy properties from.
	 * @return {easeljs.Point} This point. Useful for chaining method calls.
	 * @chainable
	*/
	copy (point) {
		this.x = point.x;
		this.y = point.y;
		return this;
	}

	/**
	 * Returns a clone of the Point instance.
	 * @return {easeljs.Point} a clone of the Point instance.
	 */
	clone () {
		return new Point(this.x, this.y);
	}

	/**
	 * Returns a string representation of this object.
	 * @return {String} a string representation of the instance.
	 */
	toString () {
		return `[${this.constructor.name} (x=${this.x} y=${this.y})]`;
	}

}


/***/ }),

/***/ "./node_modules/@createjs/easeljs/src/geom/Rectangle.js":
/*!**************************************************************!*\
  !*** ./node_modules/@createjs/easeljs/src/geom/Rectangle.js ***!
  \**************************************************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => /* binding */ Rectangle
/* harmony export */ });
/**
 * @license Rectangle
 * Visit http://createjs.com/ for documentation, updates and examples.
 *
 * Copyright (c) 2017 gskinner.com, inc.
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Represents a rectangle as defined by the points (x, y) and (x+width, y+height).
 * Used by {@link easeljs.DisplayObjects#getBounds}.
 *
 * @memberof easeljs
 * @example
 * let rect = new Rectangle(0, 0, 100, 100);
 *
 * @param {Number} [x] X position.
 * @param {Number} [y] Y position.
 * @param {Number} [width] The width of the Rectangle.
 * @param {Number} [height] The height of the Rectangle.
 */
class Rectangle {

	constructor (x, y, width, height) {
		this.setValues(x, y, width, height);

		// assigned in the setValues method.
		/**
		 * X position.
		 * @property x
		 * @type {Number}
		 */

		/**
		 * Y position.
		 * @property y
		 * @type {Number}
		 */

		/**
		 * Width.
		 * @property width
		 * @type {Number}
		 */

		/**
		 * Height.
		 * @property height
		 * @type {Number}
		 */
	}

	/**
	 * Sets the specified values on this instance.
	 * @param {Number} [x=0] X position.
	 * @param {Number} [y=0] Y position.
	 * @param {Number} [width=0] The width of the Rectangle.
	 * @param {Number} [height=0] The height of the Rectangle.
	 * @return {easeljs.Rectangle} This instance. Useful for chaining method calls.
	 * @chainable
	*/
	setValues (x = 0, y = 0, width = 0, height = 0) {
		// don't forget to update docs in the constructor if these change:
		this.x = x;
		this.y = y;
		this.width = width;
		this.height = height;
		return this;
	}

	/**
	 * Extends the rectangle's bounds to include the described point or rectangle.
	 * @param {Number} x X position of the point or rectangle.
	 * @param {Number} y Y position of the point or rectangle.
	 * @param {Number} [width=0] The width of the rectangle.
	 * @param {Number} [height=0] The height of the rectangle.
	 * @return {easeljs.Rectangle} This instance. Useful for chaining method calls.
	 * @chainable
	*/
	extend (x, y, width = 0, height = 0) {
		if (x+width > this.x+this.width) { this.width = x+width-this.x; }
		if (y+height > this.y+this.height) { this.height = y+height-this.y; }
		if (x < this.x) { this.width += this.x-x; this.x = x; }
		if (y < this.y) { this.height += this.y-y; this.y = y; }
		return this;
	}

	/**
	 * Adds the specified padding to the rectangle's bounds.
	 * @param {Number} top
	 * @param {Number} left
	 * @param {Number} bottom
	 * @param {Number} right
	 * @return {easeljs.Rectangle} This instance. Useful for chaining method calls.
	 * @chainable
	*/
	pad (top, left, bottom, right) {
		this.x -= left;
		this.y -= top;
		this.width += left+right;
		this.height += top+bottom;
		return this;
	}

	/**
	 * Copies all properties from the specified rectangle to this rectangle.
	 * @param {easeljs.Rectangle} rectangle The rectangle to copy properties from.
	 * @return {easeljs.Rectangle} This rectangle. Useful for chaining method calls.
	 * @chainable
	*/
	copy (rect) {
		return this.setValues(rect.x, rect.y, rect.width, rect.height);
	}

	/**
	 * Returns true if this rectangle fully encloses the described point or rectangle.
	 * @param {Number} x X position of the point or rectangle.
	 * @param {Number} y Y position of the point or rectangle.
	 * @param {Number} [width=0] The width of the rectangle.
	 * @param {Number} [height=0] The height of the rectangle.
	 * @return {Boolean} True if the described point or rectangle is contained within this rectangle.
	*/
	contains (x, y, width = 0, height = 0) {
		return (x >= this.x && x+width <= this.x+this.width && y >= this.y && y+height <= this.y+this.height);
	}

	/**
	 * Returns a new rectangle which contains this rectangle and the specified rectangle.
	 * @param {easeljs.Rectangle} rect The rectangle to calculate a union with.
	 * @return {easeljs.Rectangle} A new rectangle describing the union.
	*/
	union (rect) {
		return this.clone().extend(rect.x, rect.y, rect.width, rect.height);
	}

	/**
	 * Returns a new rectangle which describes the intersection (overlap) of this rectangle and the specified rectangle,
	 * or null if they do not intersect.
	 * @param {easeljs.Rectangle} rect The rectangle to calculate an intersection with.
	 * @return {easeljs.Rectangle} A new rectangle describing the intersection or null.
	*/
	intersection (rect) {
		let x1 = rect.x, y1 = rect.y, x2 = x1+rect.width, y2 = y1+rect.height;
		if (this.x > x1) { x1 = this.x; }
		if (this.y > y1) { y1 = this.y; }
		if (this.x + this.width < x2) { x2 = this.x + this.width; }
		if (this.y + this.height < y2) { y2 = this.y + this.height; }
		return (x2 <= x1 || y2 <= y1) ? null : new Rectangle(x1, y1, x2-x1, y2-y1);
	}

	/**
	 * Returns true if the specified rectangle intersects (has any overlap) with this rectangle.
	 * @param {easeljs.Rectangle} rect The rectangle to compare.
	 * @return {Boolean} True if the rectangles intersect.
	*/
	intersects (rect) {
		return (rect.x <= this.x+this.width && this.x <= rect.x+rect.width && rect.y <= this.y+this.height && this.y <= rect.y + rect.height);
	}

	/**
	 * Returns true if the width or height are equal or less than 0.
	 * @return {Boolean} True if the rectangle is empty.
	*/
	isEmpty () {
		return this.width <= 0 || this.height <= 0;
	}

	/**
	 * Returns a clone of the Rectangle instance.
	 * @return {easeljs.Rectangle} a clone of the Rectangle instance.
	 */
	clone () {
		return new Rectangle(this.x, this.y, this.width, this.height);
	}

	/**
	 * Returns a string representation of this object.
	 * @return {String} a string representation of the instance.
	 */
	toString () {
		return `[${this.constructor.name} (x=${this.x} y=${this.y} width=${this.width} height=${this.height})]`;
	}

}


/***/ }),

/***/ "./node_modules/@createjs/easeljs/src/main.js":
/*!****************************************************!*\
  !*** ./node_modules/@createjs/easeljs/src/main.js ***!
  \****************************************************/
/*! namespace exports */
/*! export AlphaMapFilter [provided] [no usage info] [missing usage info prevents renaming] -> ./node_modules/@createjs/easeljs/src/filters/AlphaMapFilter.js .default */
/*! export AlphaMaskFilter [provided] [no usage info] [missing usage info prevents renaming] -> ./node_modules/@createjs/easeljs/src/filters/AlphaMaskFilter.js .default */
/*! export Bitmap [provided] [no usage info] [missing usage info prevents renaming] -> ./node_modules/@createjs/easeljs/src/display/Bitmap.js .default */
/*! export BitmapCache [provided] [no usage info] [missing usage info prevents renaming] -> ./node_modules/@createjs/easeljs/src/filters/BitmapCache.js .default */
/*! export BitmapText [provided] [no usage info] [missing usage info prevents renaming] -> ./node_modules/@createjs/easeljs/src/display/BitmapText.js .default */
/*! export BlurFilter [provided] [no usage info] [missing usage info prevents renaming] -> ./node_modules/@createjs/easeljs/src/filters/BlurFilter.js .default */
/*! export ButtonHelper [provided] [no usage info] [missing usage info prevents renaming] -> ./node_modules/@createjs/easeljs/src/ui/ButtonHelper.js .default */
/*! export ColorFilter [provided] [no usage info] [missing usage info prevents renaming] -> ./node_modules/@createjs/easeljs/src/filters/ColorFilter.js .default */
/*! export ColorMatrix [provided] [no usage info] [missing usage info prevents renaming] -> ./node_modules/@createjs/easeljs/src/filters/ColorMatrix.js .default */
/*! export ColorMatrixFilter [provided] [no usage info] [missing usage info prevents renaming] -> ./node_modules/@createjs/easeljs/src/filters/ColorMatrixFilter.js .default */
/*! export Container [provided] [no usage info] [missing usage info prevents renaming] -> ./node_modules/@createjs/easeljs/src/display/Container.js .default */
/*! export DOMElement [provided] [no usage info] [missing usage info prevents renaming] -> ./node_modules/@createjs/easeljs/src/display/DOMElement.js .default */
/*! export DisplayObject [provided] [no usage info] [missing usage info prevents renaming] -> ./node_modules/@createjs/easeljs/src/display/DisplayObject.js .default */
/*! export DisplayProps [provided] [no usage info] [missing usage info prevents renaming] -> ./node_modules/@createjs/easeljs/src/geom/DisplayProps.js .default */
/*! export Event [provided] [no usage info] [missing usage info prevents renaming] -> ./node_modules/@createjs/core/src/events/Event.js .default */
/*! export EventDispatcher [provided] [no usage info] [missing usage info prevents renaming] -> ./node_modules/@createjs/core/src/events/EventDispatcher.js .default */
/*! export Filter [provided] [no usage info] [missing usage info prevents renaming] -> ./node_modules/@createjs/easeljs/src/filters/Filter.js .default */
/*! export Graphics [provided] [no usage info] [missing usage info prevents renaming] -> ./node_modules/@createjs/easeljs/src/display/Graphics.js .default */
/*! export Matrix2D [provided] [no usage info] [missing usage info prevents renaming] -> ./node_modules/@createjs/easeljs/src/geom/Matrix2D.js .default */
/*! export MouseEvent [provided] [no usage info] [missing usage info prevents renaming] -> ./node_modules/@createjs/easeljs/src/events/MouseEvent.js .default */
/*! export MovieClip [provided] [no usage info] [missing usage info prevents renaming] -> ./node_modules/@createjs/easeljs/src/display/MovieClip.js .default */
/*! export Point [provided] [no usage info] [missing usage info prevents renaming] -> ./node_modules/@createjs/easeljs/src/geom/Point.js .default */
/*! export Rectangle [provided] [no usage info] [missing usage info prevents renaming] -> ./node_modules/@createjs/easeljs/src/geom/Rectangle.js .default */
/*! export Shadow [provided] [no usage info] [missing usage info prevents renaming] -> ./node_modules/@createjs/easeljs/src/display/Shadow.js .default */
/*! export Shape [provided] [no usage info] [missing usage info prevents renaming] -> ./node_modules/@createjs/easeljs/src/display/Shape.js .default */
/*! export Sprite [provided] [no usage info] [missing usage info prevents renaming] -> ./node_modules/@createjs/easeljs/src/display/Sprite.js .default */
/*! export SpriteSheet [provided] [no usage info] [missing usage info prevents renaming] -> ./node_modules/@createjs/easeljs/src/display/SpriteSheet.js .default */
/*! export SpriteSheetBuilder [provided] [no usage info] [missing usage info prevents renaming] -> ./node_modules/@createjs/easeljs/src/utils/SpriteSheetBuilder.js .default */
/*! export SpriteSheetUtils [provided] [no usage info] [missing usage info prevents renaming] -> ./node_modules/@createjs/easeljs/src/utils/SpriteSheetUtils.js .default */
/*! export Stage [provided] [no usage info] [missing usage info prevents renaming] -> ./node_modules/@createjs/easeljs/src/display/Stage.js .default */
/*! export StageGL [provided] [no usage info] [missing usage info prevents renaming] -> ./node_modules/@createjs/easeljs/src/display/StageGL.js .default */
/*! export Text [provided] [no usage info] [missing usage info prevents renaming] -> ./node_modules/@createjs/easeljs/src/display/Text.js .default */
/*! export Ticker [provided] [no usage info] [missing usage info prevents renaming] -> ./node_modules/@createjs/core/src/utils/Ticker.js .default */
/*! export Touch [provided] [no usage info] [missing usage info prevents renaming] -> ./node_modules/@createjs/easeljs/src/ui/Touch.js .default */
/*! export WebGLInspector [provided] [no usage info] [missing usage info prevents renaming] -> ./node_modules/@createjs/easeljs/src/utils/WebGLInspector.js .default */
/*! export createCanvas [provided] [no usage info] [missing usage info prevents renaming] -> ./node_modules/@createjs/easeljs/src/utils/Canvas.js .default */
/*! export uid [provided] [no usage info] [missing usage info prevents renaming] -> ./node_modules/@createjs/easeljs/src/utils/uid.js .default */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_exports__, __webpack_require__.d, __webpack_require__.r, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Event": () => /* reexport safe */ _createjs_core__WEBPACK_IMPORTED_MODULE_0__.Event,
/* harmony export */   "EventDispatcher": () => /* reexport safe */ _createjs_core__WEBPACK_IMPORTED_MODULE_0__.EventDispatcher,
/* harmony export */   "Ticker": () => /* reexport safe */ _createjs_core__WEBPACK_IMPORTED_MODULE_0__.Ticker,
/* harmony export */   "StageGL": () => /* reexport safe */ _display_StageGL__WEBPACK_IMPORTED_MODULE_1__.default,
/* harmony export */   "Stage": () => /* reexport safe */ _display_Stage__WEBPACK_IMPORTED_MODULE_2__.default,
/* harmony export */   "Container": () => /* reexport safe */ _display_Container__WEBPACK_IMPORTED_MODULE_3__.default,
/* harmony export */   "DisplayObject": () => /* reexport safe */ _display_DisplayObject__WEBPACK_IMPORTED_MODULE_4__.default,
/* harmony export */   "Bitmap": () => /* reexport safe */ _display_Bitmap__WEBPACK_IMPORTED_MODULE_5__.default,
/* harmony export */   "BitmapText": () => /* reexport safe */ _display_BitmapText__WEBPACK_IMPORTED_MODULE_6__.default,
/* harmony export */   "DOMElement": () => /* reexport safe */ _display_DOMElement__WEBPACK_IMPORTED_MODULE_7__.default,
/* harmony export */   "Graphics": () => /* reexport safe */ _display_Graphics__WEBPACK_IMPORTED_MODULE_8__.default,
/* harmony export */   "MovieClip": () => /* reexport safe */ _display_MovieClip__WEBPACK_IMPORTED_MODULE_9__.default,
/* harmony export */   "Shadow": () => /* reexport safe */ _display_Shadow__WEBPACK_IMPORTED_MODULE_10__.default,
/* harmony export */   "Shape": () => /* reexport safe */ _display_Shape__WEBPACK_IMPORTED_MODULE_11__.default,
/* harmony export */   "Sprite": () => /* reexport safe */ _display_Sprite__WEBPACK_IMPORTED_MODULE_12__.default,
/* harmony export */   "SpriteSheet": () => /* reexport safe */ _display_SpriteSheet__WEBPACK_IMPORTED_MODULE_13__.default,
/* harmony export */   "Text": () => /* reexport safe */ _display_Text__WEBPACK_IMPORTED_MODULE_14__.default,
/* harmony export */   "MouseEvent": () => /* reexport safe */ _events_MouseEvent__WEBPACK_IMPORTED_MODULE_15__.default,
/* harmony export */   "AlphaMapFilter": () => /* reexport safe */ _filters_AlphaMapFilter__WEBPACK_IMPORTED_MODULE_16__.default,
/* harmony export */   "AlphaMaskFilter": () => /* reexport safe */ _filters_AlphaMaskFilter__WEBPACK_IMPORTED_MODULE_17__.default,
/* harmony export */   "BitmapCache": () => /* reexport safe */ _filters_BitmapCache__WEBPACK_IMPORTED_MODULE_18__.default,
/* harmony export */   "BlurFilter": () => /* reexport safe */ _filters_BlurFilter__WEBPACK_IMPORTED_MODULE_19__.default,
/* harmony export */   "ColorFilter": () => /* reexport safe */ _filters_ColorFilter__WEBPACK_IMPORTED_MODULE_20__.default,
/* harmony export */   "ColorMatrix": () => /* reexport safe */ _filters_ColorMatrix__WEBPACK_IMPORTED_MODULE_21__.default,
/* harmony export */   "ColorMatrixFilter": () => /* reexport safe */ _filters_ColorMatrixFilter__WEBPACK_IMPORTED_MODULE_22__.default,
/* harmony export */   "Filter": () => /* reexport safe */ _filters_Filter__WEBPACK_IMPORTED_MODULE_23__.default,
/* harmony export */   "DisplayProps": () => /* reexport safe */ _geom_DisplayProps__WEBPACK_IMPORTED_MODULE_24__.default,
/* harmony export */   "Matrix2D": () => /* reexport safe */ _geom_Matrix2D__WEBPACK_IMPORTED_MODULE_25__.default,
/* harmony export */   "Point": () => /* reexport safe */ _geom_Point__WEBPACK_IMPORTED_MODULE_26__.default,
/* harmony export */   "Rectangle": () => /* reexport safe */ _geom_Rectangle__WEBPACK_IMPORTED_MODULE_27__.default,
/* harmony export */   "ButtonHelper": () => /* reexport safe */ _ui_ButtonHelper__WEBPACK_IMPORTED_MODULE_28__.default,
/* harmony export */   "Touch": () => /* reexport safe */ _ui_Touch__WEBPACK_IMPORTED_MODULE_29__.default,
/* harmony export */   "SpriteSheetBuilder": () => /* reexport safe */ _utils_SpriteSheetBuilder__WEBPACK_IMPORTED_MODULE_30__.default,
/* harmony export */   "SpriteSheetUtils": () => /* reexport safe */ _utils_SpriteSheetUtils__WEBPACK_IMPORTED_MODULE_31__.default,
/* harmony export */   "uid": () => /* reexport safe */ _utils_uid__WEBPACK_IMPORTED_MODULE_32__.default,
/* harmony export */   "createCanvas": () => /* reexport safe */ _utils_Canvas__WEBPACK_IMPORTED_MODULE_33__.default,
/* harmony export */   "WebGLInspector": () => /* reexport safe */ _utils_WebGLInspector__WEBPACK_IMPORTED_MODULE_34__.default
/* harmony export */ });
/* harmony import */ var _createjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @createjs/core */ "./node_modules/@createjs/core/src/main.js");
/* harmony import */ var _display_StageGL__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./display/StageGL */ "./node_modules/@createjs/easeljs/src/display/StageGL.js");
/* harmony import */ var _display_Stage__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./display/Stage */ "./node_modules/@createjs/easeljs/src/display/Stage.js");
/* harmony import */ var _display_Container__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./display/Container */ "./node_modules/@createjs/easeljs/src/display/Container.js");
/* harmony import */ var _display_DisplayObject__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./display/DisplayObject */ "./node_modules/@createjs/easeljs/src/display/DisplayObject.js");
/* harmony import */ var _display_Bitmap__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./display/Bitmap */ "./node_modules/@createjs/easeljs/src/display/Bitmap.js");
/* harmony import */ var _display_BitmapText__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./display/BitmapText */ "./node_modules/@createjs/easeljs/src/display/BitmapText.js");
/* harmony import */ var _display_DOMElement__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./display/DOMElement */ "./node_modules/@createjs/easeljs/src/display/DOMElement.js");
/* harmony import */ var _display_Graphics__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./display/Graphics */ "./node_modules/@createjs/easeljs/src/display/Graphics.js");
/* harmony import */ var _display_MovieClip__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./display/MovieClip */ "./node_modules/@createjs/easeljs/src/display/MovieClip.js");
/* harmony import */ var _display_Shadow__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./display/Shadow */ "./node_modules/@createjs/easeljs/src/display/Shadow.js");
/* harmony import */ var _display_Shape__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./display/Shape */ "./node_modules/@createjs/easeljs/src/display/Shape.js");
/* harmony import */ var _display_Sprite__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./display/Sprite */ "./node_modules/@createjs/easeljs/src/display/Sprite.js");
/* harmony import */ var _display_SpriteSheet__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./display/SpriteSheet */ "./node_modules/@createjs/easeljs/src/display/SpriteSheet.js");
/* harmony import */ var _display_Text__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./display/Text */ "./node_modules/@createjs/easeljs/src/display/Text.js");
/* harmony import */ var _events_MouseEvent__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./events/MouseEvent */ "./node_modules/@createjs/easeljs/src/events/MouseEvent.js");
/* harmony import */ var _filters_AlphaMapFilter__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./filters/AlphaMapFilter */ "./node_modules/@createjs/easeljs/src/filters/AlphaMapFilter.js");
/* harmony import */ var _filters_AlphaMaskFilter__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./filters/AlphaMaskFilter */ "./node_modules/@createjs/easeljs/src/filters/AlphaMaskFilter.js");
/* harmony import */ var _filters_BitmapCache__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./filters/BitmapCache */ "./node_modules/@createjs/easeljs/src/filters/BitmapCache.js");
/* harmony import */ var _filters_BlurFilter__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./filters/BlurFilter */ "./node_modules/@createjs/easeljs/src/filters/BlurFilter.js");
/* harmony import */ var _filters_ColorFilter__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./filters/ColorFilter */ "./node_modules/@createjs/easeljs/src/filters/ColorFilter.js");
/* harmony import */ var _filters_ColorMatrix__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./filters/ColorMatrix */ "./node_modules/@createjs/easeljs/src/filters/ColorMatrix.js");
/* harmony import */ var _filters_ColorMatrixFilter__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./filters/ColorMatrixFilter */ "./node_modules/@createjs/easeljs/src/filters/ColorMatrixFilter.js");
/* harmony import */ var _filters_Filter__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./filters/Filter */ "./node_modules/@createjs/easeljs/src/filters/Filter.js");
/* harmony import */ var _geom_DisplayProps__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./geom/DisplayProps */ "./node_modules/@createjs/easeljs/src/geom/DisplayProps.js");
/* harmony import */ var _geom_Matrix2D__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./geom/Matrix2D */ "./node_modules/@createjs/easeljs/src/geom/Matrix2D.js");
/* harmony import */ var _geom_Point__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./geom/Point */ "./node_modules/@createjs/easeljs/src/geom/Point.js");
/* harmony import */ var _geom_Rectangle__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./geom/Rectangle */ "./node_modules/@createjs/easeljs/src/geom/Rectangle.js");
/* harmony import */ var _ui_ButtonHelper__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./ui/ButtonHelper */ "./node_modules/@createjs/easeljs/src/ui/ButtonHelper.js");
/* harmony import */ var _ui_Touch__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./ui/Touch */ "./node_modules/@createjs/easeljs/src/ui/Touch.js");
/* harmony import */ var _utils_SpriteSheetBuilder__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./utils/SpriteSheetBuilder */ "./node_modules/@createjs/easeljs/src/utils/SpriteSheetBuilder.js");
/* harmony import */ var _utils_SpriteSheetUtils__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./utils/SpriteSheetUtils */ "./node_modules/@createjs/easeljs/src/utils/SpriteSheetUtils.js");
/* harmony import */ var _utils_uid__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./utils/uid */ "./node_modules/@createjs/easeljs/src/utils/uid.js");
/* harmony import */ var _utils_Canvas__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./utils/Canvas */ "./node_modules/@createjs/easeljs/src/utils/Canvas.js");
/* harmony import */ var _utils_WebGLInspector__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./utils/WebGLInspector */ "./node_modules/@createjs/easeljs/src/utils/WebGLInspector.js");
/**
 * The core classes of EaselJS.
 * @namespace easeljs
 *
 * @example
 * import { Stage, Shape } from "@createjs/easeljs";
 * const stage = new Stage("myCanvas");
 * const shape = new Shape();
 * shape.graphics.beginFill("red").drawCircle(0, 0, 50);
 * stage.addChild(shape);
 * stage.update();
 */

/**
 * README: Export Order
 *
 * Due to some classes having circular import bindings (whether at the top of the import chain or deeper in),
 * some exports here are in reverse order (such as Container being exported before DisplayObject).
 * This is explained here: https://github.com/rollup/rollup/issues/845#issuecomment-240277194
 */

// core


// display














// events

// filters








// geom




// ui


// utils







/***/ }),

/***/ "./node_modules/@createjs/easeljs/src/ui/ButtonHelper.js":
/*!***************************************************************!*\
  !*** ./node_modules/@createjs/easeljs/src/ui/ButtonHelper.js ***!
  \***************************************************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => /* binding */ ButtonHelper
/* harmony export */ });
/*
* @license ButtonHelper
* Visit http://createjs.com/ for documentation, updates and examples.
*
* Copyright (c) 2017 gskinner.com, inc.
*
* Permission is hereby granted, free of charge, to any person
* obtaining a copy of this software and associated documentation
* files (the "Software"), to deal in the Software without
* restriction, including without limitation the rights to use,
* copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the
* Software is furnished to do so, subject to the following
* conditions:
*
* The above copyright notice and this permission notice shall be
* included in all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
* OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
* HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
* OTHER DEALINGS IN THE SOFTWARE.
*/

/**
 * The ButtonHelper is a helper class to create interactive buttons from {@link easeljs.MovieClip} or
 * {@link easeljs.Sprite} instances. This class will intercept mouse events from an object, and
 * automatically call {@link easeljs.Sprite#gotoAndStop} or {@link easlejs.Sprite#gotoAndPlay},
 * to the respective animation labels, add a pointer cursor, and allows the user to define a hit state frame.
 *
 * The ButtonHelper instance does not need to be added to the stage, but a reference should be maintained to prevent
 * garbage collection.
 *
 * Note that over states will not work unless you call {@link easeljs.Stage#enableMouseOver}.
 *
 * @memberof easeljs
 * @example
 * let helper = new ButtonHelper(sprite, "out", "over", "down", false, sprite, "hit");
 * sprite.addEventListener("click", (evt) => {
 *   // clicked
 * }));
 *
 * @param {easeljs.Sprite | easeljs.MovieClip} target The instance to manage.
 * @param {String} [outLabel="out"] The label or animation to go to when the user rolls out of the button.
 * @param {String} [overLabel="over"] The label or animation to go to when the user rolls over the button.
 * @param {String} [downLabel="down"] The label or animation to go to when the user presses the button.
 * @param {Boolean} [play=false] If the helper should call "gotoAndPlay" or "gotoAndStop" on the button when changing
 * states.
 * @param {easeljs.DisplayObject} [hitArea] An optional item to use as the hit state for the button. If this is not defined,
 * then the button's visible states will be used instead. Note that the same instance as the "target" argument can be
 * used for the hitState.
 * @param {String} [hitLabel] The label or animation on the hitArea instance that defines the hitArea bounds. If this is
 * null, then the default state of the hitArea will be used.
 */
class ButtonHelper {

	constructor (target, outLabel = "out", overLabel = "over", downLabel = "down", play = false, hitArea, hitLabel) {
		if (!target.addEventListener) { return; }

		/**
		 * The target for this button helper.
		 * @type {easeljs.MovieClip | easeljs.Sprite}
		 * @readonly
		 */
		this.target = target;

		/**
		 * The label name or frame number to display when the user mouses out of the target.
		 * @default "over"
		 * @type {String | Number}
		 */
		this.overLabel = overLabel;

		/**
		 * The label name or frame number to display when the user mouses over the target.
		 * @default "out"
		 * @type {String | Number}
		 */
		this.outLabel = outLabel;

		/**
		 * The label name or frame number to display when the user presses on the target.
		 * @default "down"
		 * @type {String | Number}
		 */
		this.downLabel = downLabel == null;

		/**
		 * If true, then ButtonHelper will call gotoAndPlay, if false, it will use gotoAndStop.
		 * @default false
		 * @type {Boolean}
		 */
		this.play = play;

		/**
		 * @type {Boolean}
		 * @protected
		 */
		this._isPressed = false;

		/**
		 * @type {Boolean}
		 * @protected
		 */
		this._isOver = false;

		/**
		 * @type {Boolean}
		 * @protected
		 */
		this._enabled = false;

		target.mouseChildren = false; // prevents issues when children are removed from the display list when state changes.
		this.enabled = true;
		this.handleEvent({});
		if (hitArea) {
			if (hitLabel) {
				hitArea.actionsEnabled = false;
				hitArea.gotoAndStop&&hitArea.gotoAndStop(hitLabel);
			}
			target.hitArea = hitArea;
		}
	}

	/**
	 * Enables or disables the button functionality on the target.
	 * @type {Boolean}
	 */
	get enabled () { return this._enabled; }
	set enabled (enabled) {
		if (enabled === this._enabled) { return; }
		let o = this.target;
		this._enabled = enabled;
		if (enabled) {
			o.cursor = "pointer";
			o.addEventListener("rollover", this);
			o.addEventListener("rollout", this);
			o.addEventListener("mousedown", this);
			o.addEventListener("pressup", this);
			if (o._reset) { o.__reset = o._reset; o._reset = this._reset;}
		} else {
			o.cursor = null;
			o.removeEventListener("rollover", this);
			o.removeEventListener("rollout", this);
			o.removeEventListener("mousedown", this);
			o.removeEventListener("pressup", this);
			if (o.__reset) { o._reset = o.__reset; delete(o.__reset); }
		}
	}

	/**
	 * Returns a string representation of this object.
	 * @return {String} a string representation of the instance.
	 */
	toString () {
		return `[${this.constructor.name}]`;
	}

	/**
	 * @param {Object} evt The mouse event to handle.
	 * @protected
	 */
	handleEvent (evt) {
		let label, t = this.target, type = evt.type;
		if (type === "mousedown") {
			this._isPressed = true;
			label = this.downLabel;
		} else if (type === "pressup") {
			this._isPressed = false;
			label = this._isOver ? this.overLabel : this.outLabel;
		} else if (type === "rollover") {
			this._isOver = true;
			label = this._isPressed ? this.downLabel : this.overLabel;
		} else { // rollout and default
			this._isOver = false;
			label = this._isPressed ? this.overLabel : this.outLabel;
		}
		if (this.play) {
			t.gotoAndPlay&&t.gotoAndPlay(label);
		} else {
			t.gotoAndStop&&t.gotoAndStop(label);
		}
	}

	/**
	 * Injected into target. Preserves the paused state through a reset.
	 * @protected
	 */
	_reset () {
		// TODO: explore better ways to handle this issue. This is hacky & disrupts object signatures.
		let p = this.paused;
		this.__reset();
		this.paused = p;
	}

}


/***/ }),

/***/ "./node_modules/@createjs/easeljs/src/ui/Touch.js":
/*!********************************************************!*\
  !*** ./node_modules/@createjs/easeljs/src/ui/Touch.js ***!
  \********************************************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_exports__, __webpack_require__.r, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => __WEBPACK_DEFAULT_EXPORT__
/* harmony export */ });
/**
 * @license Touch
 * Visit http://createjs.com/ for documentation, updates and examples.
 *
 * Copyright (c) 2017 gskinner.com, inc.
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Global utility for working with multi-touch enabled devices in EaselJS. Currently supports W3C Touch API (iOS and
 * modern Android browser) and the Pointer API (IE), including ms-prefixed events in IE10, and unprefixed in IE11.
 *
 * Ensure that you {{#crossLink "Touch/disable"}}{{/crossLink}} touch when cleaning up your application. You do not have
 * to check if touch is supported to enable it, as it will fail gracefully if it is not supported.
 *
 * <strong>Note:</strong> It is important to disable Touch on a stage that you are no longer using:
 *
 * @memberof easeljs
 * @name easeljs.Touch
 * @example
 * let stage = new Stage("canvasId");
 * Touch.enable(stage);
 */
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({

	/**
	 * Returns `true` if touch is supported in the current browser.
	 * @return {Boolean} Indicates whether touch is supported in the current browser.
	 */
	isSupported () {
		return	!!(('ontouchstart' in window) // iOS & Android
			|| (window.MSPointerEvent && window.navigator.msMaxTouchPoints > 0) // IE10
			|| (window.PointerEvent && window.navigator.maxTouchPoints > 0)); // IE11+
	},

	/**
	 * Enables touch interaction for the specified EaselJS {@link easeljs.Stage}. Currently supports iOS
	 * (and compatible browsers, such as modern Android browsers), and IE10/11. Supports both single touch and
	 * multi-touch modes. Extends the EaselJS {@link easeljs.MouseEvent} model, but without support for
	 * double click or over/out events.
	 * @param {easeljs.Stage} stage The Stage to enable touch on.
	 * @param {Boolean} [singleTouch=false] If `true`, only a single touch will be active at a time.
	 * @param {Boolean} [allowDefault=false] If `true`, then default gesture actions (ex. scrolling, zooming) will be
	 * allowed when the user is interacting with the target canvas.
	 * @return {Boolean} Returns `true` if touch was successfully enabled on the target stage.
	 */
	enable (stage, singleTouch = false, allowDefault = false) {
		if (!stage || !stage.canvas || !this.isSupported()) { return false; }
		if (stage.__touch) { return true; }

		// inject required properties on stage:
		stage.__touch = {pointers:{}, multitouch:!singleTouch, preventDefault:!allowDefault, count:0};

		// note that in the future we may need to disable the standard mouse event model before adding
		// these to prevent duplicate calls. It doesn't seem to be an issue with iOS devices though.
		if ('ontouchstart' in window) { this._IOS_enable(stage); }
		else if (window.PointerEvent || window.MSPointerEvent) { this._IE_enable(stage); }
		return true;
	},

	/**
	 * Removes all listeners that were set up when calling `Touch.enable()` on a stage.
	 * @param {easeljs.Stage} stage The Stage to disable touch on.
	 */
	disable (stage) {
		if (!stage) { return; }
		if ('ontouchstart' in window) { this._IOS_disable(stage); }
		else if (window.PointerEvent || window.MSPointerEvent) { this._IE_disable(stage); }
		delete stage.__touch;
	},

	/**
	 * @private
	 * @param {easeljs.Stage} stage
	 */
	_IOS_enable (stage) {
		let canvas = stage.canvas;
		let f = stage.__touch.f = e => this._IOS_handleEvent(stage, e);
		canvas.addEventListener("touchstart", f, false);
		canvas.addEventListener("touchmove", f, false);
		canvas.addEventListener("touchend", f, false);
		canvas.addEventListener("touchcancel", f, false);
	},

	/**
	 * @private
	 * @param {easeljs.Stage} stage
	 */
	_IOS_disable (stage) {
		let canvas = stage.canvas;
		if (!canvas) { return; }
		let f = stage.__touch.f;
		canvas.removeEventListener("touchstart", f, false);
		canvas.removeEventListener("touchmove", f, false);
		canvas.removeEventListener("touchend", f, false);
		canvas.removeEventListener("touchcancel", f, false);
	},

	/**
	 * @private
	 * @param {easeljs.Stage} stage
	 * @param {Object} e The event to handle
	 */
	_IOS_handleEvent (stage, e) {
		if (!stage) { return; }
		if (stage.__touch.preventDefault) { e.preventDefault&&e.preventDefault(); }
		let touches = e.changedTouches;
		let type = e.type;
		const l = touches.length;
		for (let touch of touches) {
			let id = touch.identifier;
			if (touch.target != stage.canvas) { continue; }

			if (type === "touchstart") {
				this._handleStart(stage, id, e, touch.pageX, touch.pageY);
			} else if (type === "touchmove") {
				this._handleMove(stage, id, e, touch.pageX, touch.pageY);
			} else if (type === "touchend" || type === "touchcancel") {
				this._handleEnd(stage, id, e);
			}
		}
	},

	/**
	 * @private
	 * @param {easeljs.Stage} stage
	 */
	_IE_enable (stage) {
		let canvas = stage.canvas;
		let f = stage.__touch.f = e => this._IE_handleEvent(stage,e);

		if (window.PointerEvent === undefined) {
			canvas.addEventListener("MSPointerDown", f, false);
			window.addEventListener("MSPointerMove", f, false);
			window.addEventListener("MSPointerUp", f, false);
			window.addEventListener("MSPointerCancel", f, false);
			if (stage.__touch.preventDefault) { canvas.style.msTouchAction = "none"; }
		} else {
			canvas.addEventListener("pointerdown", f, false);
			window.addEventListener("pointermove", f, false);
			window.addEventListener("pointerup", f, false);
			window.addEventListener("pointercancel", f, false);
			if (stage.__touch.preventDefault) { canvas.style.touchAction = "none"; }

		}
		stage.__touch.activeIDs = {};
	},

	/**
	 * @private
	 * @param {easeljs.Stage} stage
	 */
	_IE_disable (stage) {
		let f = stage.__touch.f;

		if (window.PointerEvent === undefined) {
			window.removeEventListener("MSPointerMove", f, false);
			window.removeEventListener("MSPointerUp", f, false);
			window.removeEventListener("MSPointerCancel", f, false);
			if (stage.canvas) {
				stage.canvas.removeEventListener("MSPointerDown", f, false);
			}
		} else {
			window.removeEventListener("pointermove", f, false);
			window.removeEventListener("pointerup", f, false);
			window.removeEventListener("pointercancel", f, false);
			if (stage.canvas) {
				stage.canvas.removeEventListener("pointerdown", f, false);
			}
		}
	},

	/**
	 * @private
	 * @param {easeljs.Stage} stage
	 * @param {Object} e The event to handle.
	 */
	_IE_handleEvent (stage, e) {
		if (!stage) { return; }
		if (stage.__touch.preventDefault) { e.preventDefault && e.preventDefault(); }
		let type = e.type;
		let id = e.pointerId;
		let ids = stage.__touch.activeIDs;

		if (type === "MSPointerDown" || type === "pointerdown") {
			if (e.srcElement != stage.canvas) { return; }
			ids[id] = true;
			this._handleStart(stage, id, e, e.pageX, e.pageY);
		} else if (ids[id]) { // it's an id we're watching
			if (type === "MSPointerMove" || type === "pointermove") {
				this._handleMove(stage, id, e, e.pageX, e.pageY);
			} else if (type === "MSPointerUp" || type === "MSPointerCancel"
					|| type === "pointerup" || type === "pointercancel") {
				delete(ids[id]);
				this._handleEnd(stage, id, e);
			}
		}
	},

	/**
	 * @private
	 * @param {easeljs.Stage} stage
	 * @param {String | Number} id
	 * @param {Object} e
	 * @param {Number} x
	 * @param {Number} y
	 */
	_handleStart (stage, id, e, x, y) {
		let props = stage.__touch;
		if (!props.multitouch && props.count) { return; }
		let ids = props.pointers;
		if (ids[id]) { return; }
		ids[id] = true;
		props.count++;
		stage._handlePointerDown(id, e, x, y);
	},

	/**
	 * @private
	 * @param {easeljs.Stage} stage
	 * @param {String | Number} id
	 * @param {Object} e
	 * @param {Number} x
	 * @param {Number} y
	 */
	_handleMove (stage, id, e, x, y) {
		if (!stage.__touch.pointers[id]) { return; }
		stage._handlePointerMove(id, e, x, y);
	},

	/**
	 * @private
	 * @param {easeljs.Stage} stage
	 * @param {String | Number} id
	 * @param {Object} e
	 */
	_handleEnd (stage, id, e) {
		// TODO: cancel should be handled differently for proper UI (ex. an up would trigger a click, a cancel would more closely resemble an out).
		let props = stage.__touch;
		let ids = props.pointers;
		if (!ids[id]) { return; }
		props.count--;
		stage._handlePointerUp(id, e, true);
		delete(ids[id]);
	}

});


/***/ }),

/***/ "./node_modules/@createjs/easeljs/src/utils/Canvas.js":
/*!************************************************************!*\
  !*** ./node_modules/@createjs/easeljs/src/utils/Canvas.js ***!
  \************************************************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => /* binding */ createCanvas
/* harmony export */ });
/**
 * @license Canvas
 * Visit http://createjs.com/ for documentation, updates and examples.
 *
 * Copyright (c) 2017 gskinner.com, inc.
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Global utility for creating canvases.
 * @memberof easeljs
 * @name easeljs.createCanvas
 * @param {Number} [width=1]
 * @param {Number} [height=1]
 */
function createCanvas(width=1, height=1) {
	let c;
	if (window.createjs !== undefined && window.createjs.createCanvas !== undefined) {
		c = window.createjs.createCanvas();
	}
	if (window.document !== undefined && window.document.createElement !== undefined) {
		c = document.createElement("canvas");
	}
	if (c !== undefined) {
		c.width = width;
		c.height = height;
		return c;
	}

	throw "Canvas not supported in this environment.";
}


/***/ }),

/***/ "./node_modules/@createjs/easeljs/src/utils/SpriteSheetBuilder.js":
/*!************************************************************************!*\
  !*** ./node_modules/@createjs/easeljs/src/utils/SpriteSheetBuilder.js ***!
  \************************************************************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => /* binding */ SpriteSheetBuilder
/* harmony export */ });
/* harmony import */ var _createjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @createjs/core */ "./node_modules/@createjs/core/src/main.js");
/* harmony import */ var _geom_Rectangle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../geom/Rectangle */ "./node_modules/@createjs/easeljs/src/geom/Rectangle.js");
/* harmony import */ var _display_SpriteSheet__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../display/SpriteSheet */ "./node_modules/@createjs/easeljs/src/display/SpriteSheet.js");
/**
 * @license SpriteSheetBuilder
 * Visit http://createjs.com/ for documentation, updates and examples.
 *
 * Copyright (c) 2017 gskinner.com, inc.
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */





/**
 * The SpriteSheetBuilder allows you to generate {@link easeljs.SpriteSheet} instances at run time
 * from any display object. This can allow you to maintain your assets as vector graphics (for low file size), and
 * render them at run time as SpriteSheets for better performance.
 *
 * SpriteSheets can be built either synchronously, or asynchronously, so that large SpriteSheets can be generated
 * without locking the UI.
 *
 * Note that the "images" used in the generated SpriteSheet are actually canvas elements, and that they will be
 * sized to the nearest power of 2 up to the value of {@link easeljs.SpriteSheetBuilder#maxWidth}
 * or {@link easeljs.SpriteSheetBuilder#maxHeight}.
 *
 * @memberof easeljs
 * @extends core.EventDispatcher
 *
 * @param {Number} [framerate=0] The {{#crossLink "SpriteSheet/framerate:property"}}{{/crossLink}} of
 * {@link easeljs.SpriteSheet} instances that are created.
 */
class SpriteSheetBuilder extends _createjs_core__WEBPACK_IMPORTED_MODULE_0__.EventDispatcher {

	constructor (framerate = 0) {
		super();

		/**
		 * The maximum width for the images (not individual frames) in the generated SpriteSheet. It is recommended to
		 * use a power of 2 for this value (ex. 1024, 2048, 4096). If the frames cannot all fit within the max
		 * dimensions, then additional images will be created as needed.
		 * @type {Number}
		 * @default 2048
		*/
		this.maxWidth = 2048;

		/**
		 * The maximum height for the images (not individual frames) in the generated SpriteSheet. It is recommended to
		 * use a power of 2 for this value (ex. 1024, 2048, 4096). If the frames cannot all fit within the max
		 * dimensions, then additional images will be created as needed.
		 * @type {Number}
		 * @default 2048
		 */
		this.maxHeight = 2048;

		/**
		 * The SpriteSheet that was generated. This will be null before a build is completed successfully.
		 * @type {easeljs.SpriteSheet}
		 */
		this.spriteSheet = null;

		/**
		 * The scale to apply when drawing all frames to the SpriteSheet. This is multiplied against any scale specified
		 * in the addFrame call. This can be used, for example, to generate a SpriteSheet at run time that is tailored
		 * to the a specific device resolution (ex. tablet vs mobile).
		 * @type {Number}
		 * @default 1
		 */
		this.scale = 1;

		/**
		* The padding to use between frames. This is helpful to preserve antialiasing on drawn vector content.
		* @type {Number}
		* @default 1
		*/
		this.padding = 1;

		/**
		 * A number from 0.01 to 0.99 that indicates what percentage of time the builder can use. This can be
		 * thought of as the number of seconds per second the builder will use. For example, with a timeSlice value of 0.3,
		 * the builder will run 20 times per second, using approximately 15ms per build (30% of available time, or 0.3s per second).
		 * Defaults to 0.3.
		 * @type {Number}
		 * @default 0.3
		 */
		this.timeSlice = 0.3;

		/**
		 * A value between 0 and 1 that indicates the progress of a build, or -1 if a build has not
		 * been initiated.
		 * @type {Number}
		 * @default -1
		 * @readonly
		 */
		this.progress = -1;

		/**
		 * A {@link easeljs.SpriteSheet#framerate} value that will be passed to new SpriteSheet instances that are
		 * created. If no framerate is specified (or it is 0), then SpriteSheets will use the {@link core.Ticker} framerate.
		 * @type {Number}
		 * @default 0
		 */
		this.framerate = framerate;

		/**
		 * @protected
		 * @type {Array}
		 */
		this._frames = [];

		/**
		 * @protected
		 * @type {Array}
		 */
		this._animations = {};

		/**
		 * @protected
		 * @type {Array}
		 */
		this._data = null;

		/**
		 * @protected
		 * @type {Number}
		 */
		this._nextFrameIndex = 0;

		/**
		 * @protected
		 * @type {Number}
		 */
		this._index = 0;

		/**
		 * @protected
		 * @type {Number}
		 */
		this._timerID = null;

		/**
		 * @protected
		 * @type {Number}
		 */
		this._scale = 1;
	}

	/**
	 * Adds a frame to the {@link easeljs.SpriteSheet}. Note that the frame will not be drawn until you
	 * call {@link easeljs.SpriteSheetBuilder#build} method. The optional setup params allow you to have
	 * a function run immediately before the draw occurs. For example, this allows you to add a single source multiple
	 * times, but manipulate it or its children to change it to generate different frames.
	 *
	 * Note that the source's transformations (x, y, scale, rotate, alpha) will be ignored, except for regX/Y. To apply
	 * transforms to a source object and have them captured in the SpriteSheet, simply place it into a {@link easeljs.Container}
	 * and pass in the Container as the source.
	 * @param {easeljs.DisplayObject} source The source {{#crossLink "DisplayObject"}}{{/crossLink}}  to draw as the frame.
	 * @param {easeljs.Rectangle} [sourceRect] A {{#crossLink "Rectangle"}}{{/crossLink}} defining the portion of the
	 * source to draw to the frame. If not specified, it will look for a `getBounds` method, bounds property, or
	 * `nominalBounds` property on the source to use. If one is not found, the frame will be skipped.
	 * @param {Number} [scale=1] Optional. The scale to draw this frame at. Default is 1.
	 * @param {Function} [setupFunction] A function to call immediately before drawing this frame. It will be called with two parameters: the source, and setupData.
	 * @param {Object} [setupData] Arbitrary setup data to pass to setupFunction as the second parameter.
	 * @return {Number} The index of the frame that was just added, or null if a sourceRect could not be determined.
	 */
	addFrame (source, sourceRect, scale = 1, setupFunction, setupData) {
		if (this._data) { throw SpriteSheetBuilder.ERR_RUNNING; }
		let rect = sourceRect||source.bounds||source.nominalBounds||(source.getBounds&&source.getBounds());
		if (!rect) { return null; }
		return this._frames.push({ source, sourceRect: rect, scale, funct: setupFunction, data: setupData, index: this._frames.length, height: rect.height*scale }) - 1;
	}

	/**
	 * Adds an animation that will be included in the created {@link easeljs.SpriteSheet}.
	 * @param {String} name The name for the animation.
	 * @param {Array} frames An array of frame indexes that comprise the animation. Ex. [3,6,5] would describe an animation
	 * that played frame indexes 3, 6, and 5 in that order.
	 * @param {String} [next] Specifies the name of the animation to continue to after this animation ends. You can
	 * also pass false to have the animation stop when it ends. By default it will loop to the start of the same animation.
	 * @param {Number} [speed] Specifies a frame advance speed for this animation. For example, a value of 0.5 would
	 * cause the animation to advance every second tick. Note that earlier versions used `frequency` instead, which had
	 * the opposite effect.
	 */
	addAnimation (name, frames, next, speed) {
		if (this._data) { throw SpriteSheetBuilder.ERR_RUNNING; }
		this._animations[name] = { frames, next, speed };
	}

	/**
	 * This will take a {@link easeljs.MovieClip} instance, and add its frames and labels to this
	 * builder. Labels will be added as an animation running from the label index to the next label. For example, if
	 * there is a label named "foo" at frame 0 and a label named "bar" at frame 10, in a MovieClip with 15 frames, it
	 * will add an animation named "foo" that runs from frame index 0 to 9, and an animation named "bar" that runs from
	 * frame index 10 to 14.
	 *
	 * Note that this will iterate through the full MovieClip with {@link easeljs.MovieClip#actionsEnabled}
	 * set to `false`, ending on the last frame.
	 * @param {easeljs.MovieClip} source The source MovieClip instance to add to the SpriteSheet.
	 * @param {easeljs.Rectangle} [sourceRect] A Rectangle defining the portion of the source to
	 * draw to the frame. If not specified, it will look for a {{#crossLink "DisplayObject/getBounds"}}{{/crossLink}}
	 * method, `frameBounds` Array, `bounds` property, or `nominalBounds` property on the source to use. If one is not
	 * found, the MovieClip will be skipped.
	 * @param {Number} [scale=1] The scale to draw the movie clip at.
	 * @param {Function} [setupFunction] A function to call immediately before drawing each frame. It will be called
	 * with three parameters: the source, setupData, and the frame index.
	 * @param {Object} [setupData] Arbitrary setup data to pass to setupFunction as the second parameter.
	 * @param {Function} [labelFunction] This method will be called for each MovieClip label that is added with four
	 * parameters: the label name, the source MovieClip instance, the starting frame index (in the movieclip timeline)
	 * and the end index. It must return a new name for the label/animation, or `false` to exclude the label.
	 */
	addMovieClip (source, sourceRect, scale = 1, setupFunction, setupData, labelFunction) {
		if (this._data) { throw SpriteSheetBuilder.ERR_RUNNING; }
		let rects = source.frameBounds;
		let rect = sourceRect||source.bounds||source.nominalBounds||(source.getBounds&&source.getBounds());
		if (!rect && !rects) { return; }

		let baseFrameIndex = this._frames.length;
		const duration = source.timeline.duration;
		for (let i=0; i<duration; i++) {
			let r = (rects&&rects[i]) ? rects[i] : rect;
			this.addFrame(source, r, scale, this._setupMovieClipFrame, {i, f:setupFunction, d:setupData});
		}
		const labels = source.timeline._labels;
		let lbls = [];
		for (let n in labels) {
			lbls.push({index:labels[n], label:n});
		}
		if (lbls.length) {
			lbls.sort((a, b) => a.index-b.index);
			for (let i=0,l=lbls.length; i<l; i++) {
				let label = lbls[i].label;
				let start = baseFrameIndex+lbls[i].index;
				let end = baseFrameIndex+((i === l-1) ? duration : lbls[i+1].index);
				let frames = [];
				for (let i=start; i<end; i++) { frames.push(i); }
				if (labelFunction) {
					label = labelFunction(label, source, start, end);
					if (!label) { continue; }
				}
				this.addAnimation(label, frames, true); // for now, this loops all animations.
			}
		}
	}

	/**
	 * Builds a {@link easeljs.SpriteSheet} instance based on the current frames.
	 * @return {easeljs.SpriteSheet} The created SpriteSheet instance, or null if a build is already running or an error
	 * occurred.
	 */
	build () {
		if (this._data) { throw SpriteSheetBuilder.ERR_RUNNING; }
		this._startBuild();
		while (this._drawNext()) {}
		this._endBuild();
		return this.spriteSheet;
	}

	/**
	 * Asynchronously builds a {@link easeljs.SpriteSheet} instance based on the current frames. It will
	 * run 20 times per second, using an amount of time defined by `timeSlice`. When it is complete it will call the
	 * specified callback.
	 * @param {Number} [timeSlice] Sets the timeSlice property on this instance.
	 */
	buildAsync (timeSlice) {
		if (this._data) { throw SpriteSheetBuilder.ERR_RUNNING; }
		this.timeSlice = timeSlice;
		this._startBuild();
		this._timerID = setTimeout(() => this._run(), 50-Math.max(0.01, Math.min(0.99, this.timeSlice||0.3))*50);
	}

	/**
	 * Stops the current asynchronous build.
	 */
	stopAsync () {
		clearTimeout(this._timerID);
		this._data = null;
	}

	/**
	 * Returns a string representation of this object.
	 * @override
	 * @return {String} a string representation of the instance.
	 */
	toString () {
		return `[${this.constructor.name}]`;
	}

	/**
	 * @protected
	 */
	_startBuild () {
		let pad = this.padding||0;
		this.progress = 0;
		this.spriteSheet = null;
		this._index = 0;
		this._scale = this.scale;
		let dataFrames = [];
		this._data = {
			images: [],
			frames: dataFrames,
			framerate: this.framerate,
			animations: this._animations // TODO: should we "clone" _animations in case someone adds more animations after a build?
		};

		let frames = this._frames.slice();
		frames.sort((a, b) => (a.height<=b.height) ? -1 : 1);

		if (frames[frames.length-1].height+pad*2 > this.maxHeight) { throw SpriteSheetBuilder.ERR_DIMENSIONS; }
		let y=0, x=0;
		let img = 0;
		while (frames.length) {
			let o = this._fillRow(frames, y, img, dataFrames, pad);
			if (o.w > x) { x = o.w; }
			y += o.h;
			if (!o.h || !frames.length) {
				let canvas = window.createjs&&createjs.createCanvas?createjs.createCanvas():document.createElement("canvas");
				canvas.width = this._getSize(x,this.maxWidth);
				canvas.height = this._getSize(y,this.maxHeight);
				this._data.images[img] = canvas;
				if (!o.h) {
					x=y=0;
					img++;
				}
			}
		}
	};

	/**
	 * @protected
	 * @return {Number} The width & height of the row.
	 */
	_setupMovieClipFrame (source, data) {
		let ae = source.actionsEnabled;
		source.actionsEnabled = false;
		source.gotoAndStop(data.i);
		source.actionsEnabled = ae;
		data.f&&data.f(source, data.d, data.i);
	}

	/**
	 * @protected
	 * @return {Number} The width & height of the row.
	 */
	_getSize (size, max) {
		let pow = 4;
		while (Math.pow(2, ++pow) < size) {}
		return Math.min(max, Math.pow(2, pow));
	};

	/**
	 * @protected
	 * @param {Array} frames
	 * @param {Number} y
	 * @param {HTMLImageElement} img
	 * @param {Object} dataFrames
	 * @param {Number} pad
	 * @return {Number} The width & height of the row.
	 */
	_fillRow (frames, y, img, dataFrames, pad) {
		let w = this.maxWidth;
		let maxH = this.maxHeight;
		y += pad;
		let h = maxH-y;
		let x = pad;
		let height = 0;
		for (let i=frames.length-1; i>=0; i--) {
			let frame = frames[i];
			let sc = this._scale*frame.scale;
			let rect = frame.sourceRect;
			let source = frame.source;
			let rx = Math.floor(sc*rect.x-pad);
			let ry = Math.floor(sc*rect.y-pad);
			let rh = Math.ceil(sc*rect.height+pad*2);
			let rw = Math.ceil(sc*rect.width+pad*2);
			if (rw > w) { throw SpriteSheetBuilder.ERR_DIMENSIONS; }
			if (rh > h || x+rw > w) { continue; }
			frame.img = img;
			frame.rect = new _geom_Rectangle__WEBPACK_IMPORTED_MODULE_1__.default(x,y,rw,rh);
			height = height || rh;
			frames.splice(i,1);
			dataFrames[frame.index] = [x,y,rw,rh,img,Math.round(-rx+sc*source.regX-pad),Math.round(-ry+sc*source.regY-pad)];
			x += rw;
		}
		return {w:x, h:height};
	}

	/**
	 * @protected
	 */
	_endBuild () {
		this.spriteSheet = new _display_SpriteSheet__WEBPACK_IMPORTED_MODULE_2__.default(this._data);
		this._data = null;
		this.progress = 1;
		this.dispatchEvent("complete");
	}

	/**
	 * @protected
	 */
	_run () {
		let ts = Math.max(0.01, Math.min(0.99, this.timeSlice||0.3))*50;
		let t = (new Date()).getTime()+ts;
		let complete = false;
		while (t > (new Date()).getTime()) {
			if (!this._drawNext()) { complete = true; break; }
		}
		if (complete) {
			this._endBuild();
		} else {
			this._timerID = setTimeout(() => this._run(), 50-ts);
		}
		let p = this.progress = this._index/this._frames.length;
		if (this.hasEventListener("progress")) {
			let evt = new _createjs_core__WEBPACK_IMPORTED_MODULE_0__.Event("progress");
			evt.progress = p;
			this.dispatchEvent(evt);
		}
	}

	/**
	 * @protected
	 * @return {Boolean} Returns false if this is the last draw.
	 */
	_drawNext () {
		let frame = this._frames[this._index];
		let sc = frame.scale*this._scale;
		let rect = frame.rect;
		let sourceRect = frame.sourceRect;
		let canvas = this._data.images[frame.img];
		let ctx = canvas.getContext("2d");
		frame.funct&&frame.funct(frame.source, frame.data);
		ctx.save();
		ctx.beginPath();
		ctx.rect(rect.x, rect.y, rect.width, rect.height);
		ctx.clip();
		ctx.translate(Math.ceil(rect.x-sourceRect.x*sc), Math.ceil(rect.y-sourceRect.y*sc));
		ctx.scale(sc,sc);
		frame.source.draw(ctx); // display object will draw itself.
		ctx.restore();
		return (++this._index) < this._frames.length;
	}

}

/**
 * @static
 * @readonly
 * @protected
 * @type {String}
 */
SpriteSheetBuilder.ERR_DIMENSIONS = "frame dimensions exceed max spritesheet dimensions";
/**
 * @static
 * @readonly
 * @protected
 * @type {String}
 */
SpriteSheetBuilder.ERR_RUNNING = "a build is already running";

/**
 * Dispatched when a build completes.
 * @event easeljs.SpriteSheetBuilder#complete
 * @property {Object} target The object that dispatched the event.
 * @property {String} type The event type.
 * @since 0.6.0
 */

/**
 * Dispatched when an asynchronous build has progress.
 * @event easeljs.SpriteSheetBuilder#progress
 * @property {Object} target The object that dispatched the event.
 * @property {String} type The event type.
 * @property {Number} progress The current progress value (0-1).
 * @since 0.6.0
 */


/***/ }),

/***/ "./node_modules/@createjs/easeljs/src/utils/SpriteSheetUtils.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@createjs/easeljs/src/utils/SpriteSheetUtils.js ***!
  \**********************************************************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_exports__, __webpack_require__.r, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => __WEBPACK_DEFAULT_EXPORT__
/* harmony export */ });
/* harmony import */ var _Canvas__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Canvas */ "./node_modules/@createjs/easeljs/src/utils/Canvas.js");
/*
* @license SpriteSheetUtils
* Visit http://createjs.com/ for documentation, updates and examples.
*
* Copyright (c) 2017 gskinner.com, inc.
*
* Permission is hereby granted, free of charge, to any person
* obtaining a copy of this software and associated documentation
* files (the "Software"), to deal in the Software without
* restriction, including without limitation the rights to use,
* copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the
* Software is furnished to do so, subject to the following
* conditions:
*
* The above copyright notice and this permission notice shall be
* included in all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
* OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
* HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
* OTHER DEALINGS IN THE SOFTWARE.
*/



/**
 * The SpriteSheetUtils class is a collection of static methods for working with {{#crossLink "SpriteSheet"}}{{/crossLink}}s.
 * A sprite sheet is a series of images (usually animation frames) combined into a single image on a regular grid. For
 * example, an animation consisting of 8 100x100 images could be combined into a 400x200 sprite sheet (4 frames across
 * by 2 high). The SpriteSheetUtils class uses a static interface and should not be instantiated.
 *
 * @memberof easeljs
 * @name easeljs.SpriteSheetUtils
 */
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({

	/**
	 * @protected
	 * @type {HTMLCanvasElement | Object}
	 */
	_workingCanvas: (0,_Canvas__WEBPACK_IMPORTED_MODULE_0__.default)(),

	/**
	 * @protected
	 * @type {CanvasRenderingContext2D}
	 */
	get _workingContext () { return this._workingCanvas.getContext("2d"); },

	/**
	 * Returns a single frame of the specified sprite sheet as a new PNG image. An example of when this may be useful is
	 * to use a spritesheet frame as the source for a bitmap fill.
	 *
	 * <strong>WARNING:</strong> In almost all cases it is better to display a single frame using a {@link easeljs.Sprite}
	 * with a {@link easeljs.Sprite#gotoAndStop} call than it is to slice out a frame using this
	 * method and display it with a Bitmap instance. You can also crop an image using the {@link easeljs.Bitmap#sourceRect}
	 * property of {@link easeljs.Bitmap}.
	 *
	 * The extractFrame method may cause cross-domain warnings since it accesses pixels directly on the canvas.
	 *
	 * @param {easeljs.SpriteSheet} spriteSheet The SpriteSheet instance to extract a frame from.
	 * @param {Number | String} frameOrAnimation The frame number or animation name to extract. If an animation
	 * name is specified, only the first frame of the animation will be extracted.
	 * @return {HTMLImageElement} a single frame of the specified sprite sheet as a new PNG image.
	 */
	extractFrame (spriteSheet, frameOrAnimation) {
		if (isNaN(frameOrAnimation)) {
			frameOrAnimation = spriteSheet.getAnimation(frameOrAnimation).frames[0];
		}
		let data = spriteSheet.getFrame(frameOrAnimation);
		if (!data) { return null; }
		let r = data.rect;
		let canvas = this._workingCanvas;
		canvas.width = r.width;
		canvas.height = r.height;
		this._workingContext.drawImage(data.image, r.x, r.y, r.width, r.height, 0, 0, r.width, r.height);
		let img = document.createElement("img");
		img.src = canvas.toDataURL("image/png");
		return img;
	},

	/**
	 * @protected
	 * @param {easeljs.SpriteSheet} spriteSheet
	 * @param {Number} count
	 * @param {Number} h
	 * @param {Number} v
	 */
	_flip (spriteSheet, count, h, v) {
		let imgs = spriteSheet._images;
		let canvas = this._workingCanvas;
		let ctx = this._workingContext;
		const il = imgs.length/count;
		for (let i=0; i<il; i++) {
			let src = imgs[i];
			src.__tmp = i; // a bit hacky, but faster than doing indexOf below.
			ctx.setTransform(1,0,0,1,0,0);
			ctx.clearRect(0,0,canvas.width+1,canvas.height+1);
			canvas.width = src.width;
			canvas.height = src.height;
			ctx.setTransform(h?-1:1, 0, 0, v?-1:1, h?src.width:0, v?src.height:0);
			ctx.drawImage(src,0,0);
			let img = document.createElement("img");
			img.src = canvas.toDataURL("image/png");
			// work around a strange bug in Safari:
			img.width = (src.width||src.naturalWidth);
			img.height = (src.height||src.naturalHeight);
			imgs.push(img);
		}

		let frames = spriteSheet._frames;
		const fl = frames.length/count;
		for (let i=0; i<fl; i++) {
			let src = frames[i];
			let rect = src.rect.clone();
			let img = imgs[src.image.__tmp+il*count];

			let frame = {image:img,rect,regX:src.regX,regY:src.regY};
			if (h) {
				rect.x = (img.width||img.naturalWidth)-rect.x-rect.width; // update rect
				frame.regX = rect.width-src.regX; // update registration point
			}
			if (v) {
				rect.y = (img.height||img.naturalHeight)-rect.y-rect.height;  // update rect
				frame.regY = rect.height-src.regY; // update registration point
			}
			frames.push(frame);
		}

		let sfx = `_${h?"h":""}${v?"v":""}`;
		let names = spriteSheet._animations;
		let data = spriteSheet._data;
		const al = names.length/count;
		for (let i=0; i<al; i++) {
			let name = names[i];
			let src = data[name];
			let anim = {name:name+sfx,speed:src.speed,next:src.next,frames:[]};
			if (src.next) { anim.next += sfx; }
			let frames = src.frames;
			for (let i=0,l=frames.length;i<l;i++) {
				anim.frames.push(frames[i]+fl*count);
			}
			data[anim.name] = anim;
			names.push(anim.name);
		}
	}

});


/***/ }),

/***/ "./node_modules/@createjs/easeljs/src/utils/VideoBuffer.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@createjs/easeljs/src/utils/VideoBuffer.js ***!
  \*****************************************************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => /* binding */ VideoBuffer
/* harmony export */ });
/* harmony import */ var _Canvas__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Canvas */ "./node_modules/@createjs/easeljs/src/utils/Canvas.js");
/**
 * @license VideoBuffer
 * Visit http://createjs.com/ for documentation, updates and examples.
 *
 * Copyright (c) 2010 gskinner.com, inc.
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */



/**
 * When an HTML video seeks, including when looping, there is an indeterminate period before a new frame is available.
 * This can result in the video blinking or flashing when it is drawn to a canvas. The VideoBuffer class resolves
 * this issue by drawing each frame to an off-screen canvas and preserving the prior frame during a seek.
 *
 * @example
 * let buffer = new VideoBuffer(video);
 * let bitmap = new Bitmap(buffer);
 *
 * @param {HTMLVideoElement} video The HTML video element to buffer.
 */
class VideoBuffer {

  constructor (video) {

  	/**
  	 * Used by Bitmap to determine when the video buffer is ready to be drawn. Not intended for general use.
  	 * @protected
  	 * @type {Number}
  	 */
  	this.readyState = video.readyState;

  	/**
  	 * @protected
  	 * @type {HTMLVideoElement}
  	 */
  	this._video = video;

  	/**
  	 * @protected
  	 * @type {HTMLCanvasElement}
  	 */
  	this._canvas = null;

  	/**
  	 * @protected
  	 * @type {Number}
  	 * @default -1
  	 */
  	this._lastTime = -1;

  	if (this.readyState < 2) {
      video.addEventListener("canplaythrough", this._videoReady.bind(this));
    }
    // {once: true} isn't supported everywhere, but its a non-critical optimization here.
  }

  /**
   * Gets an HTML canvas element showing the current video frame, or the previous frame if in a seek / loop.
   * Primarily for use by {@link easeljs.Bitmap}.
   */
  getImage () {
  	if (this.readyState < 2) { return; }
  	let canvas = this._canvas, video = this._video;
  	if (!canvas) {
			canvas = this._canvas = (0,_Canvas__WEBPACK_IMPORTED_MODULE_0__.default)();
  		canvas.width = video.videoWidth;
  		canvas.height = video.videoHeight;
  	}
  	if (video.readyState >= 2 && video.currentTime !== this._lastTime) {
  		const ctx = canvas.getContext("2d");
  		ctx.clearRect(0, 0, canvas.width, canvas.height);
  		ctx.drawImage(video, 0, 0, canvas.width, canvas.height);
  		this._lastTime = video.currentTime;
  	}
  	return canvas;
  }

  /**
   * @protected
   */
  _videoReady () {
  	this.readyState = 2;
  }

}


/***/ }),

/***/ "./node_modules/@createjs/easeljs/src/utils/WebGLInspector.js":
/*!********************************************************************!*\
  !*** ./node_modules/@createjs/easeljs/src/utils/WebGLInspector.js ***!
  \********************************************************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => /* binding */ WebGLInspector
/* harmony export */ });
/* harmony import */ var _createjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @createjs/core */ "./node_modules/@createjs/core/src/main.js");
/**
 * @license WebGLInspector
 * Visit http://createjs.com/ for documentation, updates and examples.
 *
 * Copyright (c) 2017 gskinner.com, inc.
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */



 /**
  * A utility and helper class designed to work with {{#crossLink "StageGL"}}{{/crossLink}} to help investigate and
  * test performance or display problems. It contains logging functions to analyze behaviour and performance testing
  * utilities.
  *
  * @memberof easeljs
  * @extends core.EventDispatcher
  *
  * @param {StageGL} stage The default stage to use when none is supplied.
  */
class WebGLInspector extends _createjs_core__WEBPACK_IMPORTED_MODULE_0__.EventDispatcher {

	constructor (stage) {
		super();

		/**
		 * The internal reference to the default stage this Inspector is for.
		 * @protected
		 * @type {easeljs.StageGL}
		 */
		this._stage = stage;
	}

	/**
	 * Utility function for use with {@link easeljs.WebGLInspector#logDepth}. Logs an item's position and registration.
	 * Useful to see if something is being forced off screen or has an integer position.
	 * @param {easeljs.DisplayObject} item The item we're currently logging about.
	 * @param {String} [prepend] The string to show before the item, usually formatting for a tree view.
	 * @static
	 */
	static dispProps (item, prepend = "") {
		let p = `\tP: ${item.x.toFixed(2)}x${item.y.toFixed(2)}\t`;
		let r = `\tR: ${item.regX.toFixed(2)}x${item.regY.toFixed(2)}\t`;
		WebGLInspector._log(prepend, `${item.toString()}\t`, p, r);
	}

	/**
	 * Log with alternateOutput if available, defaulting to the console.
	 * @param {...*} info The info to log.
	 * @static
	 */
	static _log (...info) {
		if (WebGLInspector.alternateOutput) {
			WebGLInspector.alternateOutput.log(...info);
		} else {
			console.log(...info);
		}
	}

	/**
	 * Perform all of the logging reports at once.
	 * @param {easeljs.StageGL} [stage] The stage to log information for.
	 */
	log (stage) {
		if (!stage) { stage = this._stage; }
		WebGLInspector._log(`Batches Per Draw: ${(stage._batchID/stage._drawID).toFixed(4)}`);
		this.logContextInfo(stage._webGLContext);
		this.logDepth(stage.children, "");
		this.logTextureFill(stage);
	}

	/**
	 * Replace the stage's Draw command with an empty draw command. This is useful for testing performance, and ignoring rendering.
	 * @param {StageGL} [stage=] The stage to log information for.
	 * @param {Boolean} [enabled] Force enabled. If left undefined, it will toggle.
	 */
	toggleGPUDraw (stage, enabled) {
		if (!stage) { stage = this._stage; }

		if (enabled === undefined) {
			enabled = !!stage._drawBuffers_;
		}

		if (enabled && stage._drawBuffers_) {
			stage._drawBuffers = stage._drawBuffers_;
			stage._drawBuffers_ = undefined;
		} else {
			stage._drawBuffers_ = stage._drawBuffers;
			stage._drawBuffers = function _inspectorDrawBuffers (gl) {
				if (this.vocalDebug) {
					WebGLInspector._log(`BlankDraw[${this._drawID}:${this._batchID}] : ${this.batchReason}`);
				}
			};
		}
	}

	/**
	 * Recursively walk the entire display tree, log the attached items, and display it in a tree view.
	 * @param {Array} [children] The children array to walk through.
	 * @param {String} [prepend] What to prepend to this output from this point onwards.
	 * @param {Function} [logFunc] Custom logging function, mainly for filtering or formatting output.
	 */
	logDepth (children, prepend = "", logFunc = WebGLInspector._log) {
		if (!children) { children = this._stage.children; }
		const l = children.length;
		for (let i=0; i<l; i++) {
			let child = children[i];
			logFunc(`${prepend}-`, child);
			if (child.children && child.children.length) {
				this.logDepth(child.children, `|${prepend}`, logFunc);
			}
		}
	}

	/**
	 * Examine the context and provide information about its capabilities.
	 * @param {WebGLRenderingContext} [gl] The WebGL context to inspect.
	 */
	logContextInfo (gl) {
		if (!gl) { gl = this._stage._webGLContext; }
		let data = `
			== LOG:\n
			Max textures per draw: ${gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS)}\n
			Max textures active: ${gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS)}\n
			\n
			Max texture size: ${gl.getParameter(gl.MAX_TEXTURE_SIZE)/2}\n
			Max cache size: ${gl.getParameter(gl.MAX_RENDERBUFFER_SIZE)/2}\n
			\n
			Max attributes per vertex: ${gl.getParameter(gl.MAX_VERTEX_ATTRIBS)}\n
			WebGL Version string: ${gl.getParameter(gl.VERSION)}\n
			======
		`;
		WebGLInspector._log(data);
	}

	/**
	 * Simulate renders and watch what happens for textures moving around between draw calls. A texture moving between
	 * slots means it was removed and then re-added to draw calls. Performance may be better if it was allowed to stay
	 * in place.
	 * @param {StageGL} [stage] The stage to log information for.
	 */
	logTextureFill (stage) {
		if (!stage) { stage = this._stage; }

		let dict = stage._textureDictionary;
		let count = stage._batchTextureCount;
		WebGLInspector._log(`${textureMax}: ${count}`);
		let output = [];
		for (let n in dict) {
			let str = n.replace(window.location.origin, "");
			let tex = dict[n];
			let shifted = tex._lastActiveIndex?tex._lastActiveIndex === tex._activeIndex:false;
			output.push({src, element:tex, shifted});
			tex._lastActiveIndex = tex._activeIndex;
		}

		output.sort((a,b) => {
			if (a.element._drawID === stage._drawID) { return 1; }
			if (a.element._drawID < b.element._drawID) { return -1; }
			return 0;
		});

		const l = output.length;
		for (let i=0; i<l; i++) {
			let out = output[i];
			let active = out.element._drawID === stage._drawID;
			WebGLInspector._log(`[${out.src}] ${active?"ACTIVE":"stale"} ${out.shifted?"steady":"DRIFT"}`, out.element);
		}
	}

}

/**
 * Alternate output for debugging situations where "console" is not available, i.e. Mobile or remote debugging.
 * Expects object with a "log" function that takes any number of params.
 * @type {Console}
 * @default null
 * @static
 * @protected
 */
WebGLInspector.alternateOutput = null;


/***/ }),

/***/ "./node_modules/@createjs/easeljs/src/utils/uid.js":
/*!*********************************************************!*\
  !*** ./node_modules/@createjs/easeljs/src/utils/uid.js ***!
  \*********************************************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => /* binding */ uid
/* harmony export */ });
/**
 * @license uid
 * Visit http://createjs.com/ for documentation, updates and examples.
 *
 * Copyright (c) 2017 gskinner.com, inc.
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

/** @ignore */
let _nextId = 0;

/**
 * Global utility for generating sequential unique ID numbers.
 *
 * @memberof easeljs
 * @name easeljs.uid
 * @example
 * import { uid } from "@createjs/easeljs";
 * var ids = [];
 * while (ids.length <= 3) {
 *   ids.push(uid());
 * }
 * // ids == [0, 1, 2, 3]
 */
function uid () {
	return _nextId++;
}


/***/ }),

/***/ "./node_modules/@createjs/tweenjs/src/AbstractTween.js":
/*!*************************************************************!*\
  !*** ./node_modules/@createjs/tweenjs/src/AbstractTween.js ***!
  \*************************************************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => /* binding */ AbstractTween
/* harmony export */ });
/* harmony import */ var _createjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @createjs/core */ "./node_modules/@createjs/core/src/main.js");
/* harmony import */ var _Tween__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Tween */ "./node_modules/@createjs/tweenjs/src/Tween.js");
/**
 * @license AbstractTween
 * Visit http://createjs.com/ for documentation, updates and examples.
 *
 * Copyright (c) 2017 gskinner.com, inc.
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */




/**
 * Base class that both {@link tweenjs.Tween} and {@link tweenjs.Timeline} extend. Should not be instantiated directly.
 *
 * @memberof tweenjs
 * @extends core.EventDispatcher
 *
 * @param {Object} [props] The configuration properties to apply to this instance (ex. `{loop:-1, paused:true}`).
 * @param {Boolean} [props.useTicks=false] See the {@link tweenjs.AbstractTween#useTicks} property for more information.
 * @param {Boolean} [props.ignoreGlobalPause=false] See the {@link tweenjs.AbstractTween#ignoreGlobalPause} for more information.
 * @param {Number|Boolean} [props.loop=0] See the {@link tweenjs.AbstractTween#loop} for more information.
 * @param {Boolean} [props.reversed=false] See the {@link tweenjs.AbstractTween#reversed} for more information.
 * @param {Boolean} [props.bounce=false] See the {@link tweenjs.AbstractTween#bounce} for more information.
 * @param {Number} [props.timeScale=1] See the {@link tweenjs.AbstractTween#timeScale} for more information.
 * @param {Function} [props.onChange] Adds the specified function as a listener to the {@link tweenjs.AbstractTween#event:change} event.
 * @param {Function} [props.onComplete] Adds the specified function as a listener to the {@link tweenjs.AbstractTween#event:complete} event.
 */
class AbstractTween extends _createjs_core__WEBPACK_IMPORTED_MODULE_0__.EventDispatcher {

  constructor (props) {
    super();

		/**
		 * Causes this tween to continue playing when a global pause is active. For example, if TweenJS is using {@link core.Ticker},
		 * then setting this to false (the default) will cause this tween to be paused when `Ticker.setPaused(true)`
		 * is called. See the {@link tweenjs.Tween#tick} method for more info. Can be set via the `props` parameter.
		 * @type {Boolean}
		 * @default false
		 */
		this.ignoreGlobalPause = false;

		/**
		 * Indicates the number of times to loop. If set to -1, the tween will loop continuously.
		 * @type {Number}
		 * @default 0
		 */
		this.loop = 0;

		/**
		 * Uses ticks for all durations instead of milliseconds. This also changes the behaviour of some actions (such as `call`).
		 * Changing this value on a running tween could have unexpected results.
		 * @type {Boolean}
		 * @default false
		 * @readonly
		 */
		this.useTicks = false;

		/**
		 * Causes the tween to play in reverse.
		 * @type {Boolean}
		 * @default false
		 */
		this.reversed = false;

		/**
		 * Causes the tween to reverse direction at the end of each loop.
		 * @type {Boolean}
		 * @default false
		 */
		this.bounce = false;

		/**
		 * Changes the rate at which the tween advances. For example, a `timeScale` value of `2` will double the
		 * playback speed, a value of `0.5` would halve it.
		 * @type {Number}
		 * @default 1
		 */
		this.timeScale = 1;

		/**
		 * Indicates the duration of this tween in milliseconds (or ticks if `useTicks` is true), irrespective of `loops`.
		 * This value is automatically updated as you modify the tween. Changing it directly could result in unexpected
		 * behaviour.
		 * @type {Number}
		 * @default 0
		 * @readonly
		 */
		this.duration = 0;

		/**
		 * The current normalized position of the tween. This will always be a value between 0 and `duration`.
		 * Changing this property directly will have unexpected results, use {@link tweenjs.Tween#setPosition}.
		 * @type {Object}
		 * @default 0
		 * @readonly
		 */
		this.position = 0;

		/**
		 * The raw tween position. This value will be between `0` and `loops * duration` while the tween is active, or -1 before it activates.
		 * @type {Number}
		 * @default -1
		 * @readonly
		 */
		this.rawPosition = -1;

		/**
		 * @private
		 * @default false
		 */
		this._paused = true;

		/**
		 * @private
		 * @type {Tween}
		 * @default null
		 */
		this._next = null;

		/**
		 * @private
		 * @type {Tween}
		 * @default null
		 */
		this._prev = null;

		/**
		 * @private
		 * @type {Object}
		 * @default null
		 */
		this._parent = null;

		/**
		 * @private
		 * @type {Object}
		 */
		this._labels = null;

		/**
		 * @private
		 * @type {Object[]}
		 */
		this._labelList = null;

		if (props) {
			this.useTicks = !!props.useTicks;
			this.ignoreGlobalPause = !!props.ignoreGlobalPause;
			this.loop = props.loop === true ? -1 : (props.loop||0);
			this.reversed = !!props.reversed;
			this.bounce = !!props.bounce;
			this.timeScale = props.timeScale||1;
			props.onChange && this.addEventListener("change", props.onChange);
			props.onComplete && this.addEventListener("complete", props.onComplete);
		}

		// while `position` is shared, it needs to happen after ALL props are set, so it's handled in _init()
  }

	/**
	 * Returns a list of the labels defined on this tween sorted by position.
	 * @type {Object[]}
	 */
	get labels () {
		let list = this._labelList;
		if (!list) {
			list = this._labelList = [];
			let labels = this._labels;
			for (let label in labels) {
				list.push({ label, position: labels[label] });
			}
			list.sort((a, b) => a.position - b.position);
		}
		return list;
	}
	set labels (labels) {
		this._labels = labels;
		this._labelList = null;
	}

  /**
   * Returns the name of the label on or immediately before the current position. For example, given a tween with
   * two labels, "first" on frame index 4, and "second" on frame 8, currentLabel would return:
   * <ul>
   *   <li>null if the current position is 2.</li>
   *   <li>"first" if the current position is 4.</li>
   *   <li>"first" if the current position is 7.</li>
   *   <li>"second" if the current position is 15.</li>
   * </ul>
   * @type {String}
   * @readonly
   */
  get currentLabel () {
    let labels = this.labels;
    let pos = this.position;
    for (let i = 0, l = labels.length; i < l; i++) { if (pos < labels[i].position) { break; } }
    return (i === 0) ? null : labels[i-1].label;
  }

  /**
   * Pauses or unpauses the tween. A paused tween is removed from the global registry and is eligible for garbage collection
   * if no other references to it exist.
   * @type {Boolean}
	 */
	get paused () { return this._paused; }
  set paused (paused) {
    _Tween__WEBPACK_IMPORTED_MODULE_1__.default._register(this, paused);
		this._paused = paused;
  }

	/**
	 * Advances the tween by a specified amount.	 *
	 * @param {Number} delta The amount to advance in milliseconds (or ticks if useTicks is true). Negative values are supported.
	 * @param {Boolean} [ignoreActions=false] If true, actions will not be executed due to this change in position.
	 */
	advance (delta, ignoreActions = false) {
		this.setPosition(this.rawPosition + delta * this.timeScale, ignoreActions);
	}

	/**
	 * Advances the tween to a specified position.
	 *
	 * @emits tweenjs.AbstractTween#event:change
	 * @emits tweenjs.AbstractTween#event:complete
	 *
	 * @param {Number} rawPosition The raw position to seek to in milliseconds (or ticks if useTicks is true).
	 * @param {Boolean} [ignoreActions=false] If true, do not run any actions that would be triggered by this operation.
	 * @param {Boolean} [jump=false] If true, only actions at the new position will be run. If false, actions between the old and new position are run.
	 * @param {Function} [callback] Primarily for use with MovieClip, this callback is called after properties are updated, but before actions are run.
	 */
	setPosition (rawPosition, ignoreActions = false, jump = false, callback) {
		const d = this.duration, loopCount = this.loop, prevRawPos = this.rawPosition;
    let loop = 0, t = 0, end = false;

		// normalize position:
		if (rawPosition < 0) { rawPosition = 0; }

		if (d === 0) {
			// deal with 0 length tweens.
			end = true;
			if (prevRawPos !== -1) { return end; } // we can avoid doing anything else if we're already at 0.
		} else {
			loop = rawPosition / d | 0;
			t = rawPosition - loop * d;

			end = (loopCount !== -1 && rawPosition >= loopCount * d + d);
			if (end) { rawPosition = (t = d) * (loop = loopCount) + d; }
			if (rawPosition === prevRawPos) { return end; } // no need to update

			// current loop is reversed
			if (!this.reversed !== !(this.bounce && loop % 2)) { t = d - t; }
		}

		// set this in advance in case an action modifies position:
		this.position = t;
		this.rawPosition = rawPosition;

		this._updatePosition(jump, end);
		if (end) { this.paused = true; }

		callback && callback(this);

		if (!ignoreActions) { this._runActions(prevRawPos, rawPosition, jump, !jump && prevRawPos === -1); }

		this.dispatchEvent("change");
		if (end) { this.dispatchEvent("complete"); }
	}

	/**
	 * Calculates a normalized position based on a raw position.
	 *
	 * @example
	 * // given a tween with a duration of 3000ms set to loop:
	 * console.log(myTween.calculatePosition(3700); // 700
	 *
	 * @param {Number} rawPosition A raw position.
	 */
	calculatePosition (rawPosition) {
		// largely duplicated from setPosition, but necessary to avoid having to instantiate generic objects to pass values (end, loop, position) back.
		const d = this.duration, loopCount = this.loop;
    let loop = 0, t = 0;

		if (d === 0) { return 0; }
		if (loopCount !== -1 && rawPosition >= loopCount * d + d) {
      t = d;
      loop = loopCount
    } else if (rawPosition < 0) {
      t = 0;
    } else {
      loop = rawPosition / d | 0;
      t = rawPosition - loop * d;
    }

		return (!this.reversed !== !(this.bounce && loop % 2)) ? d - t : t;
	}

	/**
	 * Adds a label that can be used with {@link tweenjs.Timeline#gotoAndPlay}/{@link tweenjs.Timeline#gotoAndStop}.
	 *
	 * @param {String} label The label name.
	 * @param {Number} position The position this label represents.
	 */
	addLabel (label, position) {
		if (!this._labels) { this._labels = {}; }
		this._labels[label] = position;
		const list = this._labelList;
		if (list) {
			for (let i = 0, l = list.length; i < l; i++) { if (position < list[i].position) { break; } }
			list.splice(i, 0, { label, position });
		}
	}

	/**
	 * Unpauses this timeline and jumps to the specified position or label.
	 *
	 * @param {String|Number} positionOrLabel The position in milliseconds (or ticks if `useTicks` is `true`)
	 * or label to jump to.
	 */
	gotoAndPlay (positionOrLabel) {
		this.paused = false;
		this._goto(positionOrLabel);
	}

	/**
	 * Pauses this timeline and jumps to the specified position or label.
	 *
	 * @param {String|Number} positionOrLabel The position in milliseconds (or ticks if `useTicks` is `true`) or label
	 * to jump to.
	 */
	gotoAndStop (positionOrLabel) {
		this.paused = true;
		this._goto(positionOrLabel);
	}

	/**
	 * If a numeric position is passed, it is returned unchanged. If a string is passed, the position of the
	 * corresponding frame label will be returned, or `null` if a matching label is not defined.
	 *
	 * @param {String|Number} positionOrLabel A numeric position value or label String.
	 */
	resolve (positionOrLabel) {
		const pos = Number(positionOrLabel);
    return isNaN(pos) ? this._labels && this._labels[positionOrLabel] : pos;
	}

	/**
	 * Returns a string representation of this object.
	 *
	 * @return {String} a string representation of the instance.
	 */
	toString () {
		return `[${this.constructor.name}${this.name ? ` (name=${this.name})` : ""}]`;
	}

	/**
	 * @throws AbstractTween cannot be cloned.
	 */
	clone () {
		throw "AbstractTween cannot be cloned.";
	}

	/**
	 * Shared logic that executes at the end of the subclass constructor.
	 *
	 * @private
	 *
	 * @param {Object} [props]
	 */
	_init (props) {
		if (!props || !props.paused) { this.paused = false; }
		if (props && props.position != null) { this.setPosition(props.position); }
	}

	/**
	 * @private
	 * @param {String|Number} positionOrLabel
	 */
	_goto (positionOrLabel) {
		const pos = this.resolve(positionOrLabel);
		if (pos != null) { this.setPosition(pos, false, true); }
	}

	/**
   * Runs actions between startPos & endPos. Separated to support action deferral.
   *
	 * @private
	 *
	 * @param {Number} startRawPos
	 * @param {Number} endRawPos
	 * @param {Boolean} jump
	 * @param {Boolean} includeStart
	 */
	_runActions (startRawPos, endRawPos, jump, includeStart) {
	  // console.log(this.passive === false ? " > Tween" : "Timeline", "run", startRawPos, endRawPos, jump, includeStart);
		// if we don't have any actions, and we're not a Timeline, then return:
		// TODO: a cleaner way to handle this would be to override this method in Tween, but I'm not sure it's worth the overhead.
		if (!this._actionHead && !this.tweens) { return; }

		const d = this.duration, loopCount = this.loop;
    let reversed = this.reversed, bounce = this.bounce;
		let loop0, loop1, t0, t1;

		if (d === 0) {
			// deal with 0 length tweens:
			loop0 = loop1 = t0 = t1 = 0;
			reversed = bounce = false;
		} else {
			loop0 = startRawPos / d | 0;
			loop1 = endRawPos / d | 0;
			t0 = startRawPos - loop0 * d;
			t1 = endRawPos - loop1 * d;
		}

		// catch positions that are past the end:
		if (loopCount !== -1) {
			if (loop1 > loopCount) { t1 = d; loop1 = loopCount; }
			if (loop0 > loopCount) { t0 = d; loop0 = loopCount; }
		}

		// special cases:
		if (jump) { return this._runActionsRange(t1, t1, jump, includeStart); } // jump.
    else if (loop0 === loop1 && t0 === t1 && !jump && !includeStart) { return; } // no actions if the position is identical and we aren't including the start
		else if (loop0 === -1) { loop0 = t0 = 0; } // correct the -1 value for first advance, important with useTicks.

		const dir = (startRawPos <= endRawPos);
		let loop = loop0;
		do {
			let rev = !reversed !== !(bounce && loop % 2);
			let start = (loop === loop0) ? t0 : dir ? 0 : d;
			let end = (loop === loop1) ? t1 : dir ? d : 0;

			if (rev) {
				start = d - start;
				end = d - end;
			}

			if (bounce && loop !== loop0 && start === end) { /* bounced onto the same time/frame, don't re-execute end actions */ }
			else if (this._runActionsRange(start, end, jump, includeStart || (loop !== loop0 && !bounce))) { return true; }

			includeStart = false;
		} while ((dir && ++loop <= loop1) || (!dir && --loop >= loop1));
	}

  /**
   * @private
   * @abstract
   * @throws Must be overridden by a subclass.
	 */
	_runActionsRange (startPos, endPos, jump, includeStart) {
		throw "_runActionsRange is abstract and must be overridden by a subclass.";
	}

  /**
	 * @private
   * @abstract
   * @throws Must be overridden by a subclass.
	 */
	_updatePosition (jump, end) {
    throw "_updatePosition is abstract and must be overridden by a subclass.";
	}

}

/**
 * Dispatched whenever the tween's position changes. It occurs after all tweened properties are updated and actions
 * are executed.
 * @event tweenjs.AbstractTween#change
 */
/**
 * Dispatched when the tween reaches its end and has paused itself. This does not fire until all loops are complete;
 * tweens that loop continuously will never fire a complete event.
 * @event tweenjs.AbstractTween#complete
 */


/***/ }),

/***/ "./node_modules/@createjs/tweenjs/src/Ease.js":
/*!****************************************************!*\
  !*** ./node_modules/@createjs/tweenjs/src/Ease.js ***!
  \****************************************************/
/*! namespace exports */
/*! export backIn [provided] [no usage info] [missing usage info prevents renaming] */
/*! export backInOut [provided] [no usage info] [missing usage info prevents renaming] */
/*! export backOut [provided] [no usage info] [missing usage info prevents renaming] */
/*! export bounceIn [provided] [no usage info] [missing usage info prevents renaming] */
/*! export bounceInOut [provided] [no usage info] [missing usage info prevents renaming] */
/*! export bounceOut [provided] [no usage info] [missing usage info prevents renaming] */
/*! export circIn [provided] [no usage info] [missing usage info prevents renaming] */
/*! export circInOut [provided] [no usage info] [missing usage info prevents renaming] */
/*! export circOut [provided] [no usage info] [missing usage info prevents renaming] */
/*! export cubicIn [provided] [no usage info] [missing usage info prevents renaming] */
/*! export cubicInOut [provided] [no usage info] [missing usage info prevents renaming] */
/*! export cubicOut [provided] [no usage info] [missing usage info prevents renaming] */
/*! export elasticIn [provided] [no usage info] [missing usage info prevents renaming] */
/*! export elasticInOut [provided] [no usage info] [missing usage info prevents renaming] */
/*! export elasticOut [provided] [no usage info] [missing usage info prevents renaming] */
/*! export get [provided] [no usage info] [missing usage info prevents renaming] */
/*! export getBackIn [provided] [no usage info] [missing usage info prevents renaming] */
/*! export getBackInOut [provided] [no usage info] [missing usage info prevents renaming] */
/*! export getBackOut [provided] [no usage info] [missing usage info prevents renaming] */
/*! export getElasticIn [provided] [no usage info] [missing usage info prevents renaming] */
/*! export getElasticInOut [provided] [no usage info] [missing usage info prevents renaming] */
/*! export getElasticOut [provided] [no usage info] [missing usage info prevents renaming] */
/*! export getPowIn [provided] [no usage info] [missing usage info prevents renaming] */
/*! export getPowInOut [provided] [no usage info] [missing usage info prevents renaming] */
/*! export getPowOut [provided] [no usage info] [missing usage info prevents renaming] */
/*! export linear [provided] [no usage info] [missing usage info prevents renaming] */
/*! export none [provided] [no usage info] [missing usage info prevents renaming] */
/*! export quadIn [provided] [no usage info] [missing usage info prevents renaming] */
/*! export quadInOut [provided] [no usage info] [missing usage info prevents renaming] */
/*! export quadOut [provided] [no usage info] [missing usage info prevents renaming] */
/*! export quartIn [provided] [no usage info] [missing usage info prevents renaming] */
/*! export quartInOut [provided] [no usage info] [missing usage info prevents renaming] */
/*! export quartOut [provided] [no usage info] [missing usage info prevents renaming] */
/*! export quintIn [provided] [no usage info] [missing usage info prevents renaming] */
/*! export quintInOut [provided] [no usage info] [missing usage info prevents renaming] */
/*! export quintOut [provided] [no usage info] [missing usage info prevents renaming] */
/*! export sineIn [provided] [no usage info] [missing usage info prevents renaming] */
/*! export sineInOut [provided] [no usage info] [missing usage info prevents renaming] */
/*! export sineOut [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "linear": () => /* binding */ linear,
/* harmony export */   "get": () => /* binding */ get,
/* harmony export */   "getPowIn": () => /* binding */ getPowIn,
/* harmony export */   "getPowOut": () => /* binding */ getPowOut,
/* harmony export */   "getPowInOut": () => /* binding */ getPowInOut,
/* harmony export */   "sineIn": () => /* binding */ sineIn,
/* harmony export */   "sineOut": () => /* binding */ sineOut,
/* harmony export */   "sineInOut": () => /* binding */ sineInOut,
/* harmony export */   "getBackIn": () => /* binding */ getBackIn,
/* harmony export */   "getBackOut": () => /* binding */ getBackOut,
/* harmony export */   "getBackInOut": () => /* binding */ getBackInOut,
/* harmony export */   "circIn": () => /* binding */ circIn,
/* harmony export */   "circOut": () => /* binding */ circOut,
/* harmony export */   "circInOut": () => /* binding */ circInOut,
/* harmony export */   "bounceIn": () => /* binding */ bounceIn,
/* harmony export */   "bounceOut": () => /* binding */ bounceOut,
/* harmony export */   "bounceInOut": () => /* binding */ bounceInOut,
/* harmony export */   "getElasticIn": () => /* binding */ getElasticIn,
/* harmony export */   "getElasticOut": () => /* binding */ getElasticOut,
/* harmony export */   "getElasticInOut": () => /* binding */ getElasticInOut,
/* harmony export */   "none": () => /* binding */ none,
/* harmony export */   "quadIn": () => /* binding */ quadIn,
/* harmony export */   "quadOut": () => /* binding */ quadOut,
/* harmony export */   "quadInOut": () => /* binding */ quadInOut,
/* harmony export */   "cubicIn": () => /* binding */ cubicIn,
/* harmony export */   "cubicOut": () => /* binding */ cubicOut,
/* harmony export */   "cubicInOut": () => /* binding */ cubicInOut,
/* harmony export */   "quartIn": () => /* binding */ quartIn,
/* harmony export */   "quartOut": () => /* binding */ quartOut,
/* harmony export */   "quartInOut": () => /* binding */ quartInOut,
/* harmony export */   "quintIn": () => /* binding */ quintIn,
/* harmony export */   "quintOut": () => /* binding */ quintOut,
/* harmony export */   "quintInOut": () => /* binding */ quintInOut,
/* harmony export */   "backIn": () => /* binding */ backIn,
/* harmony export */   "backOut": () => /* binding */ backOut,
/* harmony export */   "backInOut": () => /* binding */ backInOut,
/* harmony export */   "elasticIn": () => /* binding */ elasticIn,
/* harmony export */   "elasticOut": () => /* binding */ elasticOut,
/* harmony export */   "elasticInOut": () => /* binding */ elasticInOut
/* harmony export */ });
/**
 * @license Ease
 * Visit http://createjs.com/ for documentation, updates and examples.
 *
 * Copyright (c) 2017 gskinner.com, inc.
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * The Ease class provides a collection of easing functions for use with TweenJS. It does not use the standard 4 param
 * easing signature. Instead it uses a single param which indicates the current linear ratio (0 to 1) of the tween.
 *
 * Most methods on Ease can be passed directly as easing functions:
 *
 *      Tween.get(target).to({x:100}, 500, Ease.linear);
 *
 * However, methods beginning with "get" will return an easing function based on parameter values:
 *
 *      Tween.get(target).to({y:200}, 500, Ease.getPowIn(2.2));
 *
 * Please see the <a href="http://www.createjs.com/Demos/TweenJS/Tween_SparkTable">spark table demo</a> for an
 * overview of the different ease types on <a href="http://tweenjs.com">TweenJS.com</a>.
 *
 * <em>Equations derived from work by Robert Penner.</em>
 *
 * @memberof tweenjs
 * @module Ease
 */

/**
 * @param {Number} t
 * @return {Number}
 */
function linear (t) {
	return t;
}

/**
 * Mimics the simple -100 to 100 easing in Flash Pro.
 * @param {Number} amount A value from -1 (ease in) to 1 (ease out) indicating the strength and direction of the ease.
 * @return {Function}
 */
function get (amount) {
	if (amount < -1) { amount = -1; } else if (amount > 1) { amount = 1; }
	return function (t) {
		if (amount == 0) { return t; }
		if (amount < 0) { return t * (t * -amount + 1 + amount); }
		return t * ((2 - t) * amount + (1 - amount));
	};
}

/**
 * Configurable exponential ease.
 * @param {Number} pow The exponent to use (ex. 3 would return a cubic ease).
 * @return {Function}
 */
function getPowIn (pow) {
	return function (t) {
		return Math.pow(t, pow);
	};
}

/**
 * Configurable exponential ease.
 * @param {Number} pow The exponent to use (ex. 3 would return a cubic ease).
 * @return {Function}
 */
function getPowOut (pow) {
	return function (t) {
		return 1 - Math.pow(1 - t, pow);
	};
}

/**
 * Configurable exponential ease.
 * @param {Number} pow The exponent to use (ex. 3 would return a cubic ease).
 * @return {Function}
 */
function getPowInOut (pow) {
	return function (t) {
		if ((t *= 2) < 1) return 0.5 * Math.pow(t, pow);
		return 1 - 0.5 * Math.abs(Math.pow(2 - t, pow));
	};
}

/**
 * @param {Number} t
 * @return {Number}
 */
function sineIn (t) {
	return 1 - Math.cos(t * Math.PI / 2);
}

/**
 * @param {Number} t
 * @return {Number}
 */
function sineOut (t) {
	return Math.sin(t * Math.PI / 2);
}

/**
 * @param {Number} t
 * @return {Number}
 */
function sineInOut (t) {
	return -0.5 * (Math.cos(Math.PI * t) - 1);
}

/**
 * Configurable "back in" ease.
 * @param {Number} amount The strength of the ease.
 * @return {Function}
 */
function getBackIn (amount) {
	return function (t) {
		return t * t * ((amount + 1) * t - amount);
	};
}

/**
 * Configurable "back out" ease.
 * @param {Number} amount The strength of the ease.
 * @return {Function}
 */
function getBackOut (amount) {
	return function (t) {
		return (--t * t * ((amount + 1) * t + amount) + 1);
	};
}

/**
 * Configurable "back in out" ease.
 * @param {Number} amount The strength of the ease.
 * @return {Function}
 */
function getBackInOut (amount) {
	amount *= 1.525;
	return function (t) {
		if ((t *= 2) < 1) return 0.5 * (t * t * ((amount + 1) * t - amount));
		return 0.5 * ((t -= 2) * t * ((amount + 1) * t + amount) + 2);
	};
}

/**
 * @param {Number} t
 * @return {Number}
 */
function circIn (t) {
	return -(Math.sqrt(1 - t * t) - 1);
}

/**
 * @param {Number} t
 * @return {Number}
 */
function circOut (t) {
	return Math.sqrt(1 - --t * t);
}

/**
 * @param {Number} t
 * @return {Number}
 */
function circInOut (t) {
	if ((t *= 2) < 1) return -0.5 * (Math.sqrt(1 - t * t) - 1);
	return 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1);
}

/**
 * @param {Number} t
 * @return {Number}
 */
function bounceIn (t) {
	return 1 - Ease.bounceOut(1 - t);
}

/**
 * @param {Number} t
 * @return {Number}
 */
function bounceOut (t) {
	if (t < 1 / 2.75) {
		return 7.5625 * t * t;
	} else if (t < 2 / 2.75) {
		return 7.5625 * (t -= 1.5 / 2.75) * t + 0.75;
	} else if (t < 2.5 / 2.75) {
		return 7.5625 * (t -= 2.25 / 2.75) * t + 0.9375;
	} else {
		return 7.5625 * (t -= 2.625 / 2.75) * t + 0.984375;
	}
}

/**
 * @param {Number} t
 * @return {Number}
 */
function bounceInOut (t) {
	if (t < 0.5) return Ease.bounceIn(t * 2) * 0.5;
	return Ease.bounceOut(t * 2 - 1) * 0.5 + 0.5;
}

/**
 * Configurable elastic ease.
 * @param {Number} amplitude
 * @param {Number} period
 * @return {Function}
 */
function getElasticIn (amplitude, period) {
	let pi2 = Math.PI * 2;
	return function (t) {
		if (t === 0 || t === 1) return t;
		let s = period / pi2 * Math.asin(1 / amplitude);
		return -(amplitude * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * pi2 / period));
	};
}

/**
 * Configurable elastic ease.
 * @param {Number} amplitude
 * @param {Number} period
 * @return {Function}
 */
function getElasticOut (amplitude, period) {
	let pi2 = Math.PI * 2;
	return function (t) {
		if (t === 0 || t === 1) return t;
		let s = period / pi2 * Math.asin(1 / amplitude);
		return amplitude * Math.pow(2, -10 * t) * Math.sin((t - s) * pi2 / period) + 1;
	};
}

/**
 * Configurable elastic ease.
 * @param {Number} amplitude
 * @param {Number} period
 * @return {Function}
 */
function getElasticInOut (amplitude, period) {
	let pi2 = Math.PI * 2;
	return function (t) {
		let s = period / pi2 * Math.asin(1 / amplitude);
		if ((t *= 2) < 1) return -0.5 * (amplitude * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * pi2 / period));
		return amplitude * Math.pow(2, -10 * (t -= 1)) * Math.sin((t - s) * pi2 / period) * 0.5 + 1;
	};
}

/**
 * Identical to linear.
 * @param {Number} t
 * @return {Number}
 */
const none = linear;
/**
 * @param {Number} t
 * @return {Number}
 */
const quadIn = getPowIn(2);
/**
 * @param {Number} t
 * @return {Number}
 */
const quadOut = getPowOut(2);
/**
 * @param {Number} t
 * @return {Number}
 */
const quadInOut = getPowInOut(2);
/**
 * @param {Number} t
 * @return {Number}
 */
const cubicIn = getPowIn(3);
/**
 * @param {Number} t
 * @return {Number}
 */
const cubicOut = getPowOut(3);
/**
 * @param {Number} t
 * @return {Number}
 */
const cubicInOut = getPowInOut(3);
/**
 * @param {Number} t
 * @return {Number}
 */
const quartIn = getPowIn(4);
/**
 * @param {Number} t
 * @return {Number}
 */
const quartOut = getPowOut(4);
/**
 * @param {Number} t
 * @return {Number}
 */
const quartInOut = getPowInOut(4);
/**
 * @param {Number} t
 * @return {Number}
 */
const quintIn = getPowIn(5);
/**
 * @param {Number} t
 * @return {Number}
 */
const quintOut = getPowOut(5);
/**
 * @param {Number} t
 * @return {Number}
 */
const quintInOut = getPowInOut(5);
/**
 * @param {Number} t
 * @return {Number}
 */
const backIn = getBackIn(1.7);
/**
 * @param {Number} t
 * @return {Number}
 */
const backOut = getBackOut(1.7);
/**
 * @param {Number} t
 * @return {Number}
 */
const backInOut = getBackInOut(1.7);
/**
 * @param {Number} t
 * @return {Number}
 */
const elasticIn = getElasticIn(1, 0.3);
/**
 * @param {Number} t
 * @return {Number}
 */
const elasticOut = getElasticOut(1, 0.3);
/**
 * @param {Number} t
 * @return {Number}
 */
const elasticInOut = getElasticInOut(1, 0.3 * 1.5);


/***/ }),

/***/ "./node_modules/@createjs/tweenjs/src/Timeline.js":
/*!********************************************************!*\
  !*** ./node_modules/@createjs/tweenjs/src/Timeline.js ***!
  \********************************************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => /* binding */ Timeline
/* harmony export */ });
/* harmony import */ var _AbstractTween__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AbstractTween */ "./node_modules/@createjs/tweenjs/src/AbstractTween.js");
/**
 * @license Timeline
 * Visit http://createjs.com/ for documentation, updates and examples.
 *
 * Copyright (c) 2010 gskinner.com, inc.
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */



/**
 * The Timeline class synchronizes multiple tweens and allows them to be controlled as a group. Please note that if a
 * timeline is looping, the tweens on it may appear to loop even if the "loop" property of the tween is false.
 *
 * NOTE: Timeline currently also accepts a param list in the form: `tweens, labels, props`. This is for backwards
 * compatibility only and will be removed in the future. Include tweens and labels as properties on the props object.
 *
 * @memberof tweenjs
 * @extends tweenjs.AbstractTween
 *
 * @param {Object} [props] The configuration properties to apply to this instance
 * @param {Boolean} [props.useTicks=false] See the {@link tweenjs.AbstractTween#useTicks} property for more information.
 * @param {Boolean} [props.ignoreGlobalPause=false] See the {@link tweenjs.AbstractTween#ignoreGlobalPause} for more information.
 * @param {Number|Boolean} [props.loop=0] See the {@link tweenjs.AbstractTween#loop} for more information.
 * @param {Boolean} [props.reversed=false] See the {@link tweenjs.AbstractTween#reversed} for more information.
 * @param {Boolean} [props.bounce=false] See the {@link tweenjs.AbstractTween#bounce} for more information.
 * @param {Number} [props.timeScale=1] See the {@link tweenjs.AbstractTween#timeScale} for more information.
 * @param {Boolean} [props.paused=false] See the {@link tweenjs.AbstractTween#paused} for more information.
 * @param {Number} [props.position] See the {@link tweenjs.AbstractTween#position} for more information.
 * @param {Boolean} [props.tweens]
 * @param {Number} [props.labels]
 * @param {Function} [props.onChange] Adds the specified function as a listener to the {@link tweenjs.AbstractTween#event:change} event.
 * @param {Function} [props.onComplete] Adds the specified function as a listener to the {@link tweenjs.AbstractTween#event:complete} event.
 */
class Timeline extends _AbstractTween__WEBPACK_IMPORTED_MODULE_0__.default {

	constructor (props = {}) {
		super(props);

		/**
		 * The array of tweens in the timeline. It is *strongly* recommended that you use
		 * {@link tweenjs.Tween#addTween} and {@link tweenjs.Tween#removeTween},
		 * rather than accessing this directly, but it is included for advanced uses.
		 * @type {Tween[]}
		 */
		this.tweens = [];

		if (props.tweens) { this.addTween(...props.tweens); }
		if (props.labels) { this.labels = props.labels; }

		this._init(props);
	}

	/**
	 * Adds one or more tweens (or timelines) to this timeline. The tweens will be paused (to remove them from the
	 * normal ticking system) and managed by this timeline. Adding a tween to multiple timelines will result in
	 * unexpected behaviour.
	 *
	 * @param {Tween} ...tweens The tween(s) to add. Accepts multiple arguments.
	 * @return {Tween} The first tween that was passed in.
	 */
	addTween (...tweens) {
		const l = tweens.length;
		if (l === 1) {
			const tween = tweens[0];
			this.tweens.push(tween);
			tween._parent = this;
			tween.paused = true;
			let d = tween.duration;
			if (tween.loop > 0) { d *= tween.loop + 1; }
			if (d > this.duration) { this.duration = d; }
			if (this.rawPosition >= 0) { tween.setPosition(this.rawPosition); }
			return tween;
		}
		if (l > 1) {
			for (let i = 0; i < l; i++) { this.addTween(tweens[i]); }
			return tweens[l - 1];
		}
		return null;
	}

	/**
	 * Removes one or more tweens from this timeline.
	 *
	 * @param {Tween} ...tweens The tween(s) to remove. Accepts multiple arguments.
	 * @return {Boolean} Returns `true` if all of the tweens were successfully removed.
	 */
	removeTween (...tweens) {
		const l = tweens.length;
		if (l === 1) {
			const tw = this.tweens;
			const tween = tweens[0];
			let i = tw.length;
			while (i--) {
				if (tw[i] === tween) {
					tw.splice(i, 1);
					tween._parent = null;
					if (tween.duration >= this.duration) { this.updateDuration(); }
					return true;
				}
			}
			return false;
		}
		if (l > 1) {
			let good = true;
			for (let i = 0; i < l; i++) { good = good && this.removeTween(tweens[i]); }
			return good;
		}
		return true;
	}

	/**
	 * Recalculates the duration of the timeline. The duration is automatically updated when tweens are added or removed,
	 * but this method is useful if you modify a tween after it was added to the timeline.
	 */
	updateDuration () {
		this.duration = 0;
		for (let i = 0, l = this.tweens.length; i < l; i++) {
			let tween = this.tweens[i];
			let d = tween.duration;
			if (tween.loop > 0) { d *= tween.loop + 1; }
			if (d > this.duration) { this.duration = d; }
		}
	}

	/**
	 * @throws Timeline cannot be cloned.
	 */
	clone () {
		throw "Timeline can not be cloned.";
	}

	/**
	 * @private
	 */
	_updatePosition (jump, end) {
		const t = this.position;
		for (let i = 0, l = this.tweens.length; i < l; i++) {
			this.tweens[i].setPosition(t, true, jump); // actions will run after all the tweens update.
		}
	}

	/**
	 * @private
	 */
	_runActionsRange (startPos, endPos, jump, includeStart) {
		//console.log("	range", startPos, endPos, jump, includeStart);
		const t = this.position;
		for (let i = 0, l = this.tweens.length; i < l; i++) {
			this.tweens[i]._runActions(startPos, endPos, jump, includeStart);
			if (t !== this.position) { return true; } // an action changed this timeline's position.
		}
	}

}


/***/ }),

/***/ "./node_modules/@createjs/tweenjs/src/Tween.js":
/*!*****************************************************!*\
  !*** ./node_modules/@createjs/tweenjs/src/Tween.js ***!
  \*****************************************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => /* binding */ Tween
/* harmony export */ });
/* harmony import */ var _AbstractTween__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AbstractTween */ "./node_modules/@createjs/tweenjs/src/AbstractTween.js");
/* harmony import */ var _Ease__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Ease */ "./node_modules/@createjs/tweenjs/src/Ease.js");
/* harmony import */ var _createjs_core_src_utils_Ticker__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @createjs/core/src/utils/Ticker */ "./node_modules/@createjs/core/src/utils/Ticker.js");
/**
 * @license Tween
 * Visit http://createjs.com/ for documentation, updates and examples.
 *
 * Copyright (c) 2017 gskinner.com, inc.
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */





/**
 * Tweens properties for a single target. Methods can be chained to create complex animation sequences:
 *
 * @example
 * Tween.get(target)
 *   .wait(500)
 *   .to({ alpha: 0, visible: false }, 1000)
 *   .call(handleComplete);
 *
 * Multiple tweens can share a target, however if they affect the same properties there could be unexpected
 * behaviour. To stop all tweens on an object, use {@link tweenjs.Tween#removeTweens} or pass `override:true`
 * in the props argument.
 *
 * 	createjs.Tween.get(target, {override:true}).to({x:100});
 *
 * Subscribe to the {@link tweenjs.Tween#event:change} event to be notified when the tween position changes.
 *
 * 	createjs.Tween.get(target, {override:true}).to({x:100}).addEventListener("change", handleChange);
 * 	function handleChange(event) {
 * 		// The tween changed.
 * 	}
 *
 * @see {@link tweenjs.Tween.get}
 *
 * @memberof tweenjs
 * @extends tweenjs.AbstractTween
 *
 * @param {Object} target The target object that will have its properties tweened.
 * @param {Object} [props] The configuration properties to apply to this instance (ex. `{loop:-1, paused:true}`).
 * @param {Boolean} [props.useTicks]
 * @param {Boolean} [props.ignoreGlobalPause]
 * @param {Number|Boolean} [props.loop]
 * @param {Boolean} [props.reversed]
 * @param {Boolean} [props.bounce]
 * @param {Number} [props.timeScale]
 * @param {Object} [props.pluginData]
 * @param {Boolean} [props.paused]
 * @param {*} [props.position] indicates the initial position for this tween
 * @param {*} [props.onChange] adds the specified function as a listener to the `change` event
 * @param {*} [props.onComplete] adds the specified function as a listener to the `complete` event
 * @param {*} [props.override] if true, removes all existing tweens for the target
 */
class Tween extends _AbstractTween__WEBPACK_IMPORTED_MODULE_0__.default {

	constructor (target, props) {
		super(props);

		/**
		 * Allows you to specify data that will be used by installed plugins. Each plugin uses this differently, but in general
		 * you specify data by assigning it to a property of `pluginData` with the same name as the plugin.
		 * Note that in many cases, this data is used as soon as the plugin initializes itself for the tween.
		 * As such, this data should be set before the first `to` call in most cases.
		 *
		 * Some plugins also store working data in this object, usually in a property named `_PluginClassName`.
		 * See the documentation for individual plugins for more details.
		 *
		 * @example
		 * myTween.pluginData.SmartRotation = data;
		 * myTween.pluginData.SmartRotation_disabled = true;
		 *
		 *
		 * @default null
		 * @type {Object}
		 */
		this.pluginData = null;

		/**
		 * The target of this tween. This is the object on which the tweened properties will be changed.
		 * @type {Object}
		 * @readonly
		 */
		this.target = target;

		/**
		 * Indicates the tween's current position is within a passive wait.
		 * @type {Boolean}
		 * @default false
		 * @readonly
		 */
		this.passive = false;

		/**
		 * @private
		 * @type {TweenStep}
		 */
		this._stepHead = new TweenStep(null, 0, 0, {}, null, true);

		/**
		 * @private
		 * @type {TweenStep}
		 */
		this._stepTail = this._stepHead;

		/**
		 * The position within the current step. Used by MovieClip.
		 * @private
		 * @type {Number}
		 * @default 0
		 */
		this._stepPosition = 0;

		/**
		 * @private
		 * @type {TweenAction}
		 * @default null
		 */
		this._actionHead = null;

		/**
		 * @private
		 * @type {TweenAction}
		 * @default null
		 */
		this._actionTail = null;

		/**
		 * Plugins added to this tween instance.
		 * @private
		 * @type {Object[]}
		 * @default null
		 */
		this._plugins = null;

		/**
		 * Hash for quickly looking up added plugins. Null until a plugin is added.
		 * @private
		 * @type {Object}
		 * @default null
		 */
		this._pluginIds = null;


		/**
		 * Used by plugins to inject new properties.
		 * @private
		 * @type {Object}
		 * @default null
		 */
		this._injected = null;

		if (props) {
			this.pluginData = props.pluginData;
			if (props.override) { Tween.removeTweens(target); }
		}
		if (!this.pluginData) { this.pluginData = {}; }

		this._init(props);
	}

	/**
	 * Returns a new tween instance. This is functionally identical to using `new Tween(...)`, but may look cleaner
	 * with the chained syntax of TweenJS.
	 *
	 * @static
	 * @example
	 * let tween = Tween.get(target).to({ x: 100 }, 500);
	 * // equivalent to:
	 * let tween = new Tween(target).to({ x: 100 }, 500);
	 *
	 * @param {Object} target The target object that will have its properties tweened.
	 * @param {Object} [props] The configuration properties to apply to this instance (ex. `{loop:-1, paused:true}`).
	 * @param {Boolean} [props.useTicks]
	 * @param {Boolean} [props.ignoreGlobalPause]
	 * @param {Number|Boolean} [props.loop]
	 * @param {Boolean} [props.reversed]
	 * @param {Boolean} [props.bounce]
	 * @param {Number} [props.timeScale]
	 * @param {Object} [props.pluginData]
	 * @param {Boolean} [props.paused]
	 * @param {*} [props.position] indicates the initial position for this tween
	 * @param {*} [props.onChange] adds the specified function as a listener to the `change` event
	 * @param {*} [props.onComplete] adds the specified function as a listener to the `complete` event
	 * @param {*} [props.override] if true, removes all existing tweens for the target
	 * @return {Tween} A reference to the created tween.
	 */
	static get (target, props) {
		return new Tween(target, props);
	}

	/**
	 * Advances all tweens. This typically uses the {{#crossLink "Ticker"}}{{/crossLink}} class, but you can call it
	 * manually if you prefer to use your own "heartbeat" implementation.
	 *
	 * @static
	 *
	 * @param {Number} delta The change in time in milliseconds since the last tick. Required unless all tweens have
	 * `useTicks` set to true.
	 * @param {Boolean} paused Indicates whether a global pause is in effect. Tweens with {@link tweenjs.Tween#ignoreGlobalPause}
	 * will ignore this, but all others will pause if this is `true`.
	 */
	static tick (delta, paused) {
		let tween = Tween._tweenHead;
		while (tween) {
			let next = tween._next; // in case it completes and wipes its _next property
			if ((paused && !tween.ignoreGlobalPause) || tween._paused) { /* paused */ }
			else { tween.advance(tween.useTicks ? 1: delta); }
			tween = next;
		}
	}

	/**
	 * Handle events that result from Tween being used as an event handler. This is included to allow Tween to handle
	 * {@link tweenjs.Ticker#event:tick} events from the {@link tweenjs.Ticker}.
	 * No other events are handled in Tween.
	 *
	 * @static
	 * @since 0.4.2
	 *
	 * @param {Object} event An event object passed in by the {@link core.EventDispatcher}. Will
	 * usually be of type "tick".
	 */
	static handleEvent (event) {
		if (event.type === "tick") {
			this.tick(event.delta, event.paused);
		}
	}

	/**
	 * Removes all existing tweens for a target. This is called automatically by new tweens if the `override`
	 * property is `true`.
	 *
	 * @static
	 *
	 * @param {Object} target The target object to remove existing tweens from.=
	 */
	static removeTweens (target) {
		if (!target.tweenjs_count) { return; }
		let tween = Tween._tweenHead;
		while (tween) {
			let next = tween._next;
			if (tween.target === target) { tween.paused = true; }
			tween = next;
		}
		target.tweenjs_count = 0;
	}

	/**
	 * Stop and remove all existing tweens.
	 *
	 * @static
	 * @since 0.4.1
	 */
	static removeAllTweens () {
		let tween = Tween._tweenHead;
		while (tween) {
			let next = tween._next;
			tween._paused = true;
			tween.target && (tween.target.tweenjs_count = 0);
			tween._next = tween._prev = null;
			tween = next;
		}
		Tween._tweenHead = Tween._tweenTail = null;
	}

	/**
	 * Indicates whether there are any active tweens on the target object (if specified) or in general.
	 *
	 * @static
	 *
	 * @param {Object} [target] The target to check for active tweens. If not specified, the return value will indicate
	 * if there are any active tweens on any target.
	 * @return {Boolean} Indicates if there are active tweens.
	 */
	static hasActiveTweens (target) {
		if (target) { return !!target.tweenjs_count; }
		return !!Tween._tweenHead;
	}

	/**
	 * Installs a plugin, which can modify how certain properties are handled when tweened. See the {{#crossLink "SamplePlugin"}}{{/crossLink}}
	 * for an example of how to write TweenJS plugins. Plugins should generally be installed via their own `install` method, in order to provide
	 * the plugin with an opportunity to configure itself.
	 *
	 * @static
	 *
	 * @param {Object} plugin The plugin to install
	 * @param {Object} props The props to pass to the plugin
	 */
	static installPlugin (plugin, props) {
		plugin.install(props);
		const priority = (plugin.priority = plugin.priority || 0), arr = (Tween._plugins = Tween._plugins || []);
		for (let i = 0, l = arr.length; i < l; i++) {
			if (priority < arr[i].priority) { break; }
		}
		arr.splice(i, 0, plugin);
	}

	/**
	 * Registers or unregisters a tween with the ticking system.
	 *
	 * @private
	 * @static
	 *
	 * @param {Tween} tween The tween instance to register or unregister.
	 * @param {Boolean} paused If `false`, the tween is registered. If `true` the tween is unregistered.
	 */
	static _register (tween, paused) {
		const target = tween.target;
		if (!paused && tween._paused) {
			// TODO: this approach might fail if a dev is using sealed objects
			if (target) { target.tweenjs_count = target.tweenjs_count ? target.tweenjs_count + 1 : 1; }
			let tail = Tween._tweenTail;
			if (!tail) { Tween._tweenHead = Tween._tweenTail = tween; }
			else {
				Tween._tweenTail = tail._next = tween;
				tween._prev = tail;
			}
			if (!Tween._inited) { _createjs_core_src_utils_Ticker__WEBPACK_IMPORTED_MODULE_2__.default.addEventListener("tick", Tween); Tween._inited = true; }
		} else if (paused && !tween._paused) {
			if (target) { target.tweenjs_count--; }
			let next = tween._next, prev = tween._prev;

			if (next) { next._prev = prev; }
			else { Tween._tweenTail = prev; } // was tail
			if (prev) { prev._next = next; }
			else { Tween._tweenHead = next; } // was head.

			tween._next = tween._prev = null;
		}
	}

	/**
	 * Adds a wait (essentially an empty tween).
	 *
	 * @example
	 * // This tween will wait 1s before alpha is faded to 0.
	 * Tween.get(target)
	 *   .wait(1000)
	 *   .to({ alpha: 0 }, 1000);
	 *
	 * @param {Number} duration The duration of the wait in milliseconds (or in ticks if `useTicks` is true).
	 * @param {Boolean} [passive=false] Tween properties will not be updated during a passive wait. This
	 * is mostly useful for use with {@link tweenjs.Timeline} instances that contain multiple tweens
	 * affecting the same target at different times.
	 * @chainable
	 */
	wait (duration, passive = false) {
		if (duration > 0) { this._addStep(+duration, this._stepTail.props, null, passive); }
		return this;
	}

	/**
	 * Adds a tween from the current values to the specified properties. Set duration to 0 to jump to these value.
	 * Numeric properties will be tweened from their current value in the tween to the target value. Non-numeric
	 * properties will be set at the end of the specified duration.
	 *
	 * @example
	 * Tween.get(target)
	 *   .to({ alpha: 0, visible: false }, 1000);
	 *
	 * @param {Object} props An object specifying property target values for this tween (Ex. `{x:300}` would tween the x
	 * property of the target to 300).
	 * @param {Number} [duration=0] The duration of the tween in milliseconds (or in ticks if `useTicks` is true).
	 * @param {Function} [ease=Ease.linear] The easing function to use for this tween. See the {@link tweenjs.Ease}
	 * class for a list of built-in ease functions.
	 * @chainable
	 */
	to (props, duration = 0, ease = _Ease__WEBPACK_IMPORTED_MODULE_1__.linear) {
		if (duration < 0) { duration = 0; }
		const step = this._addStep(+duration, null, ease);
		this._appendProps(props, step);
		return this;
	}

	/**
	 * Adds a label that can be used with {@link tweenjs.Tween#gotoAndPlay}/{@link tweenjs.Tween#gotoAndStop}
	 * at the current point in the tween.
	 *
	 * @example
	 * let tween = Tween.get(foo)
	 *   .to({ x: 100 }, 1000)
	 *   .label("myLabel")
	 *   .to({ x: 200 }, 1000);
	 * // ...
	 * tween.gotoAndPlay("myLabel"); // would play from 1000ms in.
	 *
	 * @param {String} label The label name.
	 * @chainable
	 */
	label (name) {
		this.addLabel(name, this.duration);
		return this;
	}

	/**
	 * Adds an action to call the specified function.
	 *
	 * @example
	 * // would call myFunction() after 1 second.
	 * Tween.get()
	 *   .wait(1000)
	 *   .call(myFunction);
	 *
	 * @param {Function} callback The function to call.
	 * @param {Array} [params]. The parameters to call the function with. If this is omitted, then the function
	 * will be called with a single param pointing to this tween.
	 * @param {Object} [scope]. The scope to call the function in. If omitted, it will be called in the target's scope.
	 * @chainable
	 */
	call (callback, params, scope) {
		return this._addAction(scope || this.target, callback, params || [this]);
	}

	/**
	 * Adds an action to set the specified props on the specified target. If `target` is null, it will use this tween's
	 * target. Note that for properties on the target object, you should consider using a zero duration {@link tweenjs.Tween#to}
	 * operation instead so the values are registered as tweened props.
	 *
	 * @example
	 * tween.wait(1000)
	 *   .set({ visible: false }, foo);
	 *
	 * @param {Object} props The properties to set (ex. `{ visible: false }`).
	 * @param {Object} [target] The target to set the properties on. If omitted, they will be set on the tween's target.
	 * @chainable
	 */
	set (props, target) {
		return this._addAction(target || this.target, this._set, [ props ]);
	}

	/**
	 * Adds an action to play (unpause) the specified tween. This enables you to sequence multiple tweens.
	 *
	 * @example
	 * tween.to({ x: 100 }, 500)
	 *   .play(otherTween);
	 *
	 * @param {Tween} [tween] The tween to play. Defaults to this tween.
	 * @chainable
	 */
	play (tween) {
    return this._addAction(tween || this, this._set, [{ paused: false }]);
	}

	/**
	 * Adds an action to pause the specified tween.
	 * At 60fps the tween will advance by ~16ms per tick, if the tween above was at 999ms prior to the current tick, it
   * will advance to 1015ms (15ms into the second "step") and then pause.
	 *
	 * @example
	 * tween.pause(otherTween)
	 *   .to({ alpha: 1 }, 1000)
	 *   .play(otherTween);
	 *
	 * // Note that this executes at the end of a tween update,
	 * // so the tween may advance beyond the time the pause action was inserted at.
   *
   * tween.to({ foo: 0 }, 1000)
   *   .pause()
   *   .to({ foo: 1 }, 1000);
	 *
	 * @param {Tween} [tween] The tween to pause. Defaults to this tween.
	 * @chainable
	 */
	pause (tween) {
		return this._addAction(tween || this, this._set, [{ paused: false }]);
	}

	/**
	 * @throws Tween cannot be cloned.
	 */
	clone () {
		throw "Tween can not be cloned.";
	}

	/**
	 * @private
	 * @param {Object} plugin
	 */
	_addPlugin (plugin) {
		let ids = this._pluginIds || (this._pluginIds = {}), id = plugin.id;
		if (!id || ids[id]) { return; } // already added

		ids[id] = true;
		let plugins = this._plugins || (this._plugins = []), priority = plugin.priority || 0;
		for (let i = 0, l = plugins.length; i < l; i++) {
			if (priority < plugins[i].priority) {
				plugins.splice(i, 0, plugin);
				return;
			}
		}
		plugins.push(plugin);
	}

	/**
	 * @private
	 * @param {} jump
	 * @param {Boolean} end
   */
	_updatePosition (jump, end) {
		let step = this._stepHead.next, t = this.position, d = this.duration;
		if (this.target && step) {
			// find our new step index:
			let stepNext = step.next;
			while (stepNext && stepNext.t <= t) { step = step.next; stepNext = step.next; }
			let ratio = end ? d === 0 ? 1 : t/d : (t-step.t)/step.d; // TODO: revisit this.
			this._updateTargetProps(step, ratio, end);
		}
		this._stepPosition = step ? t - step.t : 0;
	}

	/**
	 * @private
	 * @param {Object} step
	 * @param {Number} ratio
	 * @param {Boolean} end Indicates to plugins that the full tween has ended.
	 */
	_updateTargetProps (step, ratio, end) {
		if (this.passive = !!step.passive) { return; } // don't update props.

		let v, v0, v1, ease;
		let p0 = step.prev.props;
		let p1 = step.props;
		if (ease = step.ease) { ratio = ease(ratio, 0, 1, 1); }

		let plugins = this._plugins;
		proploop : for (let n in p0) {
			v0 = p0[n];
			v1 = p1[n];

			// values are different & it is numeric then interpolate:
			if (v0 !== v1 && (typeof(v0) === "number")) {
				v = v0 + (v1 - v0) * ratio;
			} else {
				v = ratio >= 1 ? v1 : v0;
			}

			if (plugins) {
				for (let i = 0, l = plugins.length; i < l; i++) {
					let value = plugins[i].change(this, step, n, v, ratio, end);
					if (value === Tween.IGNORE) { continue proploop; }
					if (value !== undefined) { v = value; }
				}
			}
			this.target[n] = v;
		}

	}

	/**
	 * @private
	 * @param {Number} startPos
	 * @param {Number} endPos
	 * @param {Boolean} includeStart
	 */
	_runActionsRange (startPos, endPos, jump, includeStart) {
		let rev = startPos > endPos;
		let action = rev ? this._actionTail : this._actionHead;
		let ePos = endPos, sPos = startPos;
		if (rev) { ePos = startPos; sPos = endPos; }
		let t = this.position;
		while (action) {
			let pos = action.t;
			if (pos === endPos || (pos > sPos && pos < ePos) || (includeStart && pos === startPos)) {
				action.funct.apply(action.scope, action.params);
				if (t !== this.position) { return true; }
			}
			action = rev ? action.prev : action.next;
		}
	}

	/**
	 * @private
	 * @param {Object} props
	 */
	_appendProps (props, step, stepPlugins) {
		let initProps = this._stepHead.props, target = this.target, plugins = Tween._plugins;
		let n, i, l, value, initValue, inject;

		let oldStep = step.prev, oldProps = oldStep.props;
		let stepProps = step.props || (step.props = this._cloneProps(oldProps));
		let cleanProps = {};

		for (n in props) {
			if (!props.hasOwnProperty(n)) { continue; }
			cleanProps[n] = stepProps[n] = props[n];

			if (initProps[n] !== undefined) { continue; }

			initValue = undefined; // accessing missing properties on DOMElements when using CSSPlugin is INSANELY expensive, so we let the plugin take a first swing at it.
			if (plugins) {
        for (i = plugins.length - 1; i >= 0; i--) {
					value = plugins[i].init(this, n, initValue);
					if (value !== undefined) { initValue = value; }
					if (initValue === Tween.IGNORE) {
						(ignored = ignored || {})[n] = true;
						delete(stepProps[n]);
						delete(cleanProps[n]);
						break;
					}
				}
			}

			if (initValue !== Tween.IGNORE) {
				if (initValue === undefined) { initValue = target[n]; }
				oldProps[n] = (initValue === undefined) ? null : initValue;
			}
		}

		for (n in cleanProps) {
			value = props[n];

			// propagate old value to previous steps:
			let o, prev = oldStep;
			while ((o = prev) && (prev = o.prev)) {
				if (prev.props === o.props) { continue; } // wait step
				if (prev.props[n] !== undefined) { break; } // already has a value, we're done.
				prev.props[n] = oldProps[n];
			}
		}

		if (stepPlugins && (plugins = this._plugins)) {
      for (i = plugins.length - 1; i >= 0; i--) {
				plugins[i].step(this, step, cleanProps);
			}
		}

		if (inject = this._injected) {
			this._injected = null;
			this._appendProps(inject, step, false);
		}
	}

	/**
	 * Used by plugins to inject properties onto the current step. Called from within `Plugin.step` calls.
	 * For example, a plugin dealing with color, could read a hex color, and inject red, green, and blue props into the tween.
	 * See the SamplePlugin for more info.
	 * @see tweenjs.SamplePlugin
	 * @private
	 * @param {String} name
	 * @param {Object} value
	 */
	_injectProp (name, value) {
		let o = this._injected || (this._injected = {});
		o[name] = value;
	}

	/**
	 * @private
	 * @param {Number} duration
	 * @param {Object} props
	 * @param {Function} ease
	 * @param {Boolean} [passive=false]
	 */
	_addStep (duration, props, ease, passive = false) {
		let step = new TweenStep(this._stepTail, this.duration, duration, props, ease, passive);
		this.duration += duration;
		return this._stepTail = (this._stepTail.next = step);
	}

	/**
	 * @private
	 * @param {Object} scope
	 * @param {Function} funct
	 * @param {Array} params
	 */
	_addAction (scope, funct, params) {
		let action = new TweenAction(this._actionTail, this.duration, scope, funct, params);
		if (this._actionTail) { this._actionTail.next = action; }
		else { this._actionHead = action; }
		this._actionTail = action;
		return this;
	}

	/**
	 * @private
	 * @param {Object} props
	 */
	_set (props) {
		for (let n in props) {
			this[n] = props[n];
		}
	}

	/**
	 * @private
	 * @param {Object} props
	 */
	_cloneProps (props) {
		let o = {};
		for (let n in props) { o[n] = props[n]; }
		return o;
	}

}

// tiny api (primarily for tool output):
{
	let p = Tween.prototype;
	p.w = p.wait;
	p.t = p.to;
	p.c = p.call;
	p.s = p.set;
}

// static properties
/**
 * Constant returned by plugins to tell the tween not to use default assignment.
 * @property IGNORE
 * @type {Object}
 * @static
 */
Tween.IGNORE = {};

/**
 * @property _listeners
 * @type {Tween[]}
 * @static
 * @private
 */
Tween._tweens = [];

/**
 * @property _plugins
 * @type {Object}
 * @static
 * @private
 */
Tween._plugins = null;

/**
 * @property _tweenHead
 * @type {Tween}
 * @static
 * @private
 */
Tween._tweenHead = null;

/**
 * @property _tweenTail
 * @type {Tween}
 * @static
 * @private
 */
Tween._tweenTail = null;

// helpers:

/**
 * @private
 * @param {*} prev
 * @param {*} t
 * @param {*} d
 * @param {*} props
 * @param {*} ease
 * @param {*} passive
 */
class TweenStep {

	constructor (prev, t, d, props, ease, passive) {
		this.next = null;
		this.prev = prev;
		this.t = t;
		this.d = d;
		this.props = props;
		this.ease = ease;
		this.passive = passive;
		this.index = prev ? prev.index + 1 : 0;
	}

}

/**
 * @private
 * @param {*} prev
 * @param {*} t
 * @param {*} scope
 * @param {*} funct
 * @param {*} params
 */
class TweenAction {

	constructor (prev, t, scope, funct, params) {
		this.next = null;
		this.d = 0;
		this.prev = prev;
		this.t = t;
		this.scope = scope;
		this.funct = funct;
		this.params = params;
	}

}


/***/ }),

/***/ "./node_modules/@createjs/tweenjs/src/main.js":
/*!****************************************************!*\
  !*** ./node_modules/@createjs/tweenjs/src/main.js ***!
  \****************************************************/
/*! namespace exports */
/*! export AbstractTween [provided] [no usage info] [missing usage info prevents renaming] -> ./node_modules/@createjs/tweenjs/src/AbstractTween.js .default */
/*! export Ease [provided] [no usage info] [missing usage info prevents renaming] -> ./node_modules/@createjs/tweenjs/src/Ease.js */
/*!   export backIn [provided] [no usage info] [missing usage info prevents renaming] */
/*!   export backInOut [provided] [no usage info] [missing usage info prevents renaming] */
/*!   export backOut [provided] [no usage info] [missing usage info prevents renaming] */
/*!   export bounceIn [provided] [no usage info] [missing usage info prevents renaming] */
/*!   export bounceInOut [provided] [no usage info] [missing usage info prevents renaming] */
/*!   export bounceOut [provided] [no usage info] [missing usage info prevents renaming] */
/*!   export circIn [provided] [no usage info] [missing usage info prevents renaming] */
/*!   export circInOut [provided] [no usage info] [missing usage info prevents renaming] */
/*!   export circOut [provided] [no usage info] [missing usage info prevents renaming] */
/*!   export cubicIn [provided] [no usage info] [missing usage info prevents renaming] */
/*!   export cubicInOut [provided] [no usage info] [missing usage info prevents renaming] */
/*!   export cubicOut [provided] [no usage info] [missing usage info prevents renaming] */
/*!   export elasticIn [provided] [no usage info] [missing usage info prevents renaming] */
/*!   export elasticInOut [provided] [no usage info] [missing usage info prevents renaming] */
/*!   export elasticOut [provided] [no usage info] [missing usage info prevents renaming] */
/*!   export get [provided] [no usage info] [missing usage info prevents renaming] */
/*!   export getBackIn [provided] [no usage info] [missing usage info prevents renaming] */
/*!   export getBackInOut [provided] [no usage info] [missing usage info prevents renaming] */
/*!   export getBackOut [provided] [no usage info] [missing usage info prevents renaming] */
/*!   export getElasticIn [provided] [no usage info] [missing usage info prevents renaming] */
/*!   export getElasticInOut [provided] [no usage info] [missing usage info prevents renaming] */
/*!   export getElasticOut [provided] [no usage info] [missing usage info prevents renaming] */
/*!   export getPowIn [provided] [no usage info] [missing usage info prevents renaming] */
/*!   export getPowInOut [provided] [no usage info] [missing usage info prevents renaming] */
/*!   export getPowOut [provided] [no usage info] [missing usage info prevents renaming] */
/*!   export linear [provided] [no usage info] [missing usage info prevents renaming] */
/*!   export none [provided] [no usage info] [missing usage info prevents renaming] */
/*!   export quadIn [provided] [no usage info] [missing usage info prevents renaming] */
/*!   export quadInOut [provided] [no usage info] [missing usage info prevents renaming] */
/*!   export quadOut [provided] [no usage info] [missing usage info prevents renaming] */
/*!   export quartIn [provided] [no usage info] [missing usage info prevents renaming] */
/*!   export quartInOut [provided] [no usage info] [missing usage info prevents renaming] */
/*!   export quartOut [provided] [no usage info] [missing usage info prevents renaming] */
/*!   export quintIn [provided] [no usage info] [missing usage info prevents renaming] */
/*!   export quintInOut [provided] [no usage info] [missing usage info prevents renaming] */
/*!   export quintOut [provided] [no usage info] [missing usage info prevents renaming] */
/*!   export sineIn [provided] [no usage info] [missing usage info prevents renaming] */
/*!   export sineInOut [provided] [no usage info] [missing usage info prevents renaming] */
/*!   export sineOut [provided] [no usage info] [missing usage info prevents renaming] */
/*!   other exports [not provided] [no usage info] */
/*! export Event [provided] [no usage info] [missing usage info prevents renaming] -> ./node_modules/@createjs/core/src/events/Event.js .default */
/*! export EventDispatcher [provided] [no usage info] [missing usage info prevents renaming] -> ./node_modules/@createjs/core/src/events/EventDispatcher.js .default */
/*! export Ticker [provided] [no usage info] [missing usage info prevents renaming] -> ./node_modules/@createjs/core/src/utils/Ticker.js .default */
/*! export Timeline [provided] [no usage info] [missing usage info prevents renaming] -> ./node_modules/@createjs/tweenjs/src/Timeline.js .default */
/*! export Tween [provided] [no usage info] [missing usage info prevents renaming] -> ./node_modules/@createjs/tweenjs/src/Tween.js .default */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_exports__, __webpack_require__.d, __webpack_require__.r, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Event": () => /* reexport safe */ _createjs_core__WEBPACK_IMPORTED_MODULE_0__.Event,
/* harmony export */   "EventDispatcher": () => /* reexport safe */ _createjs_core__WEBPACK_IMPORTED_MODULE_0__.EventDispatcher,
/* harmony export */   "Ticker": () => /* reexport safe */ _createjs_core__WEBPACK_IMPORTED_MODULE_0__.Ticker,
/* harmony export */   "Tween": () => /* reexport safe */ _Tween__WEBPACK_IMPORTED_MODULE_1__.default,
/* harmony export */   "AbstractTween": () => /* reexport safe */ _AbstractTween__WEBPACK_IMPORTED_MODULE_2__.default,
/* harmony export */   "Timeline": () => /* reexport safe */ _Timeline__WEBPACK_IMPORTED_MODULE_3__.default,
/* harmony export */   "Ease": () => /* reexport module object */ _Ease__WEBPACK_IMPORTED_MODULE_4__
/* harmony export */ });
/* harmony import */ var _createjs_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @createjs/core */ "./node_modules/@createjs/core/src/main.js");
/* harmony import */ var _Tween__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Tween */ "./node_modules/@createjs/tweenjs/src/Tween.js");
/* harmony import */ var _AbstractTween__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./AbstractTween */ "./node_modules/@createjs/tweenjs/src/AbstractTween.js");
/* harmony import */ var _Timeline__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Timeline */ "./node_modules/@createjs/tweenjs/src/Timeline.js");
/* harmony import */ var _Ease__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Ease */ "./node_modules/@createjs/tweenjs/src/Ease.js");
/**
 * README: Export Order
 *
 * Due to some classes having circular import bindings (whether at the top of the import chain or deeper in),
 * some exports here are in reverse order (such as Tween being exported before AbstractTween).
 * This is explained here: https://github.com/rollup/rollup/issues/845#issuecomment-240277194
 */

/**
 * @namespace tweenjs
 */










/***/ }),

/***/ "./node_modules/jquery/dist/jquery.js":
/*!********************************************!*\
  !*** ./node_modules/jquery/dist/jquery.js ***!
  \********************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, top-level-this-exports, __webpack_exports__ */
/*! CommonJS bailout: this is used directly at 40:46-50 */
/*! CommonJS bailout: module.exports is used directly at 18:43-57 */
/*! CommonJS bailout: module.exports is used directly at 27:2-16 */
/***/ (function(module, exports) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
 * jQuery JavaScript Library v3.5.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2020-05-04T22:49Z
 */
( function( global, factory ) {

	"use strict";

	if (  true && typeof module.exports === "object" ) {

		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info.
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
} )( typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
// enough that all such attempts are guarded in a try block.
"use strict";

var arr = [];

var getProto = Object.getPrototypeOf;

var slice = arr.slice;

var flat = arr.flat ? function( array ) {
	return arr.flat.call( array );
} : function( array ) {
	return arr.concat.apply( [], array );
};


var push = arr.push;

var indexOf = arr.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var fnToString = hasOwn.toString;

var ObjectFunctionString = fnToString.call( Object );

var support = {};

var isFunction = function isFunction( obj ) {

      // Support: Chrome <=57, Firefox <=52
      // In some browsers, typeof returns "function" for HTML <object> elements
      // (i.e., `typeof document.createElement( "object" ) === "function"`).
      // We don't want to classify *any* DOM node as a function.
      return typeof obj === "function" && typeof obj.nodeType !== "number";
  };


var isWindow = function isWindow( obj ) {
		return obj != null && obj === obj.window;
	};


var document = window.document;



	var preservedScriptAttributes = {
		type: true,
		src: true,
		nonce: true,
		noModule: true
	};

	function DOMEval( code, node, doc ) {
		doc = doc || document;

		var i, val,
			script = doc.createElement( "script" );

		script.text = code;
		if ( node ) {
			for ( i in preservedScriptAttributes ) {

				// Support: Firefox 64+, Edge 18+
				// Some browsers don't support the "nonce" property on scripts.
				// On the other hand, just using `getAttribute` is not enough as
				// the `nonce` attribute is reset to an empty string whenever it
				// becomes browsing-context connected.
				// See https://github.com/whatwg/html/issues/2369
				// See https://html.spec.whatwg.org/#nonce-attributes
				// The `node.getAttribute` check was added for the sake of
				// `jQuery.globalEval` so that it can fake a nonce-containing node
				// via an object.
				val = node[ i ] || node.getAttribute && node.getAttribute( i );
				if ( val ) {
					script.setAttribute( i, val );
				}
			}
		}
		doc.head.appendChild( script ).parentNode.removeChild( script );
	}


function toType( obj ) {
	if ( obj == null ) {
		return obj + "";
	}

	// Support: Android <=2.3 only (functionish RegExp)
	return typeof obj === "object" || typeof obj === "function" ?
		class2type[ toString.call( obj ) ] || "object" :
		typeof obj;
}
/* global Symbol */
// Defining this global in .eslintrc.json would create a danger of using the global
// unguarded in another place, it seems safer to define global only for this module



var
	version = "3.5.1",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {

		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	};

jQuery.fn = jQuery.prototype = {

	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {

		// Return all the elements in a clean array
		if ( num == null ) {
			return slice.call( this );
		}

		// Return just the one element from the set
		return num < 0 ? this[ num + this.length ] : this[ num ];
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	each: function( callback ) {
		return jQuery.each( this, callback );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map( this, function( elem, i ) {
			return callback.call( elem, i, elem );
		} ) );
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	even: function() {
		return this.pushStack( jQuery.grep( this, function( _elem, i ) {
			return ( i + 1 ) % 2;
		} ) );
	},

	odd: function() {
		return this.pushStack( jQuery.grep( this, function( _elem, i ) {
			return i % 2;
		} ) );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor();
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: arr.sort,
	splice: arr.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[ 0 ] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// Skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !isFunction( target ) ) {
		target = {};
	}

	// Extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {

		// Only deal with non-null/undefined values
		if ( ( options = arguments[ i ] ) != null ) {

			// Extend the base object
			for ( name in options ) {
				copy = options[ name ];

				// Prevent Object.prototype pollution
				// Prevent never-ending loop
				if ( name === "__proto__" || target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
					( copyIsArray = Array.isArray( copy ) ) ) ) {
					src = target[ name ];

					// Ensure proper type for the source value
					if ( copyIsArray && !Array.isArray( src ) ) {
						clone = [];
					} else if ( !copyIsArray && !jQuery.isPlainObject( src ) ) {
						clone = {};
					} else {
						clone = src;
					}
					copyIsArray = false;

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend( {

	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	isPlainObject: function( obj ) {
		var proto, Ctor;

		// Detect obvious negatives
		// Use toString instead of jQuery.type to catch host objects
		if ( !obj || toString.call( obj ) !== "[object Object]" ) {
			return false;
		}

		proto = getProto( obj );

		// Objects with no prototype (e.g., `Object.create( null )`) are plain
		if ( !proto ) {
			return true;
		}

		// Objects with prototype are plain iff they were constructed by a global Object function
		Ctor = hasOwn.call( proto, "constructor" ) && proto.constructor;
		return typeof Ctor === "function" && fnToString.call( Ctor ) === ObjectFunctionString;
	},

	isEmptyObject: function( obj ) {
		var name;

		for ( name in obj ) {
			return false;
		}
		return true;
	},

	// Evaluates a script in a provided context; falls back to the global one
	// if not specified.
	globalEval: function( code, options, doc ) {
		DOMEval( code, { nonce: options && options.nonce }, doc );
	},

	each: function( obj, callback ) {
		var length, i = 0;

		if ( isArrayLike( obj ) ) {
			length = obj.length;
			for ( ; i < length; i++ ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		} else {
			for ( i in obj ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		}

		return obj;
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArrayLike( Object( arr ) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		return arr == null ? -1 : indexOf.call( arr, elem, i );
	},

	// Support: Android <=4.0 only, PhantomJS 1 only
	// push.apply(_, arraylike) throws on ancient WebKit
	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		for ( ; j < len; j++ ) {
			first[ i++ ] = second[ j ];
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var length, value,
			i = 0,
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArrayLike( elems ) ) {
			length = elems.length;
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return flat( ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
} );

if ( typeof Symbol === "function" ) {
	jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
}

// Populate the class2type map
jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
function( _i, name ) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
} );

function isArrayLike( obj ) {

	// Support: real iOS 8.2 only (not reproducible in simulator)
	// `in` check used to prevent JIT error (gh-2145)
	// hasOwn isn't used here due to false negatives
	// regarding Nodelist length in IE
	var length = !!obj && "length" in obj && obj.length,
		type = toType( obj );

	if ( isFunction( obj ) || isWindow( obj ) ) {
		return false;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v2.3.5
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://js.foundation/
 *
 * Date: 2020-03-14
 */
( function( window ) {
var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + 1 * new Date(),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	nonnativeSelectorCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// Instance methods
	hasOwn = ( {} ).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	pushNative = arr.push,
	push = arr.push,
	slice = arr.slice,

	// Use a stripped-down indexOf as it's faster than native
	// https://jsperf.com/thor-indexof-vs-for/5
	indexOf = function( list, elem ) {
		var i = 0,
			len = list.length;
		for ( ; i < len; i++ ) {
			if ( list[ i ] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|" +
		"ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",

	// https://www.w3.org/TR/css-syntax-3/#ident-token-diagram
	identifier = "(?:\\\\[\\da-fA-F]{1,6}" + whitespace +
		"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +

		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +

		// "Attribute values must be CSS identifiers [capture 5]
		// or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" +
		whitespace + "*\\]",

	pseudos = ":(" + identifier + ")(?:\\((" +

		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +

		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +

		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" +
		whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace +
		"*" ),
	rdescend = new RegExp( whitespace + "|>" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + identifier + ")" ),
		"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
		"TAG": new RegExp( "^(" + identifier + "|[*])" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" +
			whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" +
			whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),

		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace +
			"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace +
			"*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rhtml = /HTML$/i,
	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,

	// CSS escapes
	// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\[\\da-fA-F]{1,6}" + whitespace + "?|\\\\([^\\r\\n\\f])", "g" ),
	funescape = function( escape, nonHex ) {
		var high = "0x" + escape.slice( 1 ) - 0x10000;

		return nonHex ?

			// Strip the backslash prefix from a non-hex escape sequence
			nonHex :

			// Replace a hexadecimal escape sequence with the encoded Unicode code point
			// Support: IE <=11+
			// For values outside the Basic Multilingual Plane (BMP), manually construct a
			// surrogate pair
			high < 0 ?
				String.fromCharCode( high + 0x10000 ) :
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// CSS string/identifier serialization
	// https://drafts.csswg.org/cssom/#common-serializing-idioms
	rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
	fcssescape = function( ch, asCodePoint ) {
		if ( asCodePoint ) {

			// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
			if ( ch === "\0" ) {
				return "\uFFFD";
			}

			// Control characters and (dependent upon position) numbers get escaped as code points
			return ch.slice( 0, -1 ) + "\\" +
				ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
		}

		// Other potentially-special ASCII characters get backslash-escaped
		return "\\" + ch;
	},

	// Used for iframes
	// See setDocument()
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE
	unloadHandler = function() {
		setDocument();
	},

	inDisabledFieldset = addCombinator(
		function( elem ) {
			return elem.disabled === true && elem.nodeName.toLowerCase() === "fieldset";
		},
		{ dir: "parentNode", next: "legend" }
	);

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		( arr = slice.call( preferredDoc.childNodes ) ),
		preferredDoc.childNodes
	);

	// Support: Android<4.0
	// Detect silently failing push.apply
	// eslint-disable-next-line no-unused-expressions
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			pushNative.apply( target, slice.call( els ) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;

			// Can't trust NodeList.length
			while ( ( target[ j++ ] = els[ i++ ] ) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var m, i, elem, nid, match, groups, newSelector,
		newContext = context && context.ownerDocument,

		// nodeType defaults to 9, since context defaults to document
		nodeType = context ? context.nodeType : 9;

	results = results || [];

	// Return early from calls with invalid selector or context
	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	// Try to shortcut find operations (as opposed to filters) in HTML documents
	if ( !seed ) {
		setDocument( context );
		context = context || document;

		if ( documentIsHTML ) {

			// If the selector is sufficiently simple, try using a "get*By*" DOM method
			// (excepting DocumentFragment context, where the methods don't exist)
			if ( nodeType !== 11 && ( match = rquickExpr.exec( selector ) ) ) {

				// ID selector
				if ( ( m = match[ 1 ] ) ) {

					// Document context
					if ( nodeType === 9 ) {
						if ( ( elem = context.getElementById( m ) ) ) {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( elem.id === m ) {
								results.push( elem );
								return results;
							}
						} else {
							return results;
						}

					// Element context
					} else {

						// Support: IE, Opera, Webkit
						// TODO: identify versions
						// getElementById can match elements by name instead of ID
						if ( newContext && ( elem = newContext.getElementById( m ) ) &&
							contains( context, elem ) &&
							elem.id === m ) {

							results.push( elem );
							return results;
						}
					}

				// Type selector
				} else if ( match[ 2 ] ) {
					push.apply( results, context.getElementsByTagName( selector ) );
					return results;

				// Class selector
				} else if ( ( m = match[ 3 ] ) && support.getElementsByClassName &&
					context.getElementsByClassName ) {

					push.apply( results, context.getElementsByClassName( m ) );
					return results;
				}
			}

			// Take advantage of querySelectorAll
			if ( support.qsa &&
				!nonnativeSelectorCache[ selector + " " ] &&
				( !rbuggyQSA || !rbuggyQSA.test( selector ) ) &&

				// Support: IE 8 only
				// Exclude object elements
				( nodeType !== 1 || context.nodeName.toLowerCase() !== "object" ) ) {

				newSelector = selector;
				newContext = context;

				// qSA considers elements outside a scoping root when evaluating child or
				// descendant combinators, which is not what we want.
				// In such cases, we work around the behavior by prefixing every selector in the
				// list with an ID selector referencing the scope context.
				// The technique has to be used as well when a leading combinator is used
				// as such selectors are not recognized by querySelectorAll.
				// Thanks to Andrew Dupont for this technique.
				if ( nodeType === 1 &&
					( rdescend.test( selector ) || rcombinators.test( selector ) ) ) {

					// Expand context for sibling selectors
					newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
						context;

					// We can use :scope instead of the ID hack if the browser
					// supports it & if we're not changing the context.
					if ( newContext !== context || !support.scope ) {

						// Capture the context ID, setting it first if necessary
						if ( ( nid = context.getAttribute( "id" ) ) ) {
							nid = nid.replace( rcssescape, fcssescape );
						} else {
							context.setAttribute( "id", ( nid = expando ) );
						}
					}

					// Prefix every selector in the list
					groups = tokenize( selector );
					i = groups.length;
					while ( i-- ) {
						groups[ i ] = ( nid ? "#" + nid : ":scope" ) + " " +
							toSelector( groups[ i ] );
					}
					newSelector = groups.join( "," );
				}

				try {
					push.apply( results,
						newContext.querySelectorAll( newSelector )
					);
					return results;
				} catch ( qsaError ) {
					nonnativeSelectorCache( selector, true );
				} finally {
					if ( nid === expando ) {
						context.removeAttribute( "id" );
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {

		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {

			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return ( cache[ key + " " ] = value );
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created element and returns a boolean result
 */
function assert( fn ) {
	var el = document.createElement( "fieldset" );

	try {
		return !!fn( el );
	} catch ( e ) {
		return false;
	} finally {

		// Remove from its parent by default
		if ( el.parentNode ) {
			el.parentNode.removeChild( el );
		}

		// release memory in IE
		el = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split( "|" ),
		i = arr.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[ i ] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			a.sourceIndex - b.sourceIndex;

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( ( cur = cur.nextSibling ) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return ( name === "input" || name === "button" ) && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for :enabled/:disabled
 * @param {Boolean} disabled true for :disabled; false for :enabled
 */
function createDisabledPseudo( disabled ) {

	// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
	return function( elem ) {

		// Only certain elements can match :enabled or :disabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
		if ( "form" in elem ) {

			// Check for inherited disabledness on relevant non-disabled elements:
			// * listed form-associated elements in a disabled fieldset
			//   https://html.spec.whatwg.org/multipage/forms.html#category-listed
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
			// * option elements in a disabled optgroup
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
			// All such elements have a "form" property.
			if ( elem.parentNode && elem.disabled === false ) {

				// Option elements defer to a parent optgroup if present
				if ( "label" in elem ) {
					if ( "label" in elem.parentNode ) {
						return elem.parentNode.disabled === disabled;
					} else {
						return elem.disabled === disabled;
					}
				}

				// Support: IE 6 - 11
				// Use the isDisabled shortcut property to check for disabled fieldset ancestors
				return elem.isDisabled === disabled ||

					// Where there is no isDisabled, check manually
					/* jshint -W018 */
					elem.isDisabled !== !disabled &&
					inDisabledFieldset( elem ) === disabled;
			}

			return elem.disabled === disabled;

		// Try to winnow out elements that can't be disabled before trusting the disabled property.
		// Some victims get caught in our net (label, legend, menu, track), but it shouldn't
		// even exist on them, let alone have a boolean value.
		} else if ( "label" in elem ) {
			return elem.disabled === disabled;
		}

		// Remaining elements are neither :enabled nor :disabled
		return false;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction( function( argument ) {
		argument = +argument;
		return markFunction( function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ ( j = matchIndexes[ i ] ) ] ) {
					seed[ j ] = !( matches[ j ] = seed[ j ] );
				}
			}
		} );
	} );
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	var namespace = elem.namespaceURI,
		docElem = ( elem.ownerDocument || elem ).documentElement;

	// Support: IE <=8
	// Assume HTML when documentElement doesn't yet exist, such as inside loading iframes
	// https://bugs.jquery.com/ticket/4833
	return !rhtml.test( namespace || docElem && docElem.nodeName || "HTML" );
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare, subWindow,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// Return early if doc is invalid or already selected
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( doc == document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Update global variables
	document = doc;
	docElem = document.documentElement;
	documentIsHTML = !isXML( document );

	// Support: IE 9 - 11+, Edge 12 - 18+
	// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( preferredDoc != document &&
		( subWindow = document.defaultView ) && subWindow.top !== subWindow ) {

		// Support: IE 11, Edge
		if ( subWindow.addEventListener ) {
			subWindow.addEventListener( "unload", unloadHandler, false );

		// Support: IE 9 - 10 only
		} else if ( subWindow.attachEvent ) {
			subWindow.attachEvent( "onunload", unloadHandler );
		}
	}

	// Support: IE 8 - 11+, Edge 12 - 18+, Chrome <=16 - 25 only, Firefox <=3.6 - 31 only,
	// Safari 4 - 5 only, Opera <=11.6 - 12.x only
	// IE/Edge & older browsers don't support the :scope pseudo-class.
	// Support: Safari 6.0 only
	// Safari 6.0 supports :scope but it's an alias of :root there.
	support.scope = assert( function( el ) {
		docElem.appendChild( el ).appendChild( document.createElement( "div" ) );
		return typeof el.querySelectorAll !== "undefined" &&
			!el.querySelectorAll( ":scope fieldset div" ).length;
	} );

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties
	// (excepting IE8 booleans)
	support.attributes = assert( function( el ) {
		el.className = "i";
		return !el.getAttribute( "className" );
	} );

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert( function( el ) {
		el.appendChild( document.createComment( "" ) );
		return !el.getElementsByTagName( "*" ).length;
	} );

	// Support: IE<9
	support.getElementsByClassName = rnative.test( document.getElementsByClassName );

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programmatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert( function( el ) {
		docElem.appendChild( el ).id = expando;
		return !document.getElementsByName || !document.getElementsByName( expando ).length;
	} );

	// ID filter and find
	if ( support.getById ) {
		Expr.filter[ "ID" ] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute( "id" ) === attrId;
			};
		};
		Expr.find[ "ID" ] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var elem = context.getElementById( id );
				return elem ? [ elem ] : [];
			}
		};
	} else {
		Expr.filter[ "ID" ] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" &&
					elem.getAttributeNode( "id" );
				return node && node.value === attrId;
			};
		};

		// Support: IE 6 - 7 only
		// getElementById is not reliable as a find shortcut
		Expr.find[ "ID" ] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var node, i, elems,
					elem = context.getElementById( id );

				if ( elem ) {

					// Verify the id attribute
					node = elem.getAttributeNode( "id" );
					if ( node && node.value === id ) {
						return [ elem ];
					}

					// Fall back on getElementsByName
					elems = context.getElementsByName( id );
					i = 0;
					while ( ( elem = elems[ i++ ] ) ) {
						node = elem.getAttributeNode( "id" );
						if ( node && node.value === id ) {
							return [ elem ];
						}
					}
				}

				return [];
			}
		};
	}

	// Tag
	Expr.find[ "TAG" ] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( tag );

			// DocumentFragment nodes don't have gEBTN
			} else if ( support.qsa ) {
				return context.querySelectorAll( tag );
			}
		} :

		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,

				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( ( elem = results[ i++ ] ) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find[ "CLASS" ] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See https://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( ( support.qsa = rnative.test( document.querySelectorAll ) ) ) {

		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert( function( el ) {

			var input;

			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// https://bugs.jquery.com/ticket/12359
			docElem.appendChild( el ).innerHTML = "<a id='" + expando + "'></a>" +
				"<select id='" + expando + "-\r\\' msallowcapture=''>" +
				"<option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( el.querySelectorAll( "[msallowcapture^='']" ).length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !el.querySelectorAll( "[selected]" ).length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
			if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
				rbuggyQSA.push( "~=" );
			}

			// Support: IE 11+, Edge 15 - 18+
			// IE 11/Edge don't find elements on a `[name='']` query in some cases.
			// Adding a temporary attribute to the document before the selection works
			// around the issue.
			// Interestingly, IE 10 & older don't seem to have the issue.
			input = document.createElement( "input" );
			input.setAttribute( "name", "" );
			el.appendChild( input );
			if ( !el.querySelectorAll( "[name='']" ).length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*name" + whitespace + "*=" +
					whitespace + "*(?:''|\"\")" );
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !el.querySelectorAll( ":checked" ).length ) {
				rbuggyQSA.push( ":checked" );
			}

			// Support: Safari 8+, iOS 8+
			// https://bugs.webkit.org/show_bug.cgi?id=136851
			// In-page `selector#id sibling-combinator selector` fails
			if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {
				rbuggyQSA.push( ".#.+[+~]" );
			}

			// Support: Firefox <=3.6 - 5 only
			// Old Firefox doesn't throw on a badly-escaped identifier.
			el.querySelectorAll( "\\\f" );
			rbuggyQSA.push( "[\\r\\n\\f]" );
		} );

		assert( function( el ) {
			el.innerHTML = "<a href='' disabled='disabled'></a>" +
				"<select disabled='disabled'><option/></select>";

			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = document.createElement( "input" );
			input.setAttribute( "type", "hidden" );
			el.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( el.querySelectorAll( "[name=d]" ).length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( el.querySelectorAll( ":enabled" ).length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Support: IE9-11+
			// IE's :disabled selector does not pick up the children of disabled fieldsets
			docElem.appendChild( el ).disabled = true;
			if ( el.querySelectorAll( ":disabled" ).length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Support: Opera 10 - 11 only
			// Opera 10-11 does not throw on post-comma invalid pseudos
			el.querySelectorAll( "*,:x" );
			rbuggyQSA.push( ",.*:" );
		} );
	}

	if ( ( support.matchesSelector = rnative.test( ( matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector ) ) ) ) {

		assert( function( el ) {

			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( el, "*" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( el, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		} );
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join( "|" ) );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join( "|" ) );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully self-exclusive
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			) );
		} :
		function( a, b ) {
			if ( b ) {
				while ( ( b = b.parentNode ) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		// Support: IE 11+, Edge 17 - 18+
		// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
		// two documents; shallow comparisons work.
		// eslint-disable-next-line eqeqeq
		compare = ( a.ownerDocument || a ) == ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			( !support.sortDetached && b.compareDocumentPosition( a ) === compare ) ) {

			// Choose the first element that is related to our preferred document
			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			// eslint-disable-next-line eqeqeq
			if ( a == document || a.ownerDocument == preferredDoc &&
				contains( preferredDoc, a ) ) {
				return -1;
			}

			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			// eslint-disable-next-line eqeqeq
			if ( b == document || b.ownerDocument == preferredDoc &&
				contains( preferredDoc, b ) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {

		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {

			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			/* eslint-disable eqeqeq */
			return a == document ? -1 :
				b == document ? 1 :
				/* eslint-enable eqeqeq */
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( ( cur = cur.parentNode ) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( ( cur = cur.parentNode ) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[ i ] === bp[ i ] ) {
			i++;
		}

		return i ?

			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[ i ], bp[ i ] ) :

			// Otherwise nodes in our document sort first
			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			/* eslint-disable eqeqeq */
			ap[ i ] == preferredDoc ? -1 :
			bp[ i ] == preferredDoc ? 1 :
			/* eslint-enable eqeqeq */
			0;
	};

	return document;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	setDocument( elem );

	if ( support.matchesSelector && documentIsHTML &&
		!nonnativeSelectorCache[ expr + " " ] &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||

				// As well, disconnected nodes are said to be in a document
				// fragment in IE 9
				elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch ( e ) {
			nonnativeSelectorCache( expr, true );
		}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {

	// Set document vars if needed
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( ( context.ownerDocument || context ) != document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {

	// Set document vars if needed
	// Support: IE 11+, Edge 17 - 18+
	// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
	// two documents; shallow comparisons work.
	// eslint-disable-next-line eqeqeq
	if ( ( elem.ownerDocument || elem ) != document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],

		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			( val = elem.getAttributeNode( name ) ) && val.specified ?
				val.value :
				null;
};

Sizzle.escape = function( sel ) {
	return ( sel + "" ).replace( rcssescape, fcssescape );
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( ( elem = results[ i++ ] ) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {

		// If no nodeType, this is expected to be an array
		while ( ( node = elem[ i++ ] ) ) {

			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {

		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {

			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}

	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[ 1 ] = match[ 1 ].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[ 3 ] = ( match[ 3 ] || match[ 4 ] ||
				match[ 5 ] || "" ).replace( runescape, funescape );

			if ( match[ 2 ] === "~=" ) {
				match[ 3 ] = " " + match[ 3 ] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {

			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[ 1 ] = match[ 1 ].toLowerCase();

			if ( match[ 1 ].slice( 0, 3 ) === "nth" ) {

				// nth-* requires argument
				if ( !match[ 3 ] ) {
					Sizzle.error( match[ 0 ] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[ 4 ] = +( match[ 4 ] ?
					match[ 5 ] + ( match[ 6 ] || 1 ) :
					2 * ( match[ 3 ] === "even" || match[ 3 ] === "odd" ) );
				match[ 5 ] = +( ( match[ 7 ] + match[ 8 ] ) || match[ 3 ] === "odd" );

				// other types prohibit arguments
			} else if ( match[ 3 ] ) {
				Sizzle.error( match[ 0 ] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[ 6 ] && match[ 2 ];

			if ( matchExpr[ "CHILD" ].test( match[ 0 ] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[ 3 ] ) {
				match[ 2 ] = match[ 4 ] || match[ 5 ] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&

				// Get excess from tokenize (recursively)
				( excess = tokenize( unquoted, true ) ) &&

				// advance to the next closing parenthesis
				( excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length ) ) {

				// excess is a negative index
				match[ 0 ] = match[ 0 ].slice( 0, excess );
				match[ 2 ] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() {
					return true;
				} :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				( pattern = new RegExp( "(^|" + whitespace +
					")" + className + "(" + whitespace + "|$)" ) ) && classCache(
						className, function( elem ) {
							return pattern.test(
								typeof elem.className === "string" && elem.className ||
								typeof elem.getAttribute !== "undefined" &&
									elem.getAttribute( "class" ) ||
								""
							);
				} );
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				/* eslint-disable max-len */

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
				/* eslint-enable max-len */

			};
		},

		"CHILD": function( type, what, _argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, _context, xml ) {
					var cache, uniqueCache, outerCache, node, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType,
						diff = false;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( ( node = node[ dir ] ) ) {
									if ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) {

										return false;
									}
								}

								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {

							// Seek `elem` from a previously-cached index

							// ...in a gzip-friendly way
							node = parent;
							outerCache = node[ expando ] || ( node[ expando ] = {} );

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ node.uniqueID ] ||
								( outerCache[ node.uniqueID ] = {} );

							cache = uniqueCache[ type ] || [];
							nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
							diff = nodeIndex && cache[ 2 ];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( ( node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								( diff = nodeIndex = 0 ) || start.pop() ) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						} else {

							// Use previously-cached element index if available
							if ( useCache ) {

								// ...in a gzip-friendly way
								node = elem;
								outerCache = node[ expando ] || ( node[ expando ] = {} );

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									( outerCache[ node.uniqueID ] = {} );

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex;
							}

							// xml :nth-child(...)
							// or :nth-last-child(...) or :nth(-last)?-of-type(...)
							if ( diff === false ) {

								// Use the same loop as above to seek `elem` from the start
								while ( ( node = ++nodeIndex && node && node[ dir ] ||
									( diff = nodeIndex = 0 ) || start.pop() ) ) {

									if ( ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) &&
										++diff ) {

										// Cache the index of each encountered element
										if ( useCache ) {
											outerCache = node[ expando ] ||
												( node[ expando ] = {} );

											// Support: IE <9 only
											// Defend against cloned attroperties (jQuery gh-1709)
											uniqueCache = outerCache[ node.uniqueID ] ||
												( outerCache[ node.uniqueID ] = {} );

											uniqueCache[ type ] = [ dirruns, diff ];
										}

										if ( node === elem ) {
											break;
										}
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {

			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction( function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf( seed, matched[ i ] );
							seed[ idx ] = !( matches[ idx ] = matched[ i ] );
						}
					} ) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {

		// Potentially complex pseudos
		"not": markFunction( function( selector ) {

			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction( function( seed, matches, _context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( ( elem = unmatched[ i ] ) ) {
							seed[ i ] = !( matches[ i ] = elem );
						}
					}
				} ) :
				function( elem, _context, xml ) {
					input[ 0 ] = elem;
					matcher( input, null, xml, results );

					// Don't keep the element (issue #299)
					input[ 0 ] = null;
					return !results.pop();
				};
		} ),

		"has": markFunction( function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		} ),

		"contains": markFunction( function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || getText( elem ) ).indexOf( text ) > -1;
			};
		} ),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {

			// lang value must be a valid identifier
			if ( !ridentifier.test( lang || "" ) ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( ( elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute( "xml:lang" ) || elem.getAttribute( "lang" ) ) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( ( elem = elem.parentNode ) && elem.nodeType === 1 );
				return false;
			};
		} ),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement &&
				( !document.hasFocus || document.hasFocus() ) &&
				!!( elem.type || elem.href || ~elem.tabIndex );
		},

		// Boolean properties
		"enabled": createDisabledPseudo( false ),
		"disabled": createDisabledPseudo( true ),

		"checked": function( elem ) {

			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return ( nodeName === "input" && !!elem.checked ) ||
				( nodeName === "option" && !!elem.selected );
		},

		"selected": function( elem ) {

			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				// eslint-disable-next-line no-unused-expressions
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {

			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos[ "empty" ]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( ( attr = elem.getAttribute( "type" ) ) == null ||
					attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo( function() {
			return [ 0 ];
		} ),

		"last": createPositionalPseudo( function( _matchIndexes, length ) {
			return [ length - 1 ];
		} ),

		"eq": createPositionalPseudo( function( _matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		} ),

		"even": createPositionalPseudo( function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} ),

		"odd": createPositionalPseudo( function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} ),

		"lt": createPositionalPseudo( function( matchIndexes, length, argument ) {
			var i = argument < 0 ?
				argument + length :
				argument > length ?
					length :
					argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} ),

		"gt": createPositionalPseudo( function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		} )
	}
};

Expr.pseudos[ "nth" ] = Expr.pseudos[ "eq" ];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || ( match = rcomma.exec( soFar ) ) ) {
			if ( match ) {

				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[ 0 ].length ) || soFar;
			}
			groups.push( ( tokens = [] ) );
		}

		matched = false;

		// Combinators
		if ( ( match = rcombinators.exec( soFar ) ) ) {
			matched = match.shift();
			tokens.push( {
				value: matched,

				// Cast descendant combinators to space
				type: match[ 0 ].replace( rtrim, " " )
			} );
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( ( match = matchExpr[ type ].exec( soFar ) ) && ( !preFilters[ type ] ||
				( match = preFilters[ type ]( match ) ) ) ) {
				matched = match.shift();
				tokens.push( {
					value: matched,
					type: type,
					matches: match
				} );
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :

			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[ i ].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		skip = combinator.next,
		key = skip || dir,
		checkNonElements = base && key === "parentNode",
		doneName = done++;

	return combinator.first ?

		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( ( elem = elem[ dir ] ) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
			return false;
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, uniqueCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
			if ( xml ) {
				while ( ( elem = elem[ dir ] ) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( ( elem = elem[ dir ] ) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || ( elem[ expando ] = {} );

						// Support: IE <9 only
						// Defend against cloned attroperties (jQuery gh-1709)
						uniqueCache = outerCache[ elem.uniqueID ] ||
							( outerCache[ elem.uniqueID ] = {} );

						if ( skip && skip === elem.nodeName.toLowerCase() ) {
							elem = elem[ dir ] || elem;
						} else if ( ( oldCache = uniqueCache[ key ] ) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return ( newCache[ 2 ] = oldCache[ 2 ] );
						} else {

							// Reuse newcache so results back-propagate to previous elements
							uniqueCache[ key ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( ( newCache[ 2 ] = matcher( elem, context, xml ) ) ) {
								return true;
							}
						}
					}
				}
			}
			return false;
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[ i ]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[ 0 ];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[ i ], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( ( elem = unmatched[ i ] ) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction( function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts(
				selector || "*",
				context.nodeType ? [ context ] : context,
				[]
			),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?

				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( ( elem = temp[ i ] ) ) {
					matcherOut[ postMap[ i ] ] = !( matcherIn[ postMap[ i ] ] = elem );
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {

					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( ( elem = matcherOut[ i ] ) ) {

							// Restore matcherIn since elem is not yet a final match
							temp.push( ( matcherIn[ i ] = elem ) );
						}
					}
					postFinder( null, ( matcherOut = [] ), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( ( elem = matcherOut[ i ] ) &&
						( temp = postFinder ? indexOf( seed, elem ) : preMap[ i ] ) > -1 ) {

						seed[ temp ] = !( results[ temp ] = elem );
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	} );
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[ 0 ].type ],
		implicitRelative = leadingRelative || Expr.relative[ " " ],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				( checkContext = context ).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );

			// Avoid hanging onto element (issue #299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( ( matcher = Expr.relative[ tokens[ i ].type ] ) ) {
			matchers = [ addCombinator( elementMatcher( matchers ), matcher ) ];
		} else {
			matcher = Expr.filter[ tokens[ i ].type ].apply( null, tokens[ i ].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {

				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[ j ].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(

					// If the preceding token was a descendant combinator, insert an implicit any-element `*`
					tokens
						.slice( 0, i - 1 )
						.concat( { value: tokens[ i - 2 ].type === " " ? "*" : "" } )
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( ( tokens = tokens.slice( j ) ) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,

				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find[ "TAG" ]( "*", outermost ),

				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = ( dirruns += contextBackup == null ? 1 : Math.random() || 0.1 ),
				len = elems.length;

			if ( outermost ) {

				// Support: IE 11+, Edge 17 - 18+
				// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
				// two documents; shallow comparisons work.
				// eslint-disable-next-line eqeqeq
				outermostContext = context == document || context || outermost;
			}

			// Add elements passing elementMatchers directly to results
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && ( elem = elems[ i ] ) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;

					// Support: IE 11+, Edge 17 - 18+
					// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
					// two documents; shallow comparisons work.
					// eslint-disable-next-line eqeqeq
					if ( !context && elem.ownerDocument != document ) {
						setDocument( elem );
						xml = !documentIsHTML;
					}
					while ( ( matcher = elementMatchers[ j++ ] ) ) {
						if ( matcher( elem, context || document, xml ) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {

					// They will have gone through all possible matchers
					if ( ( elem = !matcher && elem ) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// `i` is now the count of elements visited above, and adding it to `matchedCount`
			// makes the latter nonnegative.
			matchedCount += i;

			// Apply set filters to unmatched elements
			// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
			// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
			// no element matchers and no seed.
			// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
			// case, which will result in a "00" `matchedCount` that differs from `i` but is also
			// numerically zero.
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( ( matcher = setMatchers[ j++ ] ) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {

					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !( unmatched[ i ] || setMatched[ i ] ) ) {
								setMatched[ i ] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {

		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[ i ] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache(
			selector,
			matcherFromGroupMatchers( elementMatchers, setMatchers )
		);

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( ( selector = compiled.selector || selector ) );

	results = results || [];

	// Try to minimize operations if there is only one selector in the list and no seed
	// (the latter of which guarantees us context)
	if ( match.length === 1 ) {

		// Reduce context if the leading compound selector is an ID
		tokens = match[ 0 ] = match[ 0 ].slice( 0 );
		if ( tokens.length > 2 && ( token = tokens[ 0 ] ).type === "ID" &&
			context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[ 1 ].type ] ) {

			context = ( Expr.find[ "ID" ]( token.matches[ 0 ]
				.replace( runescape, funescape ), context ) || [] )[ 0 ];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr[ "needsContext" ].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[ i ];

			// Abort if we hit a combinator
			if ( Expr.relative[ ( type = token.type ) ] ) {
				break;
			}
			if ( ( find = Expr.find[ type ] ) ) {

				// Search, expanding context for leading sibling combinators
				if ( ( seed = find(
					token.matches[ 0 ].replace( runescape, funescape ),
					rsibling.test( tokens[ 0 ].type ) && testContext( context.parentNode ) ||
						context
				) ) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split( "" ).sort( sortOrder ).join( "" ) === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert( function( el ) {

	// Should return 1, but returns 4 (following)
	return el.compareDocumentPosition( document.createElement( "fieldset" ) ) & 1;
} );

// Support: IE<8
// Prevent attribute/property "interpolation"
// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert( function( el ) {
	el.innerHTML = "<a href='#'></a>";
	return el.firstChild.getAttribute( "href" ) === "#";
} ) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	} );
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert( function( el ) {
	el.innerHTML = "<input/>";
	el.firstChild.setAttribute( "value", "" );
	return el.firstChild.getAttribute( "value" ) === "";
} ) ) {
	addHandle( "value", function( elem, _name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	} );
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert( function( el ) {
	return el.getAttribute( "disabled" ) == null;
} ) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
				( val = elem.getAttributeNode( name ) ) && val.specified ?
					val.value :
					null;
		}
	} );
}

return Sizzle;

} )( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;

// Deprecated
jQuery.expr[ ":" ] = jQuery.expr.pseudos;
jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;
jQuery.escapeSelector = Sizzle.escape;




var dir = function( elem, dir, until ) {
	var matched = [],
		truncate = until !== undefined;

	while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
		if ( elem.nodeType === 1 ) {
			if ( truncate && jQuery( elem ).is( until ) ) {
				break;
			}
			matched.push( elem );
		}
	}
	return matched;
};


var siblings = function( n, elem ) {
	var matched = [];

	for ( ; n; n = n.nextSibling ) {
		if ( n.nodeType === 1 && n !== elem ) {
			matched.push( n );
		}
	}

	return matched;
};


var rneedsContext = jQuery.expr.match.needsContext;



function nodeName( elem, name ) {

  return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();

};
var rsingleTag = ( /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i );



// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			return !!qualifier.call( elem, i, elem ) !== not;
		} );
	}

	// Single element
	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		} );
	}

	// Arraylike of elements (jQuery, arguments, Array)
	if ( typeof qualifier !== "string" ) {
		return jQuery.grep( elements, function( elem ) {
			return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
		} );
	}

	// Filtered directly for both simple and complex selectors
	return jQuery.filter( qualifier, elements, not );
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	if ( elems.length === 1 && elem.nodeType === 1 ) {
		return jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];
	}

	return jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
		return elem.nodeType === 1;
	} ) );
};

jQuery.fn.extend( {
	find: function( selector ) {
		var i, ret,
			len = this.length,
			self = this;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter( function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			} ) );
		}

		ret = this.pushStack( [] );

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		return len > 1 ? jQuery.uniqueSort( ret ) : ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow( this, selector || [], false ) );
	},
	not: function( selector ) {
		return this.pushStack( winnow( this, selector || [], true ) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
} );


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	// Shortcut simple #id case for speed
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,

	init = jQuery.fn.init = function( selector, context, root ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Method init() accepts an alternate rootjQuery
		// so migrate can support jQuery.sub (gh-2101)
		root = root || rootjQuery;

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector[ 0 ] === "<" &&
				selector[ selector.length - 1 ] === ">" &&
				selector.length >= 3 ) {

				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && ( match[ 1 ] || !context ) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[ 1 ] ) {
					context = context instanceof jQuery ? context[ 0 ] : context;

					// Option to run scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[ 1 ],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {

							// Properties of context are called as methods if possible
							if ( isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[ 2 ] );

					if ( elem ) {

						// Inject the element directly into the jQuery object
						this[ 0 ] = elem;
						this.length = 1;
					}
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || root ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this[ 0 ] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( isFunction( selector ) ) {
			return root.ready !== undefined ?
				root.ready( selector ) :

				// Execute immediately if ready is not present
				selector( jQuery );
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,

	// Methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend( {
	has: function( target ) {
		var targets = jQuery( target, this ),
			l = targets.length;

		return this.filter( function() {
			var i = 0;
			for ( ; i < l; i++ ) {
				if ( jQuery.contains( this, targets[ i ] ) ) {
					return true;
				}
			}
		} );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			targets = typeof selectors !== "string" && jQuery( selectors );

		// Positional selectors never match, since there's no _selection_ context
		if ( !rneedsContext.test( selectors ) ) {
			for ( ; i < l; i++ ) {
				for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

					// Always skip document fragments
					if ( cur.nodeType < 11 && ( targets ?
						targets.index( cur ) > -1 :

						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector( cur, selectors ) ) ) {

						matched.push( cur );
						break;
					}
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
	},

	// Determine the position of an element within the set
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// Index in selector
		if ( typeof elem === "string" ) {
			return indexOf.call( jQuery( elem ), this[ 0 ] );
		}

		// Locate the position of the desired element
		return indexOf.call( this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem
		);
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.uniqueSort(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	}
} );

function sibling( cur, dir ) {
	while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
	return cur;
}

jQuery.each( {
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, _i, until ) {
		return dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, _i, until ) {
		return dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, _i, until ) {
		return dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return siblings( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return siblings( elem.firstChild );
	},
	contents: function( elem ) {
		if ( elem.contentDocument != null &&

			// Support: IE 11+
			// <object> elements with no `data` attribute has an object
			// `contentDocument` with a `null` prototype.
			getProto( elem.contentDocument ) ) {

			return elem.contentDocument;
		}

		// Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
		// Treat the template element as a regular one in browsers that
		// don't support it.
		if ( nodeName( elem, "template" ) ) {
			elem = elem.content || elem;
		}

		return jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var matched = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			matched = jQuery.filter( selector, matched );
		}

		if ( this.length > 1 ) {

			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				jQuery.uniqueSort( matched );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				matched.reverse();
			}
		}

		return this.pushStack( matched );
	};
} );
var rnothtmlwhite = ( /[^\x20\t\r\n\f]+/g );



// Convert String-formatted options into Object-formatted ones
function createOptions( options ) {
	var object = {};
	jQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	} );
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		createOptions( options ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,

		// Last fire value for non-forgettable lists
		memory,

		// Flag to know if list was already fired
		fired,

		// Flag to prevent firing
		locked,

		// Actual callback list
		list = [],

		// Queue of execution data for repeatable lists
		queue = [],

		// Index of currently firing callback (modified by add/remove as needed)
		firingIndex = -1,

		// Fire callbacks
		fire = function() {

			// Enforce single-firing
			locked = locked || options.once;

			// Execute callbacks for all pending executions,
			// respecting firingIndex overrides and runtime changes
			fired = firing = true;
			for ( ; queue.length; firingIndex = -1 ) {
				memory = queue.shift();
				while ( ++firingIndex < list.length ) {

					// Run callback and check for early termination
					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
						options.stopOnFalse ) {

						// Jump to end and forget the data so .add doesn't re-fire
						firingIndex = list.length;
						memory = false;
					}
				}
			}

			// Forget the data if we're done with it
			if ( !options.memory ) {
				memory = false;
			}

			firing = false;

			// Clean up if we're done firing for good
			if ( locked ) {

				// Keep an empty list if we have data for future add calls
				if ( memory ) {
					list = [];

				// Otherwise, this object is spent
				} else {
					list = "";
				}
			}
		},

		// Actual Callbacks object
		self = {

			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {

					// If we have memory from a past run, we should fire after adding
					if ( memory && !firing ) {
						firingIndex = list.length - 1;
						queue.push( memory );
					}

					( function add( args ) {
						jQuery.each( args, function( _, arg ) {
							if ( isFunction( arg ) ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && toType( arg ) !== "string" ) {

								// Inspect recursively
								add( arg );
							}
						} );
					} )( arguments );

					if ( memory && !firing ) {
						fire();
					}
				}
				return this;
			},

			// Remove a callback from the list
			remove: function() {
				jQuery.each( arguments, function( _, arg ) {
					var index;
					while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
						list.splice( index, 1 );

						// Handle firing indexes
						if ( index <= firingIndex ) {
							firingIndex--;
						}
					}
				} );
				return this;
			},

			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ?
					jQuery.inArray( fn, list ) > -1 :
					list.length > 0;
			},

			// Remove all callbacks from the list
			empty: function() {
				if ( list ) {
					list = [];
				}
				return this;
			},

			// Disable .fire and .add
			// Abort any current/pending executions
			// Clear all callbacks and values
			disable: function() {
				locked = queue = [];
				list = memory = "";
				return this;
			},
			disabled: function() {
				return !list;
			},

			// Disable .fire
			// Also disable .add unless we have memory (since it would have no effect)
			// Abort any pending executions
			lock: function() {
				locked = queue = [];
				if ( !memory && !firing ) {
					list = memory = "";
				}
				return this;
			},
			locked: function() {
				return !!locked;
			},

			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( !locked ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					queue.push( args );
					if ( !firing ) {
						fire();
					}
				}
				return this;
			},

			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},

			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


function Identity( v ) {
	return v;
}
function Thrower( ex ) {
	throw ex;
}

function adoptValue( value, resolve, reject, noValue ) {
	var method;

	try {

		// Check for promise aspect first to privilege synchronous behavior
		if ( value && isFunction( ( method = value.promise ) ) ) {
			method.call( value ).done( resolve ).fail( reject );

		// Other thenables
		} else if ( value && isFunction( ( method = value.then ) ) ) {
			method.call( value, resolve, reject );

		// Other non-thenables
		} else {

			// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
			// * false: [ value ].slice( 0 ) => resolve( value )
			// * true: [ value ].slice( 1 ) => resolve()
			resolve.apply( undefined, [ value ].slice( noValue ) );
		}

	// For Promises/A+, convert exceptions into rejections
	// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
	// Deferred#then to conditionally suppress rejection.
	} catch ( value ) {

		// Support: Android 4.0 only
		// Strict mode functions invoked without .call/.apply get global-object context
		reject.apply( undefined, [ value ] );
	}
}

jQuery.extend( {

	Deferred: function( func ) {
		var tuples = [

				// action, add listener, callbacks,
				// ... .then handlers, argument index, [final state]
				[ "notify", "progress", jQuery.Callbacks( "memory" ),
					jQuery.Callbacks( "memory" ), 2 ],
				[ "resolve", "done", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 0, "resolved" ],
				[ "reject", "fail", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 1, "rejected" ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				"catch": function( fn ) {
					return promise.then( null, fn );
				},

				// Keep pipe for back-compat
				pipe: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;

					return jQuery.Deferred( function( newDefer ) {
						jQuery.each( tuples, function( _i, tuple ) {

							// Map tuples (progress, done, fail) to arguments (done, fail, progress)
							var fn = isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];

							// deferred.progress(function() { bind to newDefer or newDefer.notify })
							// deferred.done(function() { bind to newDefer or newDefer.resolve })
							// deferred.fail(function() { bind to newDefer or newDefer.reject })
							deferred[ tuple[ 1 ] ]( function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && isFunction( returned.promise ) ) {
									returned.promise()
										.progress( newDefer.notify )
										.done( newDefer.resolve )
										.fail( newDefer.reject );
								} else {
									newDefer[ tuple[ 0 ] + "With" ](
										this,
										fn ? [ returned ] : arguments
									);
								}
							} );
						} );
						fns = null;
					} ).promise();
				},
				then: function( onFulfilled, onRejected, onProgress ) {
					var maxDepth = 0;
					function resolve( depth, deferred, handler, special ) {
						return function() {
							var that = this,
								args = arguments,
								mightThrow = function() {
									var returned, then;

									// Support: Promises/A+ section 2.3.3.3.3
									// https://promisesaplus.com/#point-59
									// Ignore double-resolution attempts
									if ( depth < maxDepth ) {
										return;
									}

									returned = handler.apply( that, args );

									// Support: Promises/A+ section 2.3.1
									// https://promisesaplus.com/#point-48
									if ( returned === deferred.promise() ) {
										throw new TypeError( "Thenable self-resolution" );
									}

									// Support: Promises/A+ sections 2.3.3.1, 3.5
									// https://promisesaplus.com/#point-54
									// https://promisesaplus.com/#point-75
									// Retrieve `then` only once
									then = returned &&

										// Support: Promises/A+ section 2.3.4
										// https://promisesaplus.com/#point-64
										// Only check objects and functions for thenability
										( typeof returned === "object" ||
											typeof returned === "function" ) &&
										returned.then;

									// Handle a returned thenable
									if ( isFunction( then ) ) {

										// Special processors (notify) just wait for resolution
										if ( special ) {
											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special )
											);

										// Normal processors (resolve) also hook into progress
										} else {

											// ...and disregard older resolution values
											maxDepth++;

											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special ),
												resolve( maxDepth, deferred, Identity,
													deferred.notifyWith )
											);
										}

									// Handle all other returned values
									} else {

										// Only substitute handlers pass on context
										// and multiple values (non-spec behavior)
										if ( handler !== Identity ) {
											that = undefined;
											args = [ returned ];
										}

										// Process the value(s)
										// Default process is resolve
										( special || deferred.resolveWith )( that, args );
									}
								},

								// Only normal processors (resolve) catch and reject exceptions
								process = special ?
									mightThrow :
									function() {
										try {
											mightThrow();
										} catch ( e ) {

											if ( jQuery.Deferred.exceptionHook ) {
												jQuery.Deferred.exceptionHook( e,
													process.stackTrace );
											}

											// Support: Promises/A+ section 2.3.3.3.4.1
											// https://promisesaplus.com/#point-61
											// Ignore post-resolution exceptions
											if ( depth + 1 >= maxDepth ) {

												// Only substitute handlers pass on context
												// and multiple values (non-spec behavior)
												if ( handler !== Thrower ) {
													that = undefined;
													args = [ e ];
												}

												deferred.rejectWith( that, args );
											}
										}
									};

							// Support: Promises/A+ section 2.3.3.3.1
							// https://promisesaplus.com/#point-57
							// Re-resolve promises immediately to dodge false rejection from
							// subsequent errors
							if ( depth ) {
								process();
							} else {

								// Call an optional hook to record the stack, in case of exception
								// since it's otherwise lost when execution goes async
								if ( jQuery.Deferred.getStackHook ) {
									process.stackTrace = jQuery.Deferred.getStackHook();
								}
								window.setTimeout( process );
							}
						};
					}

					return jQuery.Deferred( function( newDefer ) {

						// progress_handlers.add( ... )
						tuples[ 0 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onProgress ) ?
									onProgress :
									Identity,
								newDefer.notifyWith
							)
						);

						// fulfilled_handlers.add( ... )
						tuples[ 1 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onFulfilled ) ?
									onFulfilled :
									Identity
							)
						);

						// rejected_handlers.add( ... )
						tuples[ 2 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onRejected ) ?
									onRejected :
									Thrower
							)
						);
					} ).promise();
				},

				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 5 ];

			// promise.progress = list.add
			// promise.done = list.add
			// promise.fail = list.add
			promise[ tuple[ 1 ] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(
					function() {

						// state = "resolved" (i.e., fulfilled)
						// state = "rejected"
						state = stateString;
					},

					// rejected_callbacks.disable
					// fulfilled_callbacks.disable
					tuples[ 3 - i ][ 2 ].disable,

					// rejected_handlers.disable
					// fulfilled_handlers.disable
					tuples[ 3 - i ][ 3 ].disable,

					// progress_callbacks.lock
					tuples[ 0 ][ 2 ].lock,

					// progress_handlers.lock
					tuples[ 0 ][ 3 ].lock
				);
			}

			// progress_handlers.fire
			// fulfilled_handlers.fire
			// rejected_handlers.fire
			list.add( tuple[ 3 ].fire );

			// deferred.notify = function() { deferred.notifyWith(...) }
			// deferred.resolve = function() { deferred.resolveWith(...) }
			// deferred.reject = function() { deferred.rejectWith(...) }
			deferred[ tuple[ 0 ] ] = function() {
				deferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );
				return this;
			};

			// deferred.notifyWith = list.fireWith
			// deferred.resolveWith = list.fireWith
			// deferred.rejectWith = list.fireWith
			deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
		} );

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( singleValue ) {
		var

			// count of uncompleted subordinates
			remaining = arguments.length,

			// count of unprocessed arguments
			i = remaining,

			// subordinate fulfillment data
			resolveContexts = Array( i ),
			resolveValues = slice.call( arguments ),

			// the master Deferred
			master = jQuery.Deferred(),

			// subordinate callback factory
			updateFunc = function( i ) {
				return function( value ) {
					resolveContexts[ i ] = this;
					resolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( !( --remaining ) ) {
						master.resolveWith( resolveContexts, resolveValues );
					}
				};
			};

		// Single- and empty arguments are adopted like Promise.resolve
		if ( remaining <= 1 ) {
			adoptValue( singleValue, master.done( updateFunc( i ) ).resolve, master.reject,
				!remaining );

			// Use .then() to unwrap secondary thenables (cf. gh-3000)
			if ( master.state() === "pending" ||
				isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {

				return master.then();
			}
		}

		// Multiple arguments are aggregated like Promise.all array elements
		while ( i-- ) {
			adoptValue( resolveValues[ i ], updateFunc( i ), master.reject );
		}

		return master.promise();
	}
} );


// These usually indicate a programmer mistake during development,
// warn about them ASAP rather than swallowing them by default.
var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

jQuery.Deferred.exceptionHook = function( error, stack ) {

	// Support: IE 8 - 9 only
	// Console exists when dev tools are open, which can happen at any time
	if ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {
		window.console.warn( "jQuery.Deferred exception: " + error.message, error.stack, stack );
	}
};




jQuery.readyException = function( error ) {
	window.setTimeout( function() {
		throw error;
	} );
};




// The deferred used on DOM ready
var readyList = jQuery.Deferred();

jQuery.fn.ready = function( fn ) {

	readyList
		.then( fn )

		// Wrap jQuery.readyException in a function so that the lookup
		// happens at the time of error handling instead of callback
		// registration.
		.catch( function( error ) {
			jQuery.readyException( error );
		} );

	return this;
};

jQuery.extend( {

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );
	}
} );

jQuery.ready.then = readyList.then;

// The ready event handler and self cleanup method
function completed() {
	document.removeEventListener( "DOMContentLoaded", completed );
	window.removeEventListener( "load", completed );
	jQuery.ready();
}

// Catch cases where $(document).ready() is called
// after the browser event has already occurred.
// Support: IE <=9 - 10 only
// Older IE sometimes signals "interactive" too soon
if ( document.readyState === "complete" ||
	( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

	// Handle it asynchronously to allow scripts the opportunity to delay ready
	window.setTimeout( jQuery.ready );

} else {

	// Use the handy event callback
	document.addEventListener( "DOMContentLoaded", completed );

	// A fallback to window.onload, that will always work
	window.addEventListener( "load", completed );
}




// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		len = elems.length,
		bulk = key == null;

	// Sets many values
	if ( toType( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			access( elems, fn, i, key[ i ], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {

			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, _key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < len; i++ ) {
				fn(
					elems[ i ], key, raw ?
					value :
					value.call( elems[ i ], i, fn( elems[ i ], key ) )
				);
			}
		}
	}

	if ( chainable ) {
		return elems;
	}

	// Gets
	if ( bulk ) {
		return fn.call( elems );
	}

	return len ? fn( elems[ 0 ], key ) : emptyGet;
};


// Matches dashed string for camelizing
var rmsPrefix = /^-ms-/,
	rdashAlpha = /-([a-z])/g;

// Used by camelCase as callback to replace()
function fcamelCase( _all, letter ) {
	return letter.toUpperCase();
}

// Convert dashed to camelCase; used by the css and data modules
// Support: IE <=9 - 11, Edge 12 - 15
// Microsoft forgot to hump their vendor prefix (#9572)
function camelCase( string ) {
	return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
}
var acceptData = function( owner ) {

	// Accepts only:
	//  - Node
	//    - Node.ELEMENT_NODE
	//    - Node.DOCUMENT_NODE
	//  - Object
	//    - Any
	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
};




function Data() {
	this.expando = jQuery.expando + Data.uid++;
}

Data.uid = 1;

Data.prototype = {

	cache: function( owner ) {

		// Check if the owner object already has a cache
		var value = owner[ this.expando ];

		// If not, create one
		if ( !value ) {
			value = {};

			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see #8335.
			// Always return an empty object.
			if ( acceptData( owner ) ) {

				// If it is a node unlikely to be stringify-ed or looped over
				// use plain assignment
				if ( owner.nodeType ) {
					owner[ this.expando ] = value;

				// Otherwise secure it in a non-enumerable property
				// configurable must be true to allow the property to be
				// deleted when data is removed
				} else {
					Object.defineProperty( owner, this.expando, {
						value: value,
						configurable: true
					} );
				}
			}
		}

		return value;
	},
	set: function( owner, data, value ) {
		var prop,
			cache = this.cache( owner );

		// Handle: [ owner, key, value ] args
		// Always use camelCase key (gh-2257)
		if ( typeof data === "string" ) {
			cache[ camelCase( data ) ] = value;

		// Handle: [ owner, { properties } ] args
		} else {

			// Copy the properties one-by-one to the cache object
			for ( prop in data ) {
				cache[ camelCase( prop ) ] = data[ prop ];
			}
		}
		return cache;
	},
	get: function( owner, key ) {
		return key === undefined ?
			this.cache( owner ) :

			// Always use camelCase key (gh-2257)
			owner[ this.expando ] && owner[ this.expando ][ camelCase( key ) ];
	},
	access: function( owner, key, value ) {

		// In cases where either:
		//
		//   1. No key was specified
		//   2. A string key was specified, but no value provided
		//
		// Take the "read" path and allow the get method to determine
		// which value to return, respectively either:
		//
		//   1. The entire cache object
		//   2. The data stored at the key
		//
		if ( key === undefined ||
				( ( key && typeof key === "string" ) && value === undefined ) ) {

			return this.get( owner, key );
		}

		// When the key is not a string, or both a key and value
		// are specified, set or extend (existing objects) with either:
		//
		//   1. An object of properties
		//   2. A key and value
		//
		this.set( owner, key, value );

		// Since the "set" path can have two possible entry points
		// return the expected data based on which path was taken[*]
		return value !== undefined ? value : key;
	},
	remove: function( owner, key ) {
		var i,
			cache = owner[ this.expando ];

		if ( cache === undefined ) {
			return;
		}

		if ( key !== undefined ) {

			// Support array or space separated string of keys
			if ( Array.isArray( key ) ) {

				// If key is an array of keys...
				// We always set camelCase keys, so remove that.
				key = key.map( camelCase );
			} else {
				key = camelCase( key );

				// If a key with the spaces exists, use it.
				// Otherwise, create an array by matching non-whitespace
				key = key in cache ?
					[ key ] :
					( key.match( rnothtmlwhite ) || [] );
			}

			i = key.length;

			while ( i-- ) {
				delete cache[ key[ i ] ];
			}
		}

		// Remove the expando if there's no more data
		if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

			// Support: Chrome <=35 - 45
			// Webkit & Blink performance suffers when deleting properties
			// from DOM nodes, so set to undefined instead
			// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
			if ( owner.nodeType ) {
				owner[ this.expando ] = undefined;
			} else {
				delete owner[ this.expando ];
			}
		}
	},
	hasData: function( owner ) {
		var cache = owner[ this.expando ];
		return cache !== undefined && !jQuery.isEmptyObject( cache );
	}
};
var dataPriv = new Data();

var dataUser = new Data();



//	Implementation Summary
//
//	1. Enforce API surface and semantic compatibility with 1.9.x branch
//	2. Improve the module's maintainability by reducing the storage
//		paths to a single mechanism.
//	3. Use the same single mechanism to support "private" and "user" data.
//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
//	5. Avoid exposing implementation details on user objects (eg. expando properties)
//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /[A-Z]/g;

function getData( data ) {
	if ( data === "true" ) {
		return true;
	}

	if ( data === "false" ) {
		return false;
	}

	if ( data === "null" ) {
		return null;
	}

	// Only convert to a number if it doesn't change the string
	if ( data === +data + "" ) {
		return +data;
	}

	if ( rbrace.test( data ) ) {
		return JSON.parse( data );
	}

	return data;
}

function dataAttr( elem, key, data ) {
	var name;

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {
		name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = getData( data );
			} catch ( e ) {}

			// Make sure we set the data so it isn't changed later
			dataUser.set( elem, key, data );
		} else {
			data = undefined;
		}
	}
	return data;
}

jQuery.extend( {
	hasData: function( elem ) {
		return dataUser.hasData( elem ) || dataPriv.hasData( elem );
	},

	data: function( elem, name, data ) {
		return dataUser.access( elem, name, data );
	},

	removeData: function( elem, name ) {
		dataUser.remove( elem, name );
	},

	// TODO: Now that all calls to _data and _removeData have been replaced
	// with direct calls to dataPriv methods, these can be deprecated.
	_data: function( elem, name, data ) {
		return dataPriv.access( elem, name, data );
	},

	_removeData: function( elem, name ) {
		dataPriv.remove( elem, name );
	}
} );

jQuery.fn.extend( {
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = dataUser.get( elem );

				if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE 11 only
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = camelCase( name.slice( 5 ) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					dataPriv.set( elem, "hasDataAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each( function() {
				dataUser.set( this, key );
			} );
		}

		return access( this, function( value ) {
			var data;

			// The calling jQuery object (element matches) is not empty
			// (and therefore has an element appears at this[ 0 ]) and the
			// `value` parameter was not undefined. An empty jQuery object
			// will result in `undefined` for elem = this[ 0 ] which will
			// throw an exception if an attempt to read a data cache is made.
			if ( elem && value === undefined ) {

				// Attempt to get data from the cache
				// The key will always be camelCased in Data
				data = dataUser.get( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to "discover" the data in
				// HTML5 custom data-* attrs
				data = dataAttr( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// We tried really hard, but the data doesn't exist.
				return;
			}

			// Set the data...
			this.each( function() {

				// We always store the camelCased key
				dataUser.set( this, key, value );
			} );
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each( function() {
			dataUser.remove( this, key );
		} );
	}
} );


jQuery.extend( {
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = dataPriv.get( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || Array.isArray( data ) ) {
					queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// Clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// Not public - generate a queueHooks object, or return the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
			empty: jQuery.Callbacks( "once memory" ).add( function() {
				dataPriv.remove( elem, [ type + "queue", key ] );
			} )
		} );
	}
} );

jQuery.fn.extend( {
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[ 0 ], type );
		}

		return data === undefined ?
			this :
			this.each( function() {
				var queue = jQuery.queue( this, type, data );

				// Ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			} );
	},
	dequeue: function( type ) {
		return this.each( function() {
			jQuery.dequeue( this, type );
		} );
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},

	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
} );
var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var documentElement = document.documentElement;



	var isAttached = function( elem ) {
			return jQuery.contains( elem.ownerDocument, elem );
		},
		composed = { composed: true };

	// Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only
	// Check attachment across shadow DOM boundaries when possible (gh-3504)
	// Support: iOS 10.0-10.2 only
	// Early iOS 10 versions support `attachShadow` but not `getRootNode`,
	// leading to errors. We need to check for `getRootNode`.
	if ( documentElement.getRootNode ) {
		isAttached = function( elem ) {
			return jQuery.contains( elem.ownerDocument, elem ) ||
				elem.getRootNode( composed ) === elem.ownerDocument;
		};
	}
var isHiddenWithinTree = function( elem, el ) {

		// isHiddenWithinTree might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;

		// Inline style trumps all
		return elem.style.display === "none" ||
			elem.style.display === "" &&

			// Otherwise, check computed style
			// Support: Firefox <=43 - 45
			// Disconnected elements can have computed display: none, so first confirm that elem is
			// in the document.
			isAttached( elem ) &&

			jQuery.css( elem, "display" ) === "none";
	};



function adjustCSS( elem, prop, valueParts, tween ) {
	var adjusted, scale,
		maxIterations = 20,
		currentValue = tween ?
			function() {
				return tween.cur();
			} :
			function() {
				return jQuery.css( elem, prop, "" );
			},
		initial = currentValue(),
		unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

		// Starting value computation is required for potential unit mismatches
		initialInUnit = elem.nodeType &&
			( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
			rcssNum.exec( jQuery.css( elem, prop ) );

	if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

		// Support: Firefox <=54
		// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)
		initial = initial / 2;

		// Trust units reported by jQuery.css
		unit = unit || initialInUnit[ 3 ];

		// Iteratively approximate from a nonzero starting point
		initialInUnit = +initial || 1;

		while ( maxIterations-- ) {

			// Evaluate and update our best guess (doubling guesses that zero out).
			// Finish if the scale equals or crosses 1 (making the old*new product non-positive).
			jQuery.style( elem, prop, initialInUnit + unit );
			if ( ( 1 - scale ) * ( 1 - ( scale = currentValue() / initial || 0.5 ) ) <= 0 ) {
				maxIterations = 0;
			}
			initialInUnit = initialInUnit / scale;

		}

		initialInUnit = initialInUnit * 2;
		jQuery.style( elem, prop, initialInUnit + unit );

		// Make sure we update the tween properties later on
		valueParts = valueParts || [];
	}

	if ( valueParts ) {
		initialInUnit = +initialInUnit || +initial || 0;

		// Apply relative offset (+=/-=) if specified
		adjusted = valueParts[ 1 ] ?
			initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
			+valueParts[ 2 ];
		if ( tween ) {
			tween.unit = unit;
			tween.start = initialInUnit;
			tween.end = adjusted;
		}
	}
	return adjusted;
}


var defaultDisplayMap = {};

function getDefaultDisplay( elem ) {
	var temp,
		doc = elem.ownerDocument,
		nodeName = elem.nodeName,
		display = defaultDisplayMap[ nodeName ];

	if ( display ) {
		return display;
	}

	temp = doc.body.appendChild( doc.createElement( nodeName ) );
	display = jQuery.css( temp, "display" );

	temp.parentNode.removeChild( temp );

	if ( display === "none" ) {
		display = "block";
	}
	defaultDisplayMap[ nodeName ] = display;

	return display;
}

function showHide( elements, show ) {
	var display, elem,
		values = [],
		index = 0,
		length = elements.length;

	// Determine new display value for elements that need to change
	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		display = elem.style.display;
		if ( show ) {

			// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
			// check is required in this first loop unless we have a nonempty display value (either
			// inline or about-to-be-restored)
			if ( display === "none" ) {
				values[ index ] = dataPriv.get( elem, "display" ) || null;
				if ( !values[ index ] ) {
					elem.style.display = "";
				}
			}
			if ( elem.style.display === "" && isHiddenWithinTree( elem ) ) {
				values[ index ] = getDefaultDisplay( elem );
			}
		} else {
			if ( display !== "none" ) {
				values[ index ] = "none";

				// Remember what we're overwriting
				dataPriv.set( elem, "display", display );
			}
		}
	}

	// Set the display of the elements in a second loop to avoid constant reflow
	for ( index = 0; index < length; index++ ) {
		if ( values[ index ] != null ) {
			elements[ index ].style.display = values[ index ];
		}
	}

	return elements;
}

jQuery.fn.extend( {
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each( function() {
			if ( isHiddenWithinTree( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		} );
	}
} );
var rcheckableType = ( /^(?:checkbox|radio)$/i );

var rtagName = ( /<([a-z][^\/\0>\x20\t\r\n\f]*)/i );

var rscriptType = ( /^$|^module$|\/(?:java|ecma)script/i );



( function() {
	var fragment = document.createDocumentFragment(),
		div = fragment.appendChild( document.createElement( "div" ) ),
		input = document.createElement( "input" );

	// Support: Android 4.0 - 4.3 only
	// Check state lost if the name is set (#11217)
	// Support: Windows Web Apps (WWA)
	// `name` and `type` must use .setAttribute for WWA (#14901)
	input.setAttribute( "type", "radio" );
	input.setAttribute( "checked", "checked" );
	input.setAttribute( "name", "t" );

	div.appendChild( input );

	// Support: Android <=4.1 only
	// Older WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE <=11 only
	// Make sure textarea (and checkbox) defaultValue is properly cloned
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;

	// Support: IE <=9 only
	// IE <=9 replaces <option> tags with their contents when inserted outside of
	// the select element.
	div.innerHTML = "<option></option>";
	support.option = !!div.lastChild;
} )();


// We have to close these tags to support XHTML (#13200)
var wrapMap = {

	// XHTML parsers do not magically insert elements in the
	// same way that tag soup parsers do. So we cannot shorten
	// this by omitting <tbody> or other required elements.
	thead: [ 1, "<table>", "</table>" ],
	col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
	tr: [ 2, "<table><tbody>", "</tbody></table>" ],
	td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

	_default: [ 0, "", "" ]
};

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;

// Support: IE <=9 only
if ( !support.option ) {
	wrapMap.optgroup = wrapMap.option = [ 1, "<select multiple='multiple'>", "</select>" ];
}


function getAll( context, tag ) {

	// Support: IE <=9 - 11 only
	// Use typeof to avoid zero-argument method invocation on host objects (#15151)
	var ret;

	if ( typeof context.getElementsByTagName !== "undefined" ) {
		ret = context.getElementsByTagName( tag || "*" );

	} else if ( typeof context.querySelectorAll !== "undefined" ) {
		ret = context.querySelectorAll( tag || "*" );

	} else {
		ret = [];
	}

	if ( tag === undefined || tag && nodeName( context, tag ) ) {
		return jQuery.merge( [ context ], ret );
	}

	return ret;
}


// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		dataPriv.set(
			elems[ i ],
			"globalEval",
			!refElements || dataPriv.get( refElements[ i ], "globalEval" )
		);
	}
}


var rhtml = /<|&#?\w+;/;

function buildFragment( elems, context, scripts, selection, ignored ) {
	var elem, tmp, tag, wrap, attached, j,
		fragment = context.createDocumentFragment(),
		nodes = [],
		i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		elem = elems[ i ];

		if ( elem || elem === 0 ) {

			// Add nodes directly
			if ( toType( elem ) === "object" ) {

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

			// Convert non-html into a text node
			} else if ( !rhtml.test( elem ) ) {
				nodes.push( context.createTextNode( elem ) );

			// Convert html into DOM nodes
			} else {
				tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

				// Deserialize a standard representation
				tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
				wrap = wrapMap[ tag ] || wrapMap._default;
				tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

				// Descend through wrappers to the right content
				j = wrap[ 0 ];
				while ( j-- ) {
					tmp = tmp.lastChild;
				}

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, tmp.childNodes );

				// Remember the top-level container
				tmp = fragment.firstChild;

				// Ensure the created nodes are orphaned (#12392)
				tmp.textContent = "";
			}
		}
	}

	// Remove wrapper from fragment
	fragment.textContent = "";

	i = 0;
	while ( ( elem = nodes[ i++ ] ) ) {

		// Skip elements already in the context collection (trac-4087)
		if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
			if ( ignored ) {
				ignored.push( elem );
			}
			continue;
		}

		attached = isAttached( elem );

		// Append to fragment
		tmp = getAll( fragment.appendChild( elem ), "script" );

		// Preserve script evaluation history
		if ( attached ) {
			setGlobalEval( tmp );
		}

		// Capture executables
		if ( scripts ) {
			j = 0;
			while ( ( elem = tmp[ j++ ] ) ) {
				if ( rscriptType.test( elem.type || "" ) ) {
					scripts.push( elem );
				}
			}
		}
	}

	return fragment;
}


var
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

// Support: IE <=9 - 11+
// focus() and blur() are asynchronous, except when they are no-op.
// So expect focus to be synchronous when the element is already active,
// and blur to be synchronous when the element is not already active.
// (focus and blur are always synchronous in other supported browsers,
// this just defines when we can count on it).
function expectSync( elem, type ) {
	return ( elem === safeActiveElement() ) === ( type === "focus" );
}

// Support: IE <=9 only
// Accessing document.activeElement can throw unexpectedly
// https://bugs.jquery.com/ticket/13393
function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

function on( elem, types, selector, data, fn, one ) {
	var origFn, type;

	// Types can be a map of types/handlers
	if ( typeof types === "object" ) {

		// ( types-Object, selector, data )
		if ( typeof selector !== "string" ) {

			// ( types-Object, data )
			data = data || selector;
			selector = undefined;
		}
		for ( type in types ) {
			on( elem, type, selector, data, types[ type ], one );
		}
		return elem;
	}

	if ( data == null && fn == null ) {

		// ( types, fn )
		fn = selector;
		data = selector = undefined;
	} else if ( fn == null ) {
		if ( typeof selector === "string" ) {

			// ( types, selector, fn )
			fn = data;
			data = undefined;
		} else {

			// ( types, data, fn )
			fn = data;
			data = selector;
			selector = undefined;
		}
	}
	if ( fn === false ) {
		fn = returnFalse;
	} else if ( !fn ) {
		return elem;
	}

	if ( one === 1 ) {
		origFn = fn;
		fn = function( event ) {

			// Can use an empty set, since event contains the info
			jQuery().off( event );
			return origFn.apply( this, arguments );
		};

		// Use same guid so caller can remove using origFn
		fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
	}
	return elem.each( function() {
		jQuery.event.add( this, types, fn, data, selector );
	} );
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {

		var handleObjIn, eventHandle, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.get( elem );

		// Only attach events to objects that accept data
		if ( !acceptData( elem ) ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Ensure that invalid selectors throw exceptions at attach time
		// Evaluate against documentElement in case elem is a non-element node (e.g., document)
		if ( selector ) {
			jQuery.find.matchesSelector( documentElement, selector );
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !( events = elemData.events ) ) {
			events = elemData.events = Object.create( null );
		}
		if ( !( eventHandle = elemData.handle ) ) {
			eventHandle = elemData.handle = function( e ) {

				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
					jQuery.event.dispatch.apply( elem, arguments ) : undefined;
			};
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend( {
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join( "." )
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !( handlers = events[ type ] ) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener if the special events handler returns false
				if ( !special.setup ||
					special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var j, origCount, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

		if ( !elemData || !( events = elemData.events ) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[ 2 ] &&
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector ||
						selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown ||
					special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove data and the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			dataPriv.remove( elem, "handle events" );
		}
	},

	dispatch: function( nativeEvent ) {

		var i, j, ret, matched, handleObj, handlerQueue,
			args = new Array( arguments.length ),

			// Make a writable jQuery.Event from the native event object
			event = jQuery.event.fix( nativeEvent ),

			handlers = (
					dataPriv.get( this, "events" ) || Object.create( null )
				)[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[ 0 ] = event;

		for ( i = 1; i < arguments.length; i++ ) {
			args[ i ] = arguments[ i ];
		}

		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( ( handleObj = matched.handlers[ j++ ] ) &&
				!event.isImmediatePropagationStopped() ) {

				// If the event is namespaced, then each handler is only invoked if it is
				// specially universal or its namespaces are a superset of the event's.
				if ( !event.rnamespace || handleObj.namespace === false ||
					event.rnamespace.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
						handleObj.handler ).apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( ( event.result = ret ) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, handleObj, sel, matchedHandlers, matchedSelectors,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		if ( delegateCount &&

			// Support: IE <=9
			// Black-hole SVG <use> instance trees (trac-13180)
			cur.nodeType &&

			// Support: Firefox <=42
			// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
			// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
			// Support: IE 11 only
			// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
			!( event.type === "click" && event.button >= 1 ) ) {

			for ( ; cur !== this; cur = cur.parentNode || this ) {

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && !( event.type === "click" && cur.disabled === true ) ) {
					matchedHandlers = [];
					matchedSelectors = {};
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matchedSelectors[ sel ] === undefined ) {
							matchedSelectors[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) > -1 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matchedSelectors[ sel ] ) {
							matchedHandlers.push( handleObj );
						}
					}
					if ( matchedHandlers.length ) {
						handlerQueue.push( { elem: cur, handlers: matchedHandlers } );
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		cur = this;
		if ( delegateCount < handlers.length ) {
			handlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );
		}

		return handlerQueue;
	},

	addProp: function( name, hook ) {
		Object.defineProperty( jQuery.Event.prototype, name, {
			enumerable: true,
			configurable: true,

			get: isFunction( hook ) ?
				function() {
					if ( this.originalEvent ) {
							return hook( this.originalEvent );
					}
				} :
				function() {
					if ( this.originalEvent ) {
							return this.originalEvent[ name ];
					}
				},

			set: function( value ) {
				Object.defineProperty( this, name, {
					enumerable: true,
					configurable: true,
					writable: true,
					value: value
				} );
			}
		} );
	},

	fix: function( originalEvent ) {
		return originalEvent[ jQuery.expando ] ?
			originalEvent :
			new jQuery.Event( originalEvent );
	},

	special: {
		load: {

			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		click: {

			// Utilize native event to ensure correct state for checkable inputs
			setup: function( data ) {

				// For mutual compressibility with _default, replace `this` access with a local var.
				// `|| data` is dead code meant only to preserve the variable through minification.
				var el = this || data;

				// Claim the first handler
				if ( rcheckableType.test( el.type ) &&
					el.click && nodeName( el, "input" ) ) {

					// dataPriv.set( el, "click", ... )
					leverageNative( el, "click", returnTrue );
				}

				// Return false to allow normal processing in the caller
				return false;
			},
			trigger: function( data ) {

				// For mutual compressibility with _default, replace `this` access with a local var.
				// `|| data` is dead code meant only to preserve the variable through minification.
				var el = this || data;

				// Force setup before triggering a click
				if ( rcheckableType.test( el.type ) &&
					el.click && nodeName( el, "input" ) ) {

					leverageNative( el, "click" );
				}

				// Return non-false to allow normal event-path propagation
				return true;
			},

			// For cross-browser consistency, suppress native .click() on links
			// Also prevent it if we're currently inside a leveraged native-event stack
			_default: function( event ) {
				var target = event.target;
				return rcheckableType.test( target.type ) &&
					target.click && nodeName( target, "input" ) &&
					dataPriv.get( target, "click" ) ||
					nodeName( target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	}
};

// Ensure the presence of an event listener that handles manually-triggered
// synthetic events by interrupting progress until reinvoked in response to
// *native* events that it fires directly, ensuring that state changes have
// already occurred before other listeners are invoked.
function leverageNative( el, type, expectSync ) {

	// Missing expectSync indicates a trigger call, which must force setup through jQuery.event.add
	if ( !expectSync ) {
		if ( dataPriv.get( el, type ) === undefined ) {
			jQuery.event.add( el, type, returnTrue );
		}
		return;
	}

	// Register the controller as a special universal handler for all event namespaces
	dataPriv.set( el, type, false );
	jQuery.event.add( el, type, {
		namespace: false,
		handler: function( event ) {
			var notAsync, result,
				saved = dataPriv.get( this, type );

			if ( ( event.isTrigger & 1 ) && this[ type ] ) {

				// Interrupt processing of the outer synthetic .trigger()ed event
				// Saved data should be false in such cases, but might be a leftover capture object
				// from an async native handler (gh-4350)
				if ( !saved.length ) {

					// Store arguments for use when handling the inner native event
					// There will always be at least one argument (an event object), so this array
					// will not be confused with a leftover capture object.
					saved = slice.call( arguments );
					dataPriv.set( this, type, saved );

					// Trigger the native event and capture its result
					// Support: IE <=9 - 11+
					// focus() and blur() are asynchronous
					notAsync = expectSync( this, type );
					this[ type ]();
					result = dataPriv.get( this, type );
					if ( saved !== result || notAsync ) {
						dataPriv.set( this, type, false );
					} else {
						result = {};
					}
					if ( saved !== result ) {

						// Cancel the outer synthetic event
						event.stopImmediatePropagation();
						event.preventDefault();
						return result.value;
					}

				// If this is an inner synthetic event for an event with a bubbling surrogate
				// (focus or blur), assume that the surrogate already propagated from triggering the
				// native event and prevent that from happening again here.
				// This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the
				// bubbling surrogate propagates *after* the non-bubbling base), but that seems
				// less bad than duplication.
				} else if ( ( jQuery.event.special[ type ] || {} ).delegateType ) {
					event.stopPropagation();
				}

			// If this is a native event triggered above, everything is now in order
			// Fire an inner synthetic event with the original arguments
			} else if ( saved.length ) {

				// ...and capture the result
				dataPriv.set( this, type, {
					value: jQuery.event.trigger(

						// Support: IE <=9 - 11+
						// Extend with the prototype to reset the above stopImmediatePropagation()
						jQuery.extend( saved[ 0 ], jQuery.Event.prototype ),
						saved.slice( 1 ),
						this
					)
				} );

				// Abort handling of the native event
				event.stopImmediatePropagation();
			}
		}
	} );
}

jQuery.removeEvent = function( elem, type, handle ) {

	// This "if" is needed for plain objects
	if ( elem.removeEventListener ) {
		elem.removeEventListener( type, handle );
	}
};

jQuery.Event = function( src, props ) {

	// Allow instantiation without the 'new' keyword
	if ( !( this instanceof jQuery.Event ) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&

				// Support: Android <=2.3 only
				src.returnValue === false ?
			returnTrue :
			returnFalse;

		// Create target properties
		// Support: Safari <=6 - 7 only
		// Target should not be a text node (#504, #13143)
		this.target = ( src.target && src.target.nodeType === 3 ) ?
			src.target.parentNode :
			src.target;

		this.currentTarget = src.currentTarget;
		this.relatedTarget = src.relatedTarget;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || Date.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	constructor: jQuery.Event,
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,
	isSimulated: false,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;

		if ( e && !this.isSimulated ) {
			e.preventDefault();
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopPropagation();
		}
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Includes all common event props including KeyEvent and MouseEvent specific props
jQuery.each( {
	altKey: true,
	bubbles: true,
	cancelable: true,
	changedTouches: true,
	ctrlKey: true,
	detail: true,
	eventPhase: true,
	metaKey: true,
	pageX: true,
	pageY: true,
	shiftKey: true,
	view: true,
	"char": true,
	code: true,
	charCode: true,
	key: true,
	keyCode: true,
	button: true,
	buttons: true,
	clientX: true,
	clientY: true,
	offsetX: true,
	offsetY: true,
	pointerId: true,
	pointerType: true,
	screenX: true,
	screenY: true,
	targetTouches: true,
	toElement: true,
	touches: true,

	which: function( event ) {
		var button = event.button;

		// Add which for key events
		if ( event.which == null && rkeyEvent.test( event.type ) ) {
			return event.charCode != null ? event.charCode : event.keyCode;
		}

		// Add which for click: 1 === left; 2 === middle; 3 === right
		if ( !event.which && button !== undefined && rmouseEvent.test( event.type ) ) {
			if ( button & 1 ) {
				return 1;
			}

			if ( button & 2 ) {
				return 3;
			}

			if ( button & 4 ) {
				return 2;
			}

			return 0;
		}

		return event.which;
	}
}, jQuery.event.addProp );

jQuery.each( { focus: "focusin", blur: "focusout" }, function( type, delegateType ) {
	jQuery.event.special[ type ] = {

		// Utilize native event if possible so blur/focus sequence is correct
		setup: function() {

			// Claim the first handler
			// dataPriv.set( this, "focus", ... )
			// dataPriv.set( this, "blur", ... )
			leverageNative( this, type, expectSync );

			// Return false to allow normal processing in the caller
			return false;
		},
		trigger: function() {

			// Force setup before trigger
			leverageNative( this, type );

			// Return non-false to allow normal event-path propagation
			return true;
		},

		delegateType: delegateType
	};
} );

// Create mouseenter/leave events using mouseover/out and event-time checks
// so that event delegation works in jQuery.
// Do the same for pointerenter/pointerleave and pointerover/pointerout
//
// Support: Safari 7 only
// Safari sends mouseenter too often; see:
// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
// for the description of the bug (it existed in older Chrome versions as well).
jQuery.each( {
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mouseenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
} );

jQuery.fn.extend( {

	on: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn );
	},
	one: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {

			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ?
					handleObj.origType + "." + handleObj.namespace :
					handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {

			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {

			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each( function() {
			jQuery.event.remove( this, types, fn, selector );
		} );
	}
} );


var

	// Support: IE <=10 - 11, Edge 12 - 13 only
	// In IE/Edge using regex groups here causes severe slowdowns.
	// See https://connect.microsoft.com/IE/feedback/details/1736512/
	rnoInnerhtml = /<script|<style|<link/i,

	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

// Prefer a tbody over its parent table for containing new rows
function manipulationTarget( elem, content ) {
	if ( nodeName( elem, "table" ) &&
		nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {

		return jQuery( elem ).children( "tbody" )[ 0 ] || elem;
	}

	return elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	if ( ( elem.type || "" ).slice( 0, 5 ) === "true/" ) {
		elem.type = elem.type.slice( 5 );
	} else {
		elem.removeAttribute( "type" );
	}

	return elem;
}

function cloneCopyEvent( src, dest ) {
	var i, l, type, pdataOld, udataOld, udataCur, events;

	if ( dest.nodeType !== 1 ) {
		return;
	}

	// 1. Copy private data: events, handlers, etc.
	if ( dataPriv.hasData( src ) ) {
		pdataOld = dataPriv.get( src );
		events = pdataOld.events;

		if ( events ) {
			dataPriv.remove( dest, "handle events" );

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	}

	// 2. Copy user data
	if ( dataUser.hasData( src ) ) {
		udataOld = dataUser.access( src );
		udataCur = jQuery.extend( {}, udataOld );

		dataUser.set( dest, udataCur );
	}
}

// Fix IE bugs, see support tests
function fixInput( src, dest ) {
	var nodeName = dest.nodeName.toLowerCase();

	// Fails to persist the checked state of a cloned checkbox or radio button.
	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		dest.checked = src.checked;

	// Fails to return the selected option to the default selected state when cloning options
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

function domManip( collection, args, callback, ignored ) {

	// Flatten any nested arrays
	args = flat( args );

	var fragment, first, scripts, hasScripts, node, doc,
		i = 0,
		l = collection.length,
		iNoClone = l - 1,
		value = args[ 0 ],
		valueIsFunction = isFunction( value );

	// We can't cloneNode fragments that contain checked, in WebKit
	if ( valueIsFunction ||
			( l > 1 && typeof value === "string" &&
				!support.checkClone && rchecked.test( value ) ) ) {
		return collection.each( function( index ) {
			var self = collection.eq( index );
			if ( valueIsFunction ) {
				args[ 0 ] = value.call( this, index, self.html() );
			}
			domManip( self, args, callback, ignored );
		} );
	}

	if ( l ) {
		fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
		first = fragment.firstChild;

		if ( fragment.childNodes.length === 1 ) {
			fragment = first;
		}

		// Require either new content or an interest in ignored elements to invoke the callback
		if ( first || ignored ) {
			scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
			hasScripts = scripts.length;

			// Use the original fragment for the last item
			// instead of the first because it can end up
			// being emptied incorrectly in certain situations (#8070).
			for ( ; i < l; i++ ) {
				node = fragment;

				if ( i !== iNoClone ) {
					node = jQuery.clone( node, true, true );

					// Keep references to cloned scripts for later restoration
					if ( hasScripts ) {

						// Support: Android <=4.0 only, PhantomJS 1 only
						// push.apply(_, arraylike) throws on ancient WebKit
						jQuery.merge( scripts, getAll( node, "script" ) );
					}
				}

				callback.call( collection[ i ], node, i );
			}

			if ( hasScripts ) {
				doc = scripts[ scripts.length - 1 ].ownerDocument;

				// Reenable scripts
				jQuery.map( scripts, restoreScript );

				// Evaluate executable scripts on first document insertion
				for ( i = 0; i < hasScripts; i++ ) {
					node = scripts[ i ];
					if ( rscriptType.test( node.type || "" ) &&
						!dataPriv.access( node, "globalEval" ) &&
						jQuery.contains( doc, node ) ) {

						if ( node.src && ( node.type || "" ).toLowerCase()  !== "module" ) {

							// Optional AJAX dependency, but won't run scripts if not present
							if ( jQuery._evalUrl && !node.noModule ) {
								jQuery._evalUrl( node.src, {
									nonce: node.nonce || node.getAttribute( "nonce" )
								}, doc );
							}
						} else {
							DOMEval( node.textContent.replace( rcleanScript, "" ), node, doc );
						}
					}
				}
			}
		}
	}

	return collection;
}

function remove( elem, selector, keepData ) {
	var node,
		nodes = selector ? jQuery.filter( selector, elem ) : elem,
		i = 0;

	for ( ; ( node = nodes[ i ] ) != null; i++ ) {
		if ( !keepData && node.nodeType === 1 ) {
			jQuery.cleanData( getAll( node ) );
		}

		if ( node.parentNode ) {
			if ( keepData && isAttached( node ) ) {
				setGlobalEval( getAll( node, "script" ) );
			}
			node.parentNode.removeChild( node );
		}
	}

	return elem;
}

jQuery.extend( {
	htmlPrefilter: function( html ) {
		return html;
	},

	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var i, l, srcElements, destElements,
			clone = elem.cloneNode( true ),
			inPage = isAttached( elem );

		// Fix IE cloning issues
		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
				!jQuery.isXMLDoc( elem ) ) {

			// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			for ( i = 0, l = srcElements.length; i < l; i++ ) {
				fixInput( srcElements[ i ], destElements[ i ] );
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		// Return the cloned set
		return clone;
	},

	cleanData: function( elems ) {
		var data, elem, type,
			special = jQuery.event.special,
			i = 0;

		for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
			if ( acceptData( elem ) ) {
				if ( ( data = elem[ dataPriv.expando ] ) ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataPriv.expando ] = undefined;
				}
				if ( elem[ dataUser.expando ] ) {

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataUser.expando ] = undefined;
				}
			}
		}
	}
} );

jQuery.fn.extend( {
	detach: function( selector ) {
		return remove( this, selector, true );
	},

	remove: function( selector ) {
		return remove( this, selector );
	},

	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().each( function() {
					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
						this.textContent = value;
					}
				} );
		}, null, value, arguments.length );
	},

	append: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		} );
	},

	prepend: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		} );
	},

	before: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		} );
	},

	after: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		} );
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; ( elem = this[ i ] ) != null; i++ ) {
			if ( elem.nodeType === 1 ) {

				// Prevent memory leaks
				jQuery.cleanData( getAll( elem, false ) );

				// Remove any remaining nodes
				elem.textContent = "";
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		} );
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined && elem.nodeType === 1 ) {
				return elem.innerHTML;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = jQuery.htmlPrefilter( value );

				try {
					for ( ; i < l; i++ ) {
						elem = this[ i ] || {};

						// Remove element nodes and prevent memory leaks
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch ( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var ignored = [];

		// Make the changes, replacing each non-ignored context element with the new content
		return domManip( this, arguments, function( elem ) {
			var parent = this.parentNode;

			if ( jQuery.inArray( this, ignored ) < 0 ) {
				jQuery.cleanData( getAll( this ) );
				if ( parent ) {
					parent.replaceChild( elem, this );
				}
			}

		// Force callback invocation
		}, ignored );
	}
} );

jQuery.each( {
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1,
			i = 0;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Support: Android <=4.0 only, PhantomJS 1 only
			// .get() because push.apply(_, arraylike) throws on ancient WebKit
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
} );
var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var getStyles = function( elem ) {

		// Support: IE <=11 only, Firefox <=30 (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		var view = elem.ownerDocument.defaultView;

		if ( !view || !view.opener ) {
			view = window;
		}

		return view.getComputedStyle( elem );
	};

var swap = function( elem, options, callback ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.call( elem );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};


var rboxStyle = new RegExp( cssExpand.join( "|" ), "i" );



( function() {

	// Executing both pixelPosition & boxSizingReliable tests require only one layout
	// so they're executed at the same time to save the second computation.
	function computeStyleTests() {

		// This is a singleton, we need to execute it only once
		if ( !div ) {
			return;
		}

		container.style.cssText = "position:absolute;left:-11111px;width:60px;" +
			"margin-top:1px;padding:0;border:0";
		div.style.cssText =
			"position:relative;display:block;box-sizing:border-box;overflow:scroll;" +
			"margin:auto;border:1px;padding:1px;" +
			"width:60%;top:1%";
		documentElement.appendChild( container ).appendChild( div );

		var divStyle = window.getComputedStyle( div );
		pixelPositionVal = divStyle.top !== "1%";

		// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
		reliableMarginLeftVal = roundPixelMeasures( divStyle.marginLeft ) === 12;

		// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
		// Some styles come back with percentage values, even though they shouldn't
		div.style.right = "60%";
		pixelBoxStylesVal = roundPixelMeasures( divStyle.right ) === 36;

		// Support: IE 9 - 11 only
		// Detect misreporting of content dimensions for box-sizing:border-box elements
		boxSizingReliableVal = roundPixelMeasures( divStyle.width ) === 36;

		// Support: IE 9 only
		// Detect overflow:scroll screwiness (gh-3699)
		// Support: Chrome <=64
		// Don't get tricked when zoom affects offsetWidth (gh-4029)
		div.style.position = "absolute";
		scrollboxSizeVal = roundPixelMeasures( div.offsetWidth / 3 ) === 12;

		documentElement.removeChild( container );

		// Nullify the div so it wouldn't be stored in the memory and
		// it will also be a sign that checks already performed
		div = null;
	}

	function roundPixelMeasures( measure ) {
		return Math.round( parseFloat( measure ) );
	}

	var pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,
		reliableTrDimensionsVal, reliableMarginLeftVal,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	// Finish early in limited (non-browser) environments
	if ( !div.style ) {
		return;
	}

	// Support: IE <=9 - 11 only
	// Style of cloned element affects source element cloned (#8908)
	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	jQuery.extend( support, {
		boxSizingReliable: function() {
			computeStyleTests();
			return boxSizingReliableVal;
		},
		pixelBoxStyles: function() {
			computeStyleTests();
			return pixelBoxStylesVal;
		},
		pixelPosition: function() {
			computeStyleTests();
			return pixelPositionVal;
		},
		reliableMarginLeft: function() {
			computeStyleTests();
			return reliableMarginLeftVal;
		},
		scrollboxSize: function() {
			computeStyleTests();
			return scrollboxSizeVal;
		},

		// Support: IE 9 - 11+, Edge 15 - 18+
		// IE/Edge misreport `getComputedStyle` of table rows with width/height
		// set in CSS while `offset*` properties report correct values.
		// Behavior in IE 9 is more subtle than in newer versions & it passes
		// some versions of this test; make sure not to make it pass there!
		reliableTrDimensions: function() {
			var table, tr, trChild, trStyle;
			if ( reliableTrDimensionsVal == null ) {
				table = document.createElement( "table" );
				tr = document.createElement( "tr" );
				trChild = document.createElement( "div" );

				table.style.cssText = "position:absolute;left:-11111px";
				tr.style.height = "1px";
				trChild.style.height = "9px";

				documentElement
					.appendChild( table )
					.appendChild( tr )
					.appendChild( trChild );

				trStyle = window.getComputedStyle( tr );
				reliableTrDimensionsVal = parseInt( trStyle.height ) > 3;

				documentElement.removeChild( table );
			}
			return reliableTrDimensionsVal;
		}
	} );
} )();


function curCSS( elem, name, computed ) {
	var width, minWidth, maxWidth, ret,

		// Support: Firefox 51+
		// Retrieving style before computed somehow
		// fixes an issue with getting wrong values
		// on detached elements
		style = elem.style;

	computed = computed || getStyles( elem );

	// getPropertyValue is needed for:
	//   .css('filter') (IE 9 only, #12537)
	//   .css('--customProperty) (#3144)
	if ( computed ) {
		ret = computed.getPropertyValue( name ) || computed[ name ];

		if ( ret === "" && !isAttached( elem ) ) {
			ret = jQuery.style( elem, name );
		}

		// A tribute to the "awesome hack by Dean Edwards"
		// Android Browser returns percentage for some values,
		// but width seems to be reliably pixels.
		// This is against the CSSOM draft spec:
		// https://drafts.csswg.org/cssom/#resolved-values
		if ( !support.pixelBoxStyles() && rnumnonpx.test( ret ) && rboxStyle.test( name ) ) {

			// Remember the original values
			width = style.width;
			minWidth = style.minWidth;
			maxWidth = style.maxWidth;

			// Put in the new values to get a computed value out
			style.minWidth = style.maxWidth = style.width = ret;
			ret = computed.width;

			// Revert the changed values
			style.width = width;
			style.minWidth = minWidth;
			style.maxWidth = maxWidth;
		}
	}

	return ret !== undefined ?

		// Support: IE <=9 - 11 only
		// IE returns zIndex value as an integer.
		ret + "" :
		ret;
}


function addGetHookIf( conditionFn, hookFn ) {

	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {

				// Hook not needed (or it's not possible to use it due
				// to missing dependency), remove it.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.
			return ( this.get = hookFn ).apply( this, arguments );
		}
	};
}


var cssPrefixes = [ "Webkit", "Moz", "ms" ],
	emptyStyle = document.createElement( "div" ).style,
	vendorProps = {};

// Return a vendor-prefixed property or undefined
function vendorPropName( name ) {

	// Check for vendor prefixed names
	var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in emptyStyle ) {
			return name;
		}
	}
}

// Return a potentially-mapped jQuery.cssProps or vendor prefixed property
function finalPropName( name ) {
	var final = jQuery.cssProps[ name ] || vendorProps[ name ];

	if ( final ) {
		return final;
	}
	if ( name in emptyStyle ) {
		return name;
	}
	return vendorProps[ name ] = vendorPropName( name ) || name;
}


var

	// Swappable if display is none or starts with table
	// except "table", "table-cell", or "table-caption"
	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rcustomProp = /^--/,
	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	};

function setPositiveNumber( _elem, value, subtract ) {

	// Any relative (+/-) values have already been
	// normalized at this point
	var matches = rcssNum.exec( value );
	return matches ?

		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
		value;
}

function boxModelAdjustment( elem, dimension, box, isBorderBox, styles, computedVal ) {
	var i = dimension === "width" ? 1 : 0,
		extra = 0,
		delta = 0;

	// Adjustment may not be necessary
	if ( box === ( isBorderBox ? "border" : "content" ) ) {
		return 0;
	}

	for ( ; i < 4; i += 2 ) {

		// Both box models exclude margin
		if ( box === "margin" ) {
			delta += jQuery.css( elem, box + cssExpand[ i ], true, styles );
		}

		// If we get here with a content-box, we're seeking "padding" or "border" or "margin"
		if ( !isBorderBox ) {

			// Add padding
			delta += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// For "border" or "margin", add border
			if ( box !== "padding" ) {
				delta += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );

			// But still keep track of it otherwise
			} else {
				extra += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}

		// If we get here with a border-box (content + padding + border), we're seeking "content" or
		// "padding" or "margin"
		} else {

			// For "content", subtract padding
			if ( box === "content" ) {
				delta -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// For "content" or "padding", subtract border
			if ( box !== "margin" ) {
				delta -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	// Account for positive content-box scroll gutter when requested by providing computedVal
	if ( !isBorderBox && computedVal >= 0 ) {

		// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
		// Assuming integer scroll gutter, subtract the rest and round down
		delta += Math.max( 0, Math.ceil(
			elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
			computedVal -
			delta -
			extra -
			0.5

		// If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter
		// Use an explicit zero to avoid NaN (gh-3964)
		) ) || 0;
	}

	return delta;
}

function getWidthOrHeight( elem, dimension, extra ) {

	// Start with computed style
	var styles = getStyles( elem ),

		// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).
		// Fake content-box until we know it's needed to know the true value.
		boxSizingNeeded = !support.boxSizingReliable() || extra,
		isBorderBox = boxSizingNeeded &&
			jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
		valueIsBorderBox = isBorderBox,

		val = curCSS( elem, dimension, styles ),
		offsetProp = "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 );

	// Support: Firefox <=54
	// Return a confounding non-pixel value or feign ignorance, as appropriate.
	if ( rnumnonpx.test( val ) ) {
		if ( !extra ) {
			return val;
		}
		val = "auto";
	}


	// Support: IE 9 - 11 only
	// Use offsetWidth/offsetHeight for when box sizing is unreliable.
	// In those cases, the computed value can be trusted to be border-box.
	if ( ( !support.boxSizingReliable() && isBorderBox ||

		// Support: IE 10 - 11+, Edge 15 - 18+
		// IE/Edge misreport `getComputedStyle` of table rows with width/height
		// set in CSS while `offset*` properties report correct values.
		// Interestingly, in some cases IE 9 doesn't suffer from this issue.
		!support.reliableTrDimensions() && nodeName( elem, "tr" ) ||

		// Fall back to offsetWidth/offsetHeight when value is "auto"
		// This happens for inline elements with no explicit setting (gh-3571)
		val === "auto" ||

		// Support: Android <=4.1 - 4.3 only
		// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
		!parseFloat( val ) && jQuery.css( elem, "display", false, styles ) === "inline" ) &&

		// Make sure the element is visible & connected
		elem.getClientRects().length ) {

		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

		// Where available, offsetWidth/offsetHeight approximate border box dimensions.
		// Where not available (e.g., SVG), assume unreliable box-sizing and interpret the
		// retrieved value as a content box dimension.
		valueIsBorderBox = offsetProp in elem;
		if ( valueIsBorderBox ) {
			val = elem[ offsetProp ];
		}
	}

	// Normalize "" and auto
	val = parseFloat( val ) || 0;

	// Adjust for the element's box model
	return ( val +
		boxModelAdjustment(
			elem,
			dimension,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles,

			// Provide the current computed size to request scroll gutter calculation (gh-3589)
			val
		)
	) + "px";
}

jQuery.extend( {

	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {

					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"animationIterationCount": true,
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"gridArea": true,
		"gridColumn": true,
		"gridColumnEnd": true,
		"gridColumnStart": true,
		"gridRow": true,
		"gridRowEnd": true,
		"gridRowStart": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {

		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name ),
			style = elem.style;

		// Make sure that we're working with the right name. We don't
		// want to query the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Gets hook for the prefixed version, then unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// Convert "+=" or "-=" to relative numbers (#7345)
			if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
				value = adjustCSS( elem, name, ret );

				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set (#7116)
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add the unit (except for certain CSS properties)
			// The isCustomProp check can be removed in jQuery 4.0 when we only auto-append
			// "px" to a few hardcoded values.
			if ( type === "number" && !isCustomProp ) {
				value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
			}

			// background-* props affect original clone's values
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !( "set" in hooks ) ||
				( value = hooks.set( elem, value, extra ) ) !== undefined ) {

				if ( isCustomProp ) {
					style.setProperty( name, value );
				} else {
					style[ name ] = value;
				}
			}

		} else {

			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks &&
				( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var val, num, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name );

		// Make sure that we're working with the right name. We don't
		// want to modify the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Try prefixed name followed by the unprefixed name
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		// Convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Make numeric if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || isFinite( num ) ? num || 0 : val;
		}

		return val;
	}
} );

jQuery.each( [ "height", "width" ], function( _i, dimension ) {
	jQuery.cssHooks[ dimension ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {

				// Certain elements can have dimension info if we invisibly show them
				// but it must have a current display style that would benefit
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&

					// Support: Safari 8+
					// Table columns in Safari have non-zero offsetWidth & zero
					// getBoundingClientRect().width unless display is changed.
					// Support: IE <=11 only
					// Running getBoundingClientRect on a disconnected node
					// in IE throws an error.
					( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?
						swap( elem, cssShow, function() {
							return getWidthOrHeight( elem, dimension, extra );
						} ) :
						getWidthOrHeight( elem, dimension, extra );
			}
		},

		set: function( elem, value, extra ) {
			var matches,
				styles = getStyles( elem ),

				// Only read styles.position if the test has a chance to fail
				// to avoid forcing a reflow.
				scrollboxSizeBuggy = !support.scrollboxSize() &&
					styles.position === "absolute",

				// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)
				boxSizingNeeded = scrollboxSizeBuggy || extra,
				isBorderBox = boxSizingNeeded &&
					jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
				subtract = extra ?
					boxModelAdjustment(
						elem,
						dimension,
						extra,
						isBorderBox,
						styles
					) :
					0;

			// Account for unreliable border-box dimensions by comparing offset* to computed and
			// faking a content-box to get border and padding (gh-3699)
			if ( isBorderBox && scrollboxSizeBuggy ) {
				subtract -= Math.ceil(
					elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
					parseFloat( styles[ dimension ] ) -
					boxModelAdjustment( elem, dimension, "border", false, styles ) -
					0.5
				);
			}

			// Convert to pixels if value adjustment is needed
			if ( subtract && ( matches = rcssNum.exec( value ) ) &&
				( matches[ 3 ] || "px" ) !== "px" ) {

				elem.style[ dimension ] = value;
				value = jQuery.css( elem, dimension );
			}

			return setPositiveNumber( elem, value, subtract );
		}
	};
} );

jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
	function( elem, computed ) {
		if ( computed ) {
			return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
				elem.getBoundingClientRect().left -
					swap( elem, { marginLeft: 0 }, function() {
						return elem.getBoundingClientRect().left;
					} )
				) + "px";
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each( {
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// Assumes a single number if not a string
				parts = typeof value === "string" ? value.split( " " ) : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( prefix !== "margin" ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
} );

jQuery.fn.extend( {
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( Array.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	}
} );


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || jQuery.easing._default;
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			// Use a property on the element directly when it is not a DOM element,
			// or when there is no matching style property that exists.
			if ( tween.elem.nodeType !== 1 ||
				tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
				return tween.elem[ tween.prop ];
			}

			// Passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails.
			// Simple values such as "10px" are parsed to Float;
			// complex values such as "rotate(1rad)" are returned as-is.
			result = jQuery.css( tween.elem, tween.prop, "" );

			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {

			// Use step hook for back compat.
			// Use cssHook if its there.
			// Use .style if available and use plain properties where available.
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.nodeType === 1 && (
					jQuery.cssHooks[ tween.prop ] ||
					tween.elem.style[ finalPropName( tween.prop ) ] != null ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE <=9 only
// Panic based approach to setting things on disconnected nodes
Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	},
	_default: "swing"
};

jQuery.fx = Tween.prototype.init;

// Back compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, inProgress,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rrun = /queueHooks$/;

function schedule() {
	if ( inProgress ) {
		if ( document.hidden === false && window.requestAnimationFrame ) {
			window.requestAnimationFrame( schedule );
		} else {
			window.setTimeout( schedule, jQuery.fx.interval );
		}

		jQuery.fx.tick();
	}
}

// Animations created synchronously will run synchronously
function createFxNow() {
	window.setTimeout( function() {
		fxNow = undefined;
	} );
	return ( fxNow = Date.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		i = 0,
		attrs = { height: type };

	// If we include width, step value is 1 to do all cssExpand values,
	// otherwise step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

			// We're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
		isBox = "width" in props || "height" in props,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHiddenWithinTree( elem ),
		dataShow = dataPriv.get( elem, "fxshow" );

	// Queue-skipping animations hijack the fx hooks
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always( function() {

			// Ensure the complete handler is called before this completes
			anim.always( function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			} );
		} );
	}

	// Detect show/hide animations
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.test( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// Pretend to be hidden if this is a "show" and
				// there is still data from a stopped show/hide
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;

				// Ignore all other no-op show/hide data
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
		}
	}

	// Bail out if this is a no-op like .hide().hide()
	propTween = !jQuery.isEmptyObject( props );
	if ( !propTween && jQuery.isEmptyObject( orig ) ) {
		return;
	}

	// Restrict "overflow" and "display" styles during box animations
	if ( isBox && elem.nodeType === 1 ) {

		// Support: IE <=9 - 11, Edge 12 - 15
		// Record all 3 overflow attributes because IE does not infer the shorthand
		// from identically-valued overflowX and overflowY and Edge just mirrors
		// the overflowX value there.
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Identify a display type, preferring old show/hide data over the CSS cascade
		restoreDisplay = dataShow && dataShow.display;
		if ( restoreDisplay == null ) {
			restoreDisplay = dataPriv.get( elem, "display" );
		}
		display = jQuery.css( elem, "display" );
		if ( display === "none" ) {
			if ( restoreDisplay ) {
				display = restoreDisplay;
			} else {

				// Get nonempty value(s) by temporarily forcing visibility
				showHide( [ elem ], true );
				restoreDisplay = elem.style.display || restoreDisplay;
				display = jQuery.css( elem, "display" );
				showHide( [ elem ] );
			}
		}

		// Animate inline elements as inline-block
		if ( display === "inline" || display === "inline-block" && restoreDisplay != null ) {
			if ( jQuery.css( elem, "float" ) === "none" ) {

				// Restore the original display value at the end of pure show/hide animations
				if ( !propTween ) {
					anim.done( function() {
						style.display = restoreDisplay;
					} );
					if ( restoreDisplay == null ) {
						display = style.display;
						restoreDisplay = display === "none" ? "" : display;
					}
				}
				style.display = "inline-block";
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		anim.always( function() {
			style.overflow = opts.overflow[ 0 ];
			style.overflowX = opts.overflow[ 1 ];
			style.overflowY = opts.overflow[ 2 ];
		} );
	}

	// Implement show/hide animations
	propTween = false;
	for ( prop in orig ) {

		// General show/hide setup for this element animation
		if ( !propTween ) {
			if ( dataShow ) {
				if ( "hidden" in dataShow ) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = dataPriv.access( elem, "fxshow", { display: restoreDisplay } );
			}

			// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
			if ( toggle ) {
				dataShow.hidden = !hidden;
			}

			// Show elements before animating them
			if ( hidden ) {
				showHide( [ elem ], true );
			}

			/* eslint-disable no-loop-func */

			anim.done( function() {

			/* eslint-enable no-loop-func */

				// The final step of a "hide" animation is actually hiding the element
				if ( !hidden ) {
					showHide( [ elem ] );
				}
				dataPriv.remove( elem, "fxshow" );
				for ( prop in orig ) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			} );
		}

		// Per-property setup
		propTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
		if ( !( prop in dataShow ) ) {
			dataShow[ prop ] = propTween.start;
			if ( hidden ) {
				propTween.end = propTween.start;
				propTween.start = 0;
			}
		}
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( Array.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// Not quite $.extend, this won't overwrite existing keys.
			// Reusing 'index' because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = Animation.prefilters.length,
		deferred = jQuery.Deferred().always( function() {

			// Don't match elem in the :animated selector
			delete tick.elem;
		} ),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

				// Support: Android 2.3 only
				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ] );

			// If there's more to do, yield
			if ( percent < 1 && length ) {
				return remaining;
			}

			// If this was an empty animation, synthesize a final progress notification
			if ( !length ) {
				deferred.notifyWith( elem, [ animation, 1, 0 ] );
			}

			// Resolve the animation and report its conclusion
			deferred.resolveWith( elem, [ animation ] );
			return false;
		},
		animation = deferred.promise( {
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, {
				specialEasing: {},
				easing: jQuery.easing._default
			}, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,

					// If we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// Resolve when we played the last frame; otherwise, reject
				if ( gotoEnd ) {
					deferred.notifyWith( elem, [ animation, 1, 0 ] );
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		} ),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length; index++ ) {
		result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			if ( isFunction( result.stop ) ) {
				jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
					result.stop.bind( result );
			}
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	// Attach callbacks from options
	animation
		.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		} )
	);

	return animation;
}

jQuery.Animation = jQuery.extend( Animation, {

	tweeners: {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value );
			adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
			return tween;
		} ]
	},

	tweener: function( props, callback ) {
		if ( isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.match( rnothtmlwhite );
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length; index++ ) {
			prop = props[ index ];
			Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
			Animation.tweeners[ prop ].unshift( callback );
		}
	},

	prefilters: [ defaultPrefilter ],

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			Animation.prefilters.unshift( callback );
		} else {
			Animation.prefilters.push( callback );
		}
	}
} );

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !isFunction( easing ) && easing
	};

	// Go to the end state if fx are off
	if ( jQuery.fx.off ) {
		opt.duration = 0;

	} else {
		if ( typeof opt.duration !== "number" ) {
			if ( opt.duration in jQuery.fx.speeds ) {
				opt.duration = jQuery.fx.speeds[ opt.duration ];

			} else {
				opt.duration = jQuery.fx.speeds._default;
			}
		}
	}

	// Normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend( {
	fadeTo: function( speed, to, easing, callback ) {

		// Show any hidden elements after setting opacity to 0
		return this.filter( isHiddenWithinTree ).css( "opacity", 0 ).show()

			// Animate to the value specified
			.end().animate( { opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {

				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || dataPriv.get( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue ) {
			this.queue( type || "fx", [] );
		}

		return this.each( function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = dataPriv.get( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this &&
					( type == null || timers[ index ].queue === type ) ) {

					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// Start the next in the queue if the last step wasn't forced.
			// Timers currently will call their complete callbacks, which
			// will dequeue but only if they were gotoEnd.
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		} );
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each( function() {
			var index,
				data = dataPriv.get( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// Enable finishing flag on private data
			data.finish = true;

			// Empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// Look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// Look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// Turn off finishing flag
			delete data.finish;
		} );
	}
} );

jQuery.each( [ "toggle", "show", "hide" ], function( _i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
} );

// Generate shortcuts for custom animations
jQuery.each( {
	slideDown: genFx( "show" ),
	slideUp: genFx( "hide" ),
	slideToggle: genFx( "toggle" ),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
} );

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		i = 0,
		timers = jQuery.timers;

	fxNow = Date.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];

		// Run the timer and safely remove it when done (allowing for external removal)
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	jQuery.fx.start();
};

jQuery.fx.interval = 13;
jQuery.fx.start = function() {
	if ( inProgress ) {
		return;
	}

	inProgress = true;
	schedule();
};

jQuery.fx.stop = function() {
	inProgress = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,

	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = window.setTimeout( next, time );
		hooks.stop = function() {
			window.clearTimeout( timeout );
		};
	} );
};


( function() {
	var input = document.createElement( "input" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	input.type = "checkbox";

	// Support: Android <=4.3 only
	// Default value for a checkbox should be "on"
	support.checkOn = input.value !== "";

	// Support: IE <=11 only
	// Must access selectedIndex to make default options select
	support.optSelected = opt.selected;

	// Support: IE <=11 only
	// An input loses its value after becoming a radio
	input = document.createElement( "input" );
	input.value = "t";
	input.type = "radio";
	support.radioValue = input.value === "t";
} )();


var boolHook,
	attrHandle = jQuery.expr.attrHandle;

jQuery.fn.extend( {
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each( function() {
			jQuery.removeAttr( this, name );
		} );
	}
} );

jQuery.extend( {
	attr: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set attributes on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === "undefined" ) {
			return jQuery.prop( elem, name, value );
		}

		// Attribute hooks are determined by the lowercase version
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			hooks = jQuery.attrHooks[ name.toLowerCase() ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
		}

		if ( value !== undefined ) {
			if ( value === null ) {
				jQuery.removeAttr( elem, name );
				return;
			}

			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			elem.setAttribute( name, value + "" );
			return value;
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		ret = jQuery.find.attr( elem, name );

		// Non-existent attributes return null, we normalize to undefined
		return ret == null ? undefined : ret;
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					nodeName( elem, "input" ) ) {
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	removeAttr: function( elem, value ) {
		var name,
			i = 0,

			// Attribute names can contain non-HTML whitespace characters
			// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
			attrNames = value && value.match( rnothtmlwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( ( name = attrNames[ i++ ] ) ) {
				elem.removeAttribute( name );
			}
		}
	}
} );

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {

			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			elem.setAttribute( name, name );
		}
		return name;
	}
};

jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( _i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = function( elem, name, isXML ) {
		var ret, handle,
			lowercaseName = name.toLowerCase();

		if ( !isXML ) {

			// Avoid an infinite loop by temporarily removing this function from the getter
			handle = attrHandle[ lowercaseName ];
			attrHandle[ lowercaseName ] = ret;
			ret = getter( elem, name, isXML ) != null ?
				lowercaseName :
				null;
			attrHandle[ lowercaseName ] = handle;
		}
		return ret;
	};
} );




var rfocusable = /^(?:input|select|textarea|button)$/i,
	rclickable = /^(?:a|area)$/i;

jQuery.fn.extend( {
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		return this.each( function() {
			delete this[ jQuery.propFix[ name ] || name ];
		} );
	}
} );

jQuery.extend( {
	prop: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set properties on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			return ( elem[ name ] = value );
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		return elem[ name ];
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {

				// Support: IE <=9 - 11 only
				// elem.tabIndex doesn't always return the
				// correct value when it hasn't been explicitly set
				// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				// Use proper attribute retrieval(#12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				if ( tabindex ) {
					return parseInt( tabindex, 10 );
				}

				if (
					rfocusable.test( elem.nodeName ) ||
					rclickable.test( elem.nodeName ) &&
					elem.href
				) {
					return 0;
				}

				return -1;
			}
		}
	},

	propFix: {
		"for": "htmlFor",
		"class": "className"
	}
} );

// Support: IE <=11 only
// Accessing the selectedIndex property
// forces the browser to respect setting selected
// on the option
// The getter ensures a default option is selected
// when in an optgroup
// eslint rule "no-unused-expressions" is disabled for this code
// since it considers such accessions noop
if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent && parent.parentNode ) {
				parent.parentNode.selectedIndex;
			}
			return null;
		},
		set: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent ) {
				parent.selectedIndex;

				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
		}
	};
}

jQuery.each( [
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
} );




	// Strip and collapse whitespace according to HTML spec
	// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace
	function stripAndCollapse( value ) {
		var tokens = value.match( rnothtmlwhite ) || [];
		return tokens.join( " " );
	}


function getClass( elem ) {
	return elem.getAttribute && elem.getAttribute( "class" ) || "";
}

function classesToArray( value ) {
	if ( Array.isArray( value ) ) {
		return value;
	}
	if ( typeof value === "string" ) {
		return value.match( rnothtmlwhite ) || [];
	}
	return [];
}

jQuery.fn.extend( {
	addClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		classes = classesToArray( value );

		if ( classes.length ) {
			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( !arguments.length ) {
			return this.attr( "class", "" );
		}

		classes = classesToArray( value );

		if ( classes.length ) {
			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );

				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {

						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value,
			isValidValue = type === "string" || Array.isArray( value );

		if ( typeof stateVal === "boolean" && isValidValue ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( isFunction( value ) ) {
			return this.each( function( i ) {
				jQuery( this ).toggleClass(
					value.call( this, i, getClass( this ), stateVal ),
					stateVal
				);
			} );
		}

		return this.each( function() {
			var className, i, self, classNames;

			if ( isValidValue ) {

				// Toggle individual class names
				i = 0;
				self = jQuery( this );
				classNames = classesToArray( value );

				while ( ( className = classNames[ i++ ] ) ) {

					// Check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( value === undefined || type === "boolean" ) {
				className = getClass( this );
				if ( className ) {

					// Store className if set
					dataPriv.set( this, "__className__", className );
				}

				// If the element has a class name or if we're passed `false`,
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				if ( this.setAttribute ) {
					this.setAttribute( "class",
						className || value === false ?
						"" :
						dataPriv.get( this, "__className__" ) || ""
					);
				}
			}
		} );
	},

	hasClass: function( selector ) {
		var className, elem,
			i = 0;

		className = " " + selector + " ";
		while ( ( elem = this[ i++ ] ) ) {
			if ( elem.nodeType === 1 &&
				( " " + stripAndCollapse( getClass( elem ) ) + " " ).indexOf( className ) > -1 ) {
					return true;
			}
		}

		return false;
	}
} );




var rreturn = /\r/g;

jQuery.fn.extend( {
	val: function( value ) {
		var hooks, ret, valueIsFunction,
			elem = this[ 0 ];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] ||
					jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks &&
					"get" in hooks &&
					( ret = hooks.get( elem, "value" ) ) !== undefined
				) {
					return ret;
				}

				ret = elem.value;

				// Handle most common string cases
				if ( typeof ret === "string" ) {
					return ret.replace( rreturn, "" );
				}

				// Handle cases where value is null/undef or number
				return ret == null ? "" : ret;
			}

			return;
		}

		valueIsFunction = isFunction( value );

		return this.each( function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( valueIsFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";

			} else if ( typeof val === "number" ) {
				val += "";

			} else if ( Array.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				} );
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		} );
	}
} );

jQuery.extend( {
	valHooks: {
		option: {
			get: function( elem ) {

				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :

					// Support: IE <=10 - 11 only
					// option.text throws exceptions (#14686, #14858)
					// Strip and collapse whitespace
					// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
					stripAndCollapse( jQuery.text( elem ) );
			}
		},
		select: {
			get: function( elem ) {
				var value, option, i,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one",
					values = one ? null : [],
					max = one ? index + 1 : options.length;

				if ( index < 0 ) {
					i = max;

				} else {
					i = one ? index : 0;
				}

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// Support: IE <=9 only
					// IE8-9 doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&

							// Don't return options that are disabled or in a disabled optgroup
							!option.disabled &&
							( !option.parentNode.disabled ||
								!nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];

					/* eslint-disable no-cond-assign */

					if ( option.selected =
						jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
					) {
						optionSet = true;
					}

					/* eslint-enable no-cond-assign */
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	}
} );

// Radios and checkboxes getter/setter
jQuery.each( [ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( Array.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			return elem.getAttribute( "value" ) === null ? "on" : elem.value;
		};
	}
} );




// Return jQuery for attributes-only inclusion


support.focusin = "onfocusin" in window;


var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	stopPropagationCallback = function( e ) {
		e.stopPropagation();
	};

jQuery.extend( jQuery.event, {

	trigger: function( event, data, elem, onlyHandlers ) {

		var i, cur, tmp, bubbleType, ontype, handle, special, lastElement,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

		cur = lastElement = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf( "." ) > -1 ) {

			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split( "." );
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf( ":" ) < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join( "." );
		event.rnamespace = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === ( elem.ownerDocument || document ) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {
			lastElement = cur;
			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = (
					dataPriv.get( cur, "events" ) || Object.create( null )
				)[ event.type ] &&
				dataPriv.get( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( ( !special._default ||
				special._default.apply( eventPath.pop(), data ) === false ) &&
				acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name as the event.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && isFunction( elem[ type ] ) && !isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;

					if ( event.isPropagationStopped() ) {
						lastElement.addEventListener( type, stopPropagationCallback );
					}

					elem[ type ]();

					if ( event.isPropagationStopped() ) {
						lastElement.removeEventListener( type, stopPropagationCallback );
					}

					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	// Piggyback on a donor event to simulate a different one
	// Used only for `focus(in | out)` events
	simulate: function( type, elem, event ) {
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true
			}
		);

		jQuery.event.trigger( e, null, elem );
	}

} );

jQuery.fn.extend( {

	trigger: function( type, data ) {
		return this.each( function() {
			jQuery.event.trigger( type, data, this );
		} );
	},
	triggerHandler: function( type, data ) {
		var elem = this[ 0 ];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
} );


// Support: Firefox <=44
// Firefox doesn't have focus(in | out) events
// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
//
// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
// focus(in | out) events fire after focus & blur events,
// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
if ( !support.focusin ) {
	jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
			jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
		};

		jQuery.event.special[ fix ] = {
			setup: function() {

				// Handle: regular nodes (via `this.ownerDocument`), window
				// (via `this.document`) & document (via `this`).
				var doc = this.ownerDocument || this.document || this,
					attaches = dataPriv.access( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this.document || this,
					attaches = dataPriv.access( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					dataPriv.remove( doc, fix );

				} else {
					dataPriv.access( doc, fix, attaches );
				}
			}
		};
	} );
}
var location = window.location;

var nonce = { guid: Date.now() };

var rquery = ( /\?/ );



// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml;
	if ( !data || typeof data !== "string" ) {
		return null;
	}

	// Support: IE 9 - 11 only
	// IE throws on parseFromString with invalid input.
	try {
		xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
	} catch ( e ) {
		xml = undefined;
	}

	if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
		jQuery.error( "Invalid XML: " + data );
	}
	return xml;
};


var
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( Array.isArray( obj ) ) {

		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {

				// Treat each array item as a scalar.
				add( prefix, v );

			} else {

				// Item is non-scalar (array or object), encode its numeric index.
				buildParams(
					prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
					v,
					traditional,
					add
				);
			}
		} );

	} else if ( !traditional && toType( obj ) === "object" ) {

		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {

		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, valueOrFunction ) {

			// If value is a function, invoke it and use its return value
			var value = isFunction( valueOrFunction ) ?
				valueOrFunction() :
				valueOrFunction;

			s[ s.length ] = encodeURIComponent( key ) + "=" +
				encodeURIComponent( value == null ? "" : value );
		};

	if ( a == null ) {
		return "";
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		} );

	} else {

		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" );
};

jQuery.fn.extend( {
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map( function() {

			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		} )
		.filter( function() {
			var type = this.type;

			// Use .is( ":disabled" ) so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		} )
		.map( function( _i, elem ) {
			var val = jQuery( this ).val();

			if ( val == null ) {
				return null;
			}

			if ( Array.isArray( val ) ) {
				return jQuery.map( val, function( val ) {
					return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
				} );
			}

			return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		} ).get();
	}
} );


var
	r20 = /%20/g,
	rhash = /#.*$/,
	rantiCache = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat( "*" ),

	// Anchor tag for parsing the document origin
	originAnchor = document.createElement( "a" );
	originAnchor.href = location.href;

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];

		if ( isFunction( func ) ) {

			// For each dataType in the dataTypeExpression
			while ( ( dataType = dataTypes[ i++ ] ) ) {

				// Prepend if requested
				if ( dataType[ 0 ] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

				// Otherwise append
				} else {
					( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" &&
				!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		} );
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {

		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}

		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},

		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

			// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {

								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s.throws ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return {
								state: "parsererror",
								error: conv ? e : "No conversion from " + prev + " to " + current
							};
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend( {

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: location.href,
		type: "GET",
		isLocal: rlocalProtocol.test( location.protocol ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",

		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /\bxml\b/,
			html: /\bhtml/,
			json: /\bjson\b/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": JSON.parse,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var transport,

			// URL without anti-cache param
			cacheURL,

			// Response headers
			responseHeadersString,
			responseHeaders,

			// timeout handle
			timeoutTimer,

			// Url cleanup var
			urlAnchor,

			// Request state (becomes false upon send and true upon completion)
			completed,

			// To know if global events are to be dispatched
			fireGlobals,

			// Loop variable
			i,

			// uncached part of the url
			uncached,

			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),

			// Callbacks context
			callbackContext = s.context || s,

			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context &&
				( callbackContext.nodeType || callbackContext.jquery ) ?
					jQuery( callbackContext ) :
					jQuery.event,

			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks( "once memory" ),

			// Status-dependent callbacks
			statusCode = s.statusCode || {},

			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},

			// Default abort message
			strAbort = "canceled",

			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( completed ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
								responseHeaders[ match[ 1 ].toLowerCase() + " " ] =
									( responseHeaders[ match[ 1 ].toLowerCase() + " " ] || [] )
										.concat( match[ 2 ] );
							}
						}
						match = responseHeaders[ key.toLowerCase() + " " ];
					}
					return match == null ? null : match.join( ", " );
				},

				// Raw string
				getAllResponseHeaders: function() {
					return completed ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					if ( completed == null ) {
						name = requestHeadersNames[ name.toLowerCase() ] =
							requestHeadersNames[ name.toLowerCase() ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( completed == null ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( completed ) {

							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						} else {

							// Lazy-add the new callbacks in a way that preserves old ones
							for ( code in map ) {
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR );

		// Add protocol if not provided (prefilters might expect it)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || location.href ) + "" )
			.replace( rprotocol, location.protocol + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnothtmlwhite ) || [ "" ];

		// A cross-domain request is in order when the origin doesn't match the current origin.
		if ( s.crossDomain == null ) {
			urlAnchor = document.createElement( "a" );

			// Support: IE <=8 - 11, Edge 12 - 15
			// IE throws exception on accessing the href property if url is malformed,
			// e.g. http://example.com:80x/
			try {
				urlAnchor.href = s.url;

				// Support: IE <=8 - 11 only
				// Anchor's host property isn't correctly set when s.url is relative
				urlAnchor.href = urlAnchor.href;
				s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
					urlAnchor.protocol + "//" + urlAnchor.host;
			} catch ( e ) {

				// If there is an error parsing the URL, assume it is crossDomain,
				// it can be rejected by the transport if it is invalid
				s.crossDomain = true;
			}
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( completed ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
		fireGlobals = jQuery.event && s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger( "ajaxStart" );
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		// Remove hash to simplify url manipulation
		cacheURL = s.url.replace( rhash, "" );

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// Remember the hash so we can put it back
			uncached = s.url.slice( cacheURL.length );

			// If data is available and should be processed, append data to url
			if ( s.data && ( s.processData || typeof s.data === "string" ) ) {
				cacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;

				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add or update anti-cache param if needed
			if ( s.cache === false ) {
				cacheURL = cacheURL.replace( rantiCache, "$1" );
				uncached = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce.guid++ ) +
					uncached;
			}

			// Put hash and anti-cache on the URL that will be requested (gh-1732)
			s.url = cacheURL + uncached;

		// Change '%20' to '+' if this is encoded form body content (gh-2658)
		} else if ( s.data && s.processData &&
			( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {
			s.data = s.data.replace( r20, "+" );
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
				s.accepts[ s.dataTypes[ 0 ] ] +
					( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend &&
			( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {

			// Abort if not done already and return
			return jqXHR.abort();
		}

		// Aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		completeDeferred.add( s.complete );
		jqXHR.done( s.success );
		jqXHR.fail( s.error );

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}

			// If request was aborted inside ajaxSend, stop there
			if ( completed ) {
				return jqXHR;
			}

			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = window.setTimeout( function() {
					jqXHR.abort( "timeout" );
				}, s.timeout );
			}

			try {
				completed = false;
				transport.send( requestHeaders, done );
			} catch ( e ) {

				// Rethrow post-completion exceptions
				if ( completed ) {
					throw e;
				}

				// Propagate others as results
				done( -1, e );
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Ignore repeat invocations
			if ( completed ) {
				return;
			}

			completed = true;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				window.clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Use a noop converter for missing script
			if ( !isSuccess && jQuery.inArray( "script", s.dataTypes ) > -1 ) {
				s.converters[ "text script" ] = function() {};
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader( "Last-Modified" );
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader( "etag" );
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {

				// Extract error from statusText and normalize for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger( "ajaxStop" );
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
} );

jQuery.each( [ "get", "post" ], function( _i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {

		// Shift arguments if data argument was omitted
		if ( isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		// The url can be an options object (which then must have .url)
		return jQuery.ajax( jQuery.extend( {
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		}, jQuery.isPlainObject( url ) && url ) );
	};
} );

jQuery.ajaxPrefilter( function( s ) {
	var i;
	for ( i in s.headers ) {
		if ( i.toLowerCase() === "content-type" ) {
			s.contentType = s.headers[ i ] || "";
		}
	}
} );


jQuery._evalUrl = function( url, options, doc ) {
	return jQuery.ajax( {
		url: url,

		// Make this explicit, since user can override this through ajaxSetup (#11264)
		type: "GET",
		dataType: "script",
		cache: true,
		async: false,
		global: false,

		// Only evaluate the response if it is successful (gh-4126)
		// dataFilter is not invoked for failure responses, so using it instead
		// of the default converter is kludgy but it works.
		converters: {
			"text script": function() {}
		},
		dataFilter: function( response ) {
			jQuery.globalEval( response, options, doc );
		}
	} );
};


jQuery.fn.extend( {
	wrapAll: function( html ) {
		var wrap;

		if ( this[ 0 ] ) {
			if ( isFunction( html ) ) {
				html = html.call( this[ 0 ] );
			}

			// The elements to wrap the target around
			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map( function() {
				var elem = this;

				while ( elem.firstElementChild ) {
					elem = elem.firstElementChild;
				}

				return elem;
			} ).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( isFunction( html ) ) {
			return this.each( function( i ) {
				jQuery( this ).wrapInner( html.call( this, i ) );
			} );
		}

		return this.each( function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		} );
	},

	wrap: function( html ) {
		var htmlIsFunction = isFunction( html );

		return this.each( function( i ) {
			jQuery( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );
		} );
	},

	unwrap: function( selector ) {
		this.parent( selector ).not( "body" ).each( function() {
			jQuery( this ).replaceWith( this.childNodes );
		} );
		return this;
	}
} );


jQuery.expr.pseudos.hidden = function( elem ) {
	return !jQuery.expr.pseudos.visible( elem );
};
jQuery.expr.pseudos.visible = function( elem ) {
	return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );
};




jQuery.ajaxSettings.xhr = function() {
	try {
		return new window.XMLHttpRequest();
	} catch ( e ) {}
};

var xhrSuccessStatus = {

		// File protocol always yields status code 0, assume 200
		0: 200,

		// Support: IE <=9 only
		// #1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	xhrSupported = jQuery.ajaxSettings.xhr();

support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport( function( options ) {
	var callback, errorCallback;

	// Cross domain only allowed if supported through XMLHttpRequest
	if ( support.cors || xhrSupported && !options.crossDomain ) {
		return {
			send: function( headers, complete ) {
				var i,
					xhr = options.xhr();

				xhr.open(
					options.type,
					options.url,
					options.async,
					options.username,
					options.password
				);

				// Apply custom fields if provided
				if ( options.xhrFields ) {
					for ( i in options.xhrFields ) {
						xhr[ i ] = options.xhrFields[ i ];
					}
				}

				// Override mime type if needed
				if ( options.mimeType && xhr.overrideMimeType ) {
					xhr.overrideMimeType( options.mimeType );
				}

				// X-Requested-With header
				// For cross-domain requests, seeing as conditions for a preflight are
				// akin to a jigsaw puzzle, we simply never set it to be sure.
				// (it can always be set on a per-request basis or even using ajaxSetup)
				// For same-domain requests, won't change header if already provided.
				if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
					headers[ "X-Requested-With" ] = "XMLHttpRequest";
				}

				// Set headers
				for ( i in headers ) {
					xhr.setRequestHeader( i, headers[ i ] );
				}

				// Callback
				callback = function( type ) {
					return function() {
						if ( callback ) {
							callback = errorCallback = xhr.onload =
								xhr.onerror = xhr.onabort = xhr.ontimeout =
									xhr.onreadystatechange = null;

							if ( type === "abort" ) {
								xhr.abort();
							} else if ( type === "error" ) {

								// Support: IE <=9 only
								// On a manual native abort, IE9 throws
								// errors on any property access that is not readyState
								if ( typeof xhr.status !== "number" ) {
									complete( 0, "error" );
								} else {
									complete(

										// File: protocol always yields status 0; see #8605, #14207
										xhr.status,
										xhr.statusText
									);
								}
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,

									// Support: IE <=9 only
									// IE9 has no XHR2 but throws on binary (trac-11426)
									// For XHR2 non-text, let the caller handle it (gh-2498)
									( xhr.responseType || "text" ) !== "text"  ||
									typeof xhr.responseText !== "string" ?
										{ binary: xhr.response } :
										{ text: xhr.responseText },
									xhr.getAllResponseHeaders()
								);
							}
						}
					};
				};

				// Listen to events
				xhr.onload = callback();
				errorCallback = xhr.onerror = xhr.ontimeout = callback( "error" );

				// Support: IE 9 only
				// Use onreadystatechange to replace onabort
				// to handle uncaught aborts
				if ( xhr.onabort !== undefined ) {
					xhr.onabort = errorCallback;
				} else {
					xhr.onreadystatechange = function() {

						// Check readyState before timeout as it changes
						if ( xhr.readyState === 4 ) {

							// Allow onerror to be called first,
							// but that will not handle a native abort
							// Also, save errorCallback to a variable
							// as xhr.onerror cannot be accessed
							window.setTimeout( function() {
								if ( callback ) {
									errorCallback();
								}
							} );
						}
					};
				}

				// Create the abort callback
				callback = callback( "abort" );

				try {

					// Do send the request (this may raise an exception)
					xhr.send( options.hasContent && options.data || null );
				} catch ( e ) {

					// #14683: Only rethrow if this hasn't been notified as an error yet
					if ( callback ) {
						throw e;
					}
				}
			},

			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
jQuery.ajaxPrefilter( function( s ) {
	if ( s.crossDomain ) {
		s.contents.script = false;
	}
} );

// Install script dataType
jQuery.ajaxSetup( {
	accepts: {
		script: "text/javascript, application/javascript, " +
			"application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /\b(?:java|ecma)script\b/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
} );

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
	}
} );

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {

	// This transport only deals with cross domain or forced-by-attrs requests
	if ( s.crossDomain || s.scriptAttrs ) {
		var script, callback;
		return {
			send: function( _, complete ) {
				script = jQuery( "<script>" )
					.attr( s.scriptAttrs || {} )
					.prop( { charset: s.scriptCharset, src: s.url } )
					.on( "load error", callback = function( evt ) {
						script.remove();
						callback = null;
						if ( evt ) {
							complete( evt.type === "error" ? 404 : 200, evt.type );
						}
					} );

				// Use native DOM manipulation to avoid our domManip AJAX trickery
				document.head.appendChild( script[ 0 ] );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup( {
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce.guid++ ) );
		this[ callback ] = true;
		return callback;
	}
} );

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" &&
				( s.contentType || "" )
					.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
				rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters[ "script json" ] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// Force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always( function() {

			// If previous value didn't exist - remove it
			if ( overwritten === undefined ) {
				jQuery( window ).removeProp( callbackName );

			// Otherwise restore preexisting value
			} else {
				window[ callbackName ] = overwritten;
			}

			// Save back as free
			if ( s[ callbackName ] ) {

				// Make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// Save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		} );

		// Delegate to script
		return "script";
	}
} );




// Support: Safari 8 only
// In Safari 8 documents created via document.implementation.createHTMLDocument
// collapse sibling forms: the second one becomes a child of the first one.
// Because of that, this security measure has to be disabled in Safari 8.
// https://bugs.webkit.org/show_bug.cgi?id=137337
support.createHTMLDocument = ( function() {
	var body = document.implementation.createHTMLDocument( "" ).body;
	body.innerHTML = "<form></form><form></form>";
	return body.childNodes.length === 2;
} )();


// Argument "data" should be string of html
// context (optional): If specified, the fragment will be created in this context,
// defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( typeof data !== "string" ) {
		return [];
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}

	var base, parsed, scripts;

	if ( !context ) {

		// Stop scripts or inline event handlers from being executed immediately
		// by using document.implementation
		if ( support.createHTMLDocument ) {
			context = document.implementation.createHTMLDocument( "" );

			// Set the base href for the created document
			// so any parsed elements with URLs
			// are based on the document's URL (gh-2965)
			base = context.createElement( "base" );
			base.href = document.location.href;
			context.head.appendChild( base );
		} else {
			context = document;
		}
	}

	parsed = rsingleTag.exec( data );
	scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[ 1 ] ) ];
	}

	parsed = buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	var selector, type, response,
		self = this,
		off = url.indexOf( " " );

	if ( off > -1 ) {
		selector = stripAndCollapse( url.slice( off ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax( {
			url: url,

			// If "type" variable is undefined, then "GET" method will be used.
			// Make value of this field explicit since
			// user can override it through ajaxSetup method
			type: type || "GET",
			dataType: "html",
			data: params
		} ).done( function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		// If the request succeeds, this function gets "data", "status", "jqXHR"
		// but they are ignored because response was set above.
		// If it fails, this function gets "jqXHR", "status", "error"
		} ).always( callback && function( jqXHR, status ) {
			self.each( function() {
				callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
			} );
		} );
	}

	return this;
};




jQuery.expr.pseudos.animated = function( elem ) {
	return jQuery.grep( jQuery.timers, function( fn ) {
		return elem === fn.elem;
	} ).length;
};




jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// Set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

		// Need to be able to calculate position if either
		// top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;

		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( isFunction( options ) ) {

			// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
			options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );

		} else {
			if ( typeof props.top === "number" ) {
				props.top += "px";
			}
			if ( typeof props.left === "number" ) {
				props.left += "px";
			}
			curElem.css( props );
		}
	}
};

jQuery.fn.extend( {

	// offset() relates an element's border box to the document origin
	offset: function( options ) {

		// Preserve chaining for setter
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each( function( i ) {
					jQuery.offset.setOffset( this, options, i );
				} );
		}

		var rect, win,
			elem = this[ 0 ];

		if ( !elem ) {
			return;
		}

		// Return zeros for disconnected and hidden (display: none) elements (gh-2310)
		// Support: IE <=11 only
		// Running getBoundingClientRect on a
		// disconnected node in IE throws an error
		if ( !elem.getClientRects().length ) {
			return { top: 0, left: 0 };
		}

		// Get document-relative position by adding viewport scroll to viewport-relative gBCR
		rect = elem.getBoundingClientRect();
		win = elem.ownerDocument.defaultView;
		return {
			top: rect.top + win.pageYOffset,
			left: rect.left + win.pageXOffset
		};
	},

	// position() relates an element's margin box to its offset parent's padding box
	// This corresponds to the behavior of CSS absolute positioning
	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset, doc,
			elem = this[ 0 ],
			parentOffset = { top: 0, left: 0 };

		// position:fixed elements are offset from the viewport, which itself always has zero offset
		if ( jQuery.css( elem, "position" ) === "fixed" ) {

			// Assume position:fixed implies availability of getBoundingClientRect
			offset = elem.getBoundingClientRect();

		} else {
			offset = this.offset();

			// Account for the *real* offset parent, which can be the document or its root element
			// when a statically positioned element is identified
			doc = elem.ownerDocument;
			offsetParent = elem.offsetParent || doc.documentElement;
			while ( offsetParent &&
				( offsetParent === doc.body || offsetParent === doc.documentElement ) &&
				jQuery.css( offsetParent, "position" ) === "static" ) {

				offsetParent = offsetParent.parentNode;
			}
			if ( offsetParent && offsetParent !== elem && offsetParent.nodeType === 1 ) {

				// Incorporate borders into its offset, since they are outside its content origin
				parentOffset = jQuery( offsetParent ).offset();
				parentOffset.top += jQuery.css( offsetParent, "borderTopWidth", true );
				parentOffset.left += jQuery.css( offsetParent, "borderLeftWidth", true );
			}
		}

		// Subtract parent offsets and element margins
		return {
			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	// This method will return documentElement in the following cases:
	// 1) For the element inside the iframe without offsetParent, this method will return
	//    documentElement of the parent window
	// 2) For the hidden or detached element
	// 3) For body or html element, i.e. in case of the html node - it will return itself
	//
	// but those exceptions were never presented as a real life use-cases
	// and might be considered as more preferable results.
	//
	// This logic, however, is not guaranteed and can change at any point in the future
	offsetParent: function() {
		return this.map( function() {
			var offsetParent = this.offsetParent;

			while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
				offsetParent = offsetParent.offsetParent;
			}

			return offsetParent || documentElement;
		} );
	}
} );

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = "pageYOffset" === prop;

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {

			// Coalesce documents and windows
			var win;
			if ( isWindow( elem ) ) {
				win = elem;
			} else if ( elem.nodeType === 9 ) {
				win = elem.defaultView;
			}

			if ( val === undefined ) {
				return win ? win[ prop ] : elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : win.pageXOffset,
					top ? val : win.pageYOffset
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length );
	};
} );

// Support: Safari <=7 - 9.1, Chrome <=37 - 49
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
// getComputedStyle returns percent when specified for top/left/bottom/right;
// rather than make the css module depend on the offset module, just check for it here
jQuery.each( [ "top", "left" ], function( _i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );

				// If curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
} );


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
		function( defaultExtra, funcName ) {

		// Margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( isWindow( elem ) ) {

					// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
					return funcName.indexOf( "outer" ) === 0 ?
						elem[ "inner" + name ] :
						elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?

					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable );
		};
	} );
} );


jQuery.each( [
	"ajaxStart",
	"ajaxStop",
	"ajaxComplete",
	"ajaxError",
	"ajaxSuccess",
	"ajaxSend"
], function( _i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
} );




jQuery.fn.extend( {

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {

		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ?
			this.off( selector, "**" ) :
			this.off( types, selector || "**", fn );
	},

	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	}
} );

jQuery.each( ( "blur focus focusin focusout resize scroll click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup contextmenu" ).split( " " ),
	function( _i, name ) {

		// Handle event binding
		jQuery.fn[ name ] = function( data, fn ) {
			return arguments.length > 0 ?
				this.on( name, null, data, fn ) :
				this.trigger( name );
		};
	} );




// Support: Android <=4.0 only
// Make sure we trim BOM and NBSP
var rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;

// Bind a function to a context, optionally partially applying any
// arguments.
// jQuery.proxy is deprecated to promote standards (specifically Function#bind)
// However, it is not slated for removal any time soon
jQuery.proxy = function( fn, context ) {
	var tmp, args, proxy;

	if ( typeof context === "string" ) {
		tmp = fn[ context ];
		context = fn;
		fn = tmp;
	}

	// Quick check to determine if target is callable, in the spec
	// this throws a TypeError, but we will just return undefined.
	if ( !isFunction( fn ) ) {
		return undefined;
	}

	// Simulated bind
	args = slice.call( arguments, 2 );
	proxy = function() {
		return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
	};

	// Set the guid of unique handler to the same of original handler, so it can be removed
	proxy.guid = fn.guid = fn.guid || jQuery.guid++;

	return proxy;
};

jQuery.holdReady = function( hold ) {
	if ( hold ) {
		jQuery.readyWait++;
	} else {
		jQuery.ready( true );
	}
};
jQuery.isArray = Array.isArray;
jQuery.parseJSON = JSON.parse;
jQuery.nodeName = nodeName;
jQuery.isFunction = isFunction;
jQuery.isWindow = isWindow;
jQuery.camelCase = camelCase;
jQuery.type = toType;

jQuery.now = Date.now;

jQuery.isNumeric = function( obj ) {

	// As of jQuery 3.0, isNumeric is limited to
	// strings and numbers (primitives or objects)
	// that can be coerced to finite numbers (gh-2662)
	var type = jQuery.type( obj );
	return ( type === "number" || type === "string" ) &&

		// parseFloat NaNs numeric-cast false positives ("")
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
		// subtraction forces infinities to NaN
		!isNaN( obj - parseFloat( obj ) );
};

jQuery.trim = function( text ) {
	return text == null ?
		"" :
		( text + "" ).replace( rtrim, "" );
};



// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( true ) {
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {
		return jQuery;
	}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
}




var

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in AMD
// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( typeof noGlobal === "undefined" ) {
	window.jQuery = window.$ = jQuery;
}




return jQuery;
} );


/***/ }),

/***/ "./src/block.ts":
/*!**********************!*\
  !*** ./src/block.ts ***!
  \**********************/
/*! namespace exports */
/*! export Block [provided] [no usage info] [missing usage info prevents renaming] */
/*! export BlockBody [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Block": () => /* binding */ Block,
/* harmony export */   "BlockBody": () => /* binding */ BlockBody
/* harmony export */ });
/* harmony import */ var _createjs_easeljs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @createjs/easeljs */ "./node_modules/@createjs/easeljs/src/main.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants */ "./src/constants.ts");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util */ "./src/util.ts");
/* harmony import */ var _editorElement__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./editorElement */ "./src/editorElement.ts");
/* harmony import */ var _inputs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./inputs */ "./src/inputs.ts");
/* harmony import */ var _outputs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./outputs */ "./src/outputs.ts");






class Block {
    constructor(stage, parameters, blocks, x, y, color, inputs, outputs, name, type, sidebar, displayStage, props) {
        this.blocks = []; // the list of all other blocks, since this is pass by reference we chillin on the memory usage B)
        this.checkConnection = (event, output) => {
            let x = event.stageX;
            let y = event.stageY;
            //console.log(this.blocks);
            this.blocks.forEach((block, index) => {
                if (block != this) {
                    block.inputs.inputs.forEach((inp, index) => {
                        let local = inp.container.globalToLocal(x, y);
                        //console.log(local + " " + inp.props.name);
                        if (inp.container.hitTest(local.x, local.y)) {
                            console.log(inp.props.name);
                            // make the connection
                            //output.addConnection(inp);
                            if (!block.inputs.addChild([output, inp])) {
                                inp.remove();
                                block.inputs.addChild([output, inp]);
                            }
                            this.outputs.addParent([output, inp]);
                            inp.fill.style = this.color;
                            inp.inputName.color = "#fff";
                        }
                    });
                }
            });
        };
        this.update = () => {
            // find the bounds of BlockBody
            let maxWidth = 0;
            if (!this.sidebar) {
                maxWidth = _util__WEBPACK_IMPORTED_MODULE_2__.updateMax(maxWidth, this.inputs.update());
                maxWidth = _util__WEBPACK_IMPORTED_MODULE_2__.updateMax(maxWidth, this.outputs.update());
            }
            maxWidth = _util__WEBPACK_IMPORTED_MODULE_2__.updateMax(maxWidth, this.blockBody.container.getBounds().width);
            this.blockBody.update(maxWidth + 2 * _constants__WEBPACK_IMPORTED_MODULE_1__.TEXT_PADDING_LR);
            // after the maxWidth has been computed, position everything
            // position inputs
            this.inputs.container.x = (maxWidth - this.inputs.container.getBounds().width) / 2;
            this.inputs.container.y = _constants__WEBPACK_IMPORTED_MODULE_1__.TEXT_PADDING_UD + _constants__WEBPACK_IMPORTED_MODULE_1__.IO_PADDING_UD + _constants__WEBPACK_IMPORTED_MODULE_1__.IO_TEXT_PADDING_UD * 5;
            // position outputs
            this.outputs.container.x = (maxWidth - this.outputs.container.getBounds().width) / 2;
            this.outputs.container.y = -_constants__WEBPACK_IMPORTED_MODULE_1__.TEXT_PADDING_UD - _constants__WEBPACK_IMPORTED_MODULE_1__.IO_PADDING_UD - _constants__WEBPACK_IMPORTED_MODULE_1__.IO_TEXT_PADDING_UD * 3;
        };
        console.log(blocks);
        this.sidebar = sidebar;
        this.stage = stage;
        this.container = new _createjs_easeljs__WEBPACK_IMPORTED_MODULE_0__.Container();
        this.container.x = x;
        this.container.y = y;
        this.parameters = parameters;
        this.blocks = blocks;
        this.color = color;
        this.children = [];
        this.blockBody = new BlockBody({
            color: color,
            type: type,
            name: name,
            isSidebar: sidebar == true,
            block: this
        });
        if (!this.sidebar) {
            this.delete = new _createjs_easeljs__WEBPACK_IMPORTED_MODULE_0__.Shape();
            this.delete.graphics.beginFill("#fff");
            this.delete.graphics.beginStroke("#f550");
            this.delete.graphics.setStrokeStyle(4);
            let rect = new _createjs_easeljs__WEBPACK_IMPORTED_MODULE_0__.Graphics.Rect(0, 10, 30, 30);
            this.delete.graphics.append(rect);
            this.delete.graphics.beginStroke("#f55");
            this.delete.graphics.moveTo(10, 10);
            this.delete.graphics.lineTo(40, 40);
            this.delete.graphics.moveTo(40, 10);
            this.delete.graphics.lineTo(10, 40);
            this.delete.setBounds(0, 0, 30, 30);
            this.delete.x = 0;
            this.delete.y = -100;
            this.container.addChild(this.delete);
            this.delete.addEventListener("mousedown", (event) => {
                console.log("removing");
                this.inputs.inputs.forEach((inp, idx) => {
                    inp.remove();
                });
                this.blocks.splice(this.blocks.indexOf(this), 1);
                displayStage.removeChild(this.container);
            });
        }
        this.inputs = new _inputs__WEBPACK_IMPORTED_MODULE_4__.Inputs({
            inputs: inputs,
            block: this,
            params: this.parameters
            //blocks: this.blocks
        });
        this.outputs = new _outputs__WEBPACK_IMPORTED_MODULE_5__.Outputs({
            inputs: outputs,
            block: this,
            checkConnection: this.checkConnection
        });
        this.container.addChild(this.blockBody.container);
        if (!this.sidebar) {
            this.container.addChild(this.inputs.container);
            this.container.addChild(this.outputs.container);
        }
        stage.addChild(this.container);
        // attach listeners
        this.blockBody.container.addEventListener('mousedown', (event) => {
            let localPos = this.stage.globalToLocal(event.stageX, event.stageY);
            this.clickOffset = [this.container.x - localPos.x,
                this.container.y - localPos.y];
            if (this.sidebar) {
                let paramsClone;
                if (this.parameters) {
                    paramsClone = JSON.parse(JSON.stringify(this.parameters));
                }
                else {
                    paramsClone = {};
                }
                let newBlock = new Block(this.stage, paramsClone, this.blocks, localPos.x + this.clickOffset[0], localPos.y + this.clickOffset[1], color, inputs, outputs, type + "_" + props.count, type, false, displayStage);
                props.count++;
                this.blocks.push(newBlock);
                this.focusedNewBlock = newBlock;
            }
        });
        this.blockBody.container.addEventListener("pressup", (event) => {
            if (this.focusedNewBlock && this.sidebar) {
                this.stage.removeChild(this.focusedNewBlock.container);
                let pt = displayStage.globalToLocal(this.focusedNewBlock.container.x, this.focusedNewBlock.container.y);
                this.focusedNewBlock.container.x = pt.x;
                this.focusedNewBlock.container.y = pt.y;
                displayStage.addChild(this.focusedNewBlock.container);
                this.focusedNewBlock.stage = displayStage;
            }
        });
        this.blockBody.container.addEventListener('pressmove', (event) => {
            let localPos = this.stage.globalToLocal(event.stageX, event.stageY);
            if (!this.sidebar) {
                this.container.x = localPos.x + this.clickOffset[0];
                this.container.y = localPos.y + this.clickOffset[1];
                this.outputs.updateConnections();
                this.inputs.updateConnections();
            }
            else {
                this.focusedNewBlock.container.x = localPos.x + this.clickOffset[0];
                this.focusedNewBlock.container.y = localPos.y + this.clickOffset[1];
            }
        });
        this.update();
    }
}
class BlockBody extends _editorElement__WEBPACK_IMPORTED_MODULE_3__.EditorElement {
    constructor(props) {
        super(props);
        this.updateName = (name) => {
            this.name = name;
            this.blockName.text = name;
            this.props.block.update();
        };
        this.updateSelection = (start, end) => {
            let temp;
            let offsetX;
            if (start == 0) {
                temp = new _createjs_easeljs__WEBPACK_IMPORTED_MODULE_0__.Text("a", "40px Inter");
                offsetX = 0;
            }
            else {
                temp = new _createjs_easeljs__WEBPACK_IMPORTED_MODULE_0__.Text(this.name.slice(0, start), "40px Inter");
                offsetX = temp.getBounds().width;
            }
            let width;
            let height;
            if (start == end) {
                width = 1;
                height = temp.getBounds().height - 5;
            }
            else {
                temp.text = this.name.slice(start, end);
                width = temp.getBounds().width;
                height = temp.getBounds().height - 5;
            }
            this.selectionRect.x = offsetX + this.blockName.x;
            this.selectionRect.y = 0;
            this.selectionRect.w = width;
            this.selectionRect.h = height;
        };
        this.completeText = () => {
            console.log("COMPLETE TEXT:" + this.props.name + this.props.color);
            this.container.removeChild(this.blockType);
            this.blockName = new _createjs_easeljs__WEBPACK_IMPORTED_MODULE_0__.Text(this.name, "40px Inter", this.props.color);
            this.blockType = new _createjs_easeljs__WEBPACK_IMPORTED_MODULE_0__.Text(this.props.type + " :: ", "40px Inter", "#000");
            this.blockName.x = this.blockType.getBounds().width;
            this.container.addChild(this.blockType);
            this.container.addChild(this.blockName);
            this.rect.radiusTL = 100;
            this.rect.radiusTR = 100;
            this.rect.radiusBR = 100;
            this.rect.radiusBL = 100;
        };
        this.update = (width) => {
            if (width) {
                this.otherWidths = width;
            }
            else {
                width = this.otherWidths;
                width = _util__WEBPACK_IMPORTED_MODULE_2__.updateMax(width, this.container.getBounds().width + 2 * _constants__WEBPACK_IMPORTED_MODULE_1__.TEXT_PADDING_LR);
            }
            let bounds = this.container.getBounds();
            let totalTextWidth = this.blockType.getBounds().width;
            if (this.blockName) {
                // if this is a block in the sidebar we won't have a block name
                totalTextWidth += this.blockName.getBounds().width;
            }
            this.rect.w = width;
            if (this.isSidebar) {
                this.rect.w -= _constants__WEBPACK_IMPORTED_MODULE_1__.TEXT_PADDING_LR * 2;
                this.rect.h = bounds.height;
                this.rect.x = 0;
                this.rect.y = 2;
            }
            else {
                this.rect.h = bounds.height + _constants__WEBPACK_IMPORTED_MODULE_1__.TEXT_PADDING_UD * 2;
                this.rect.y = -_constants__WEBPACK_IMPORTED_MODULE_1__.TEXT_PADDING_UD - 3;
            }
            this.blockType.x = (width - 2 * _constants__WEBPACK_IMPORTED_MODULE_1__.TEXT_PADDING_LR - totalTextWidth) / 2;
            if (this.blockName) {
                this.blockName.x = this.blockType.getBounds().width + (width - 2 * _constants__WEBPACK_IMPORTED_MODULE_1__.TEXT_PADDING_LR - totalTextWidth) / 2;
            }
        };
        this.isSidebar = props.isSidebar;
        this.container = new _createjs_easeljs__WEBPACK_IMPORTED_MODULE_0__.Container();
        this.shape = new _createjs_easeljs__WEBPACK_IMPORTED_MODULE_0__.Shape();
        this.shape.graphics.beginStroke(props.color);
        this.shape.graphics.setStrokeStyle(5);
        this.shape.graphics.beginFill("#fff");
        this.container.addChild(this.shape);
        this.name = props.name;
        if (props.isSidebar) {
            this.shape.graphics.beginFill("#fff");
            this.shape.graphics.beginStroke("#fff");
        }
        // x, y, w, h, corners x 4
        // default values here are for sidebar display
        this.rect = new _createjs_easeljs__WEBPACK_IMPORTED_MODULE_0__.Graphics.RoundRect(-_constants__WEBPACK_IMPORTED_MODULE_1__.TEXT_PADDING_LR, -10, 180, 60, 100, 100, 100, 100);
        this.shape.graphics.append(this.rect);
        this.shape.graphics.setStrokeStyle(1).beginStroke("#222");
        this.shape.graphics.beginFill("#eee");
        this.selectionRect = new _createjs_easeljs__WEBPACK_IMPORTED_MODULE_0__.Graphics.Rect(0, 0, 0, 0);
        this.shape.graphics.append(this.selectionRect);
        // create text
        if (props.isSidebar) {
            this.blockType = new _createjs_easeljs__WEBPACK_IMPORTED_MODULE_0__.Text(props.type, "40px Inter", props.color);
        }
        else {
            this.completeText();
        }
        this.container.addChild(this.blockType);
        if (!props.isSidebar) {
            this.blockName.addEventListener("mousedown", (event) => {
                let inputElement = document.getElementById("name-editor");
                inputElement.value = this.name;
                inputElement.oninput = (event) => {
                    console.log(event.target.selectionStart);
                    this.updateName(event.target.value);
                };
                inputElement.onkeydown = (event) => {
                    setTimeout(() => {
                        console.log(event.target.selectionStart + " " + event.target.selectionEnd);
                        this.updateSelection(event.target.selectionStart, event.target.selectionEnd);
                    }, 10);
                };
                inputElement.focus();
            });
        }
    }
}


/***/ }),

/***/ "./src/constants.ts":
/*!**************************!*\
  !*** ./src/constants.ts ***!
  \**************************/
/*! namespace exports */
/*! export IO_PADDING_LR [provided] [no usage info] [missing usage info prevents renaming] */
/*! export IO_PADDING_UD [provided] [no usage info] [missing usage info prevents renaming] */
/*! export IO_TEXT_PADDING_LR [provided] [no usage info] [missing usage info prevents renaming] */
/*! export IO_TEXT_PADDING_UD [provided] [no usage info] [missing usage info prevents renaming] */
/*! export TEXT_PADDING_LR [provided] [no usage info] [missing usage info prevents renaming] */
/*! export TEXT_PADDING_UD [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TEXT_PADDING_LR": () => /* binding */ TEXT_PADDING_LR,
/* harmony export */   "TEXT_PADDING_UD": () => /* binding */ TEXT_PADDING_UD,
/* harmony export */   "IO_PADDING_LR": () => /* binding */ IO_PADDING_LR,
/* harmony export */   "IO_PADDING_UD": () => /* binding */ IO_PADDING_UD,
/* harmony export */   "IO_TEXT_PADDING_LR": () => /* binding */ IO_TEXT_PADDING_LR,
/* harmony export */   "IO_TEXT_PADDING_UD": () => /* binding */ IO_TEXT_PADDING_UD
/* harmony export */ });
const TEXT_PADDING_LR = 60;
const TEXT_PADDING_UD = 33;
const IO_PADDING_LR = 10;
const IO_PADDING_UD = 20;
const IO_TEXT_PADDING_LR = 15;
const IO_TEXT_PADDING_UD = 10;


/***/ }),

/***/ "./src/editorElement.ts":
/*!******************************!*\
  !*** ./src/editorElement.ts ***!
  \******************************/
/*! namespace exports */
/*! export EditorElement [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EditorElement": () => /* binding */ EditorElement
/* harmony export */ });
class EditorElement {
    constructor(props) {
        this.props = props;
    }
}


/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/*! namespace exports */
/*! exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.n, __webpack_require__.r, __webpack_exports__, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _createjs_easeljs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @createjs/easeljs */ "./node_modules/@createjs/easeljs/src/main.js");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _sidebar__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./sidebar */ "./src/sidebar.ts");



// store all non-moving elements
let staticObjects = new Array();
// scale function
function scale(stage, zoom, zoomPt, staticObjects) {
    // set zoom bounds
    let localPos = stage.globalToLocal(zoomPt[0], zoomPt[1]);
    stage.regX = localPos.x;
    stage.regY = localPos.y;
    stage.x = zoomPt[0];
    stage.y = zoomPt[1];
    stage.scale = zoom;
    /*
    staticObjects.forEach(object => {
      object[0].graphics.command.w /= zoom;
      object[0].graphics.command.h /= zoom;

      let objPos = stage.globalToLocal(object[1], object[2]);
      object[0].graphics.command.x = objPos.x;
      object[0].graphics.command.y = objPos.y;
      console.log(stage.scale);
    })*/
    //stage.update();
}
// pan function
function pan(stage, screen, staticObjects) {
    screen.addEventListener("mousedown", (event1) => {
        let initPos = [stage.x, stage.y];
        screen.addEventListener('pressmove', (event2) => {
            stage.x = initPos[0] + event2.stageX - event1.stageX;
            stage.y = initPos[1] + event2.stageY - event1.stageY;
            /*
            staticObjects.forEach(object => {
              let pos = stage.globalToLocal(object[1], object[2]);
              object[0].x = pos.x;
              object[0].y = pos.y;
            })     */
        });
    });
}
function resetSidebarPos(stage, sidebar, zoom = 1) {
    let sidebarPos = stage.globalToLocal(0, 0);
    sidebar.shape.graphics.command.x = sidebarPos.x;
    sidebar.shape.graphics.command.y = sidebarPos.y;
    sidebar.sidebarBlocks.forEach(sidebarBlock => {
        sidebarBlock[0].blockBody.container.scale /= zoom;
        let blockPos = stage.globalToLocal(20, sidebarBlock[1]);
        sidebarBlock[0].container.x = blockPos.x;
        sidebarBlock[0].container.y = blockPos.y;
    });
    sidebar.sidebarTexts.forEach(sidebarText => {
        sidebarText[0].scale /= zoom;
        let textPos = stage.globalToLocal(20, sidebarText[1]);
        sidebarText[0].x = textPos.x;
        sidebarText[0].y = textPos.y;
    });
}
function zoomButtons(stage, canvas, zoomIntensity, sidebar) {
    // zoom buttons (might be better to replace with html buttons)
    let zoomIn = new _createjs_easeljs__WEBPACK_IMPORTED_MODULE_0__.Shape();
    zoomIn.graphics.beginFill("white").drawRect(25, 25, 50, 50);
    staticObjects.push([zoomIn, 25, 25]);
    stage.addChild(zoomIn);
    zoomIn.addEventListener("click", (event) => {
        scale(stage, zoomIntensity, [canvas.width / 2, canvas.height / 2], staticObjects);
    });
    let zoomOut = new _createjs_easeljs__WEBPACK_IMPORTED_MODULE_0__.Shape();
    zoomOut.graphics.beginFill("white").drawRect(25, 100, 50, 50);
    staticObjects.push([zoomOut, 25, 100]);
    stage.addChild(zoomOut);
    zoomOut.addEventListener("click", (event) => {
        scale(stage, 1 / zoomIntensity, [canvas.width / 2, canvas.height / 2], staticObjects);
    });
}
class Editor extends _createjs_easeljs__WEBPACK_IMPORTED_MODULE_0__.Stage {
    constructor(id) {
        super(id);
        console.log("this is the editor!");
        super.addEventListener("mousedown", (event) => {
            console.log("editor");
            console.log(event);
        });
    }
}
function tickGenerator(stage) {
    return function tick(event) {
        stage.update();
    };
}
window.addEventListener("load", () => {
    //get the canvas, canvas context, and dpi
    // set up the code editor
    /*
    monaco.editor.create(document.getElementById('codeEditor'), {
      value: [
        'function x() {',
        '\tconsole.log("Hello world!");',
        '}'
      ].join('\n'),
      language: 'javascript'
    });*/
    let canvas = document.getElementById('myCanvas');
    let blocks = [];
    let sidebarBlocks = [];
    let displayContainer = new _createjs_easeljs__WEBPACK_IMPORTED_MODULE_0__.Container();
    displayContainer.x = 300;
    displayContainer.y = 0;
    let ctx = canvas.getContext('2d'), dpi = window.devicePixelRatio * 2;
    canvas.width = document.body.clientWidth * 1.6;
    canvas.height = document.body.clientHeight * 2;
    canvas.style.width = document.body.clientWidth * 0.8 + "px";
    canvas.style.height = document.body.clientHeight + "px";
    ctx.scale(2, 2);
    //Create a stage by getting a reference to the canvas
    let stage = new Editor("myCanvas");
    stage.enableMouseOver(10);
    // set up a customizable background screen
    let screen = new _createjs_easeljs__WEBPACK_IMPORTED_MODULE_0__.Shape();
    screen.graphics.beginLinearGradientFill(["#fafafa", "#fafafa"], [0, 1], -2 * canvas.width, -2 * canvas.height, 2 * canvas.width, 2 * canvas.height).drawRect(0, 0, canvas.width, canvas.height);
    staticObjects.push([screen, 0, 0]);
    stage.addChild(screen);
    stage.addChild(displayContainer);
    let sidebar = new _sidebar__WEBPACK_IMPORTED_MODULE_2__.Sidebar(stage, displayContainer, staticObjects);
    // change how much stage zooms each step
    let zoomIntensity = 1.2;
    let zoom = 1;
    // mouse wheel zoom
    canvas.addEventListener("wheel", (event) => {
        //console.log(event.deltaY + " " + zoom);
        //let zoom = event.deltaY < 0 ? 1/zoomIntensity : zoomIntensity;
        zoom += Math.sign(event.deltaY) / 20;
        if (zoom < 0.1) {
            zoom = 0.1;
        }
        else if (zoom > 3) {
            zoom = 3;
        }
        scale(displayContainer, zoom, [stage.mouseX, stage.mouseY], staticObjects);
    });
    document.getElementById("compile-button").onclick = () => {
        // get all the blocks
        // each block is in the format:
        /*
          block_name: {
           
            inputs: [   // where this block's inputs come from
              past_block_name.output_name, ...
            ],
            attributes : [
              attr1, ...
            ]
          }
    
          // if an input has params, it is not considered a real input and gets placed into `attributes`
          // however if the input has a connection, it IS considered a real input and gets placed into `inputs`
        */
        let jsonNetwork = {};
        console.log(sidebar.blocks);
        sidebar.blocks.forEach((block, idx) => {
            let typeText = block.blockBody.blockType.text;
            let blockData = {
                inputs: {},
                attributes: [],
                type: typeText.slice(0, typeText.length - 4) //oof 
            };
            let seenParams = new Set();
            block.inputs.inputs.forEach((inp, idx) => {
                if (inp.props.availableParams) {
                    inp.props.availableParams.forEach((param, idx) => {
                        if (!seenParams.has(param)) {
                            blockData.attributes.push(param + "=" + inp.props.params[param].value);
                            seenParams.add(param);
                        }
                    });
                }
                else {
                    blockData.inputs[inp.props.name] = null;
                }
            });
            block.inputs.children.forEach((pair, idx) => {
                blockData.inputs[pair[1].props.name] = pair[0].props.block.blockBody.name + "." + pair[0].props.name;
            });
            jsonNetwork[block.blockBody.name] = blockData;
        });
        jquery__WEBPACK_IMPORTED_MODULE_1__.post("http://localhost:5000/compile", JSON.stringify(jsonNetwork), (data) => {
            console.log(data);
        });
    };
    // click and drag pan
    pan(displayContainer, screen, staticObjects);
    //let block2: Block = new Block(stage, 100, 100, "#5B60E0", ["input1", "test", ]); 
    // zoom buttons
    //zoomButtons(stage, canvas, zoomIntensity);
    //let block2: Block = new Block(stage, 100, 100, "#5B60E0", ["input1", "test", ]);
    _createjs_easeljs__WEBPACK_IMPORTED_MODULE_0__.Ticker.framerate = 60;
    _createjs_easeljs__WEBPACK_IMPORTED_MODULE_0__.Ticker.addEventListener('tick', tickGenerator(stage));
});


/***/ }),

/***/ "./src/inputs.ts":
/*!***********************!*\
  !*** ./src/inputs.ts ***!
  \***********************/
/*! namespace exports */
/*! export Input [provided] [no usage info] [missing usage info prevents renaming] */
/*! export Inputs [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Input": () => /* binding */ Input,
/* harmony export */   "Inputs": () => /* binding */ Inputs
/* harmony export */ });
/* harmony import */ var _createjs_easeljs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @createjs/easeljs */ "./node_modules/@createjs/easeljs/src/main.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants */ "./src/constants.ts");
/* harmony import */ var _editorElement__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./editorElement */ "./src/editorElement.ts");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./util */ "./src/util.ts");




class Input extends _editorElement__WEBPACK_IMPORTED_MODULE_2__.EditorElement {
    constructor(props) {
        super(props);
        this.container = new _createjs_easeljs__WEBPACK_IMPORTED_MODULE_0__.Container();
        this.inputName = new _createjs_easeljs__WEBPACK_IMPORTED_MODULE_0__.Text(props.name, "20px Inter", "#000");
        this.shape = new _createjs_easeljs__WEBPACK_IMPORTED_MODULE_0__.Shape();
        this.shape.graphics.beginStroke("#000");
        this.shape.graphics.setStrokeStyle(2);
        this.container.addChild(this.shape);
        this.container.addChild(this.inputName);
        this.rect = new _createjs_easeljs__WEBPACK_IMPORTED_MODULE_0__.Graphics.RoundRect(-_constants__WEBPACK_IMPORTED_MODULE_1__.IO_TEXT_PADDING_LR, -_constants__WEBPACK_IMPORTED_MODULE_1__.IO_TEXT_PADDING_UD - 1, 0, 0, 50, 50, 50, 50);
        this.shape.graphics.append(this.rect);
        this.params = props.params;
        if (this.props.availableParams) {
            this.fill = new _createjs_easeljs__WEBPACK_IMPORTED_MODULE_0__.Graphics.Fill("#222");
            this.inputName.color = "#eee";
        }
        else {
            this.fill = new _createjs_easeljs__WEBPACK_IMPORTED_MODULE_0__.Graphics.Fill("#fff");
        }
        this.shape.graphics.append(this.fill);
        this.update();
        this.container.addEventListener("mouseover", (event) => {
            if (!this.connection) {
                if (this.props.availableParams) {
                    this.fill.style = "#555";
                }
                else {
                    this.fill.style = '#ccc';
                }
            }
            else {
                this.inputName.color = "#fff";
            }
        });
        this.container.addEventListener("mouseout", (event) => {
            this.inputName.color = "#000";
            if (!this.connection) {
                if (this.props.availableParams) {
                    this.fill.style = "#222";
                    this.inputName.color = "#eee";
                }
                else {
                    this.fill.style = "#fff";
                }
            }
            else {
                this.inputName.color = "#fff";
            }
        });
        this.container.addEventListener("mousedown", (event) => {
            this.focusedOutput = this.connection;
            if (this.params) {
                _util__WEBPACK_IMPORTED_MODULE_3__.updateParameterEditor(this);
            }
        });
        this.container.addEventListener("pressmove", (event) => {
            if (this.connection) {
                console.log("REMOVING");
                this.remove();
            }
            if (this.focusedOutput) {
                this.focusedOutput.updateConnection(event.stageX, event.stageY);
            }
        });
        this.container.addEventListener("pressup", (event) => {
            if (this.focusedOutput) {
                this.focusedOutput.handleUp(event);
            }
        });
    }
    remove() {
        // remove connection Output-side
        if (this.connection) {
            this.connection.props.remove(this);
        }
        this.connection = null;
        //remove connection Input-side
        this.props.remove(this);
    }
    update() {
        let bounds = this.inputName.getBounds();
        this.rect.w = bounds.width + 2 * _constants__WEBPACK_IMPORTED_MODULE_1__.IO_TEXT_PADDING_LR;
        this.rect.h = bounds.height + 2 * _constants__WEBPACK_IMPORTED_MODULE_1__.IO_TEXT_PADDING_UD;
        this.container.setBounds(0, 0, this.rect.w, this.rect.h);
    }
}
class Inputs extends _editorElement__WEBPACK_IMPORTED_MODULE_2__.EditorElement {
    // this Input depends on the following outputs
    // each input should only have one corresponding output
    constructor(props) {
        super(props);
        this.inputs = [];
        this.removeChild = (single) => {
            for (let i = 0; i < this.children.length; i++) {
                if (this.children[i][1] == single) {
                    this.children.splice(i, 1);
                    break;
                }
            }
        };
        this.container = new _createjs_easeljs__WEBPACK_IMPORTED_MODULE_0__.Container();
        this.children = [];
        props.inputs.forEach((i, idx) => {
            let inp = new Input({ name: i.name, params: props.params, availableParams: i.params, blocks: props.blocks, remove: this.removeChild, block: props.block });
            this.inputs.push(inp);
            this.container.addChild(inp.container);
        });
        this.update();
    }
    //burver.
    addChild(pair) {
        if (pair[1].connection != null) {
            // there is already an output connected to this input, so we'll disconnect the original output 
            return false;
        }
        this.children.push(pair);
        pair[1].connection = pair[0];
        return true;
    }
    updateConnections() {
        let seen = new Set();
        this.children.forEach((pair, idx) => {
            if (!seen.has(pair[0].props.block)) {
                pair[0].props.block.outputs.updateConnections();
                seen.add(pair[0].props.block);
            }
        });
    }
    update() {
        let accWidth = 0;
        this.inputs.forEach((inp, idx) => {
            inp.update();
            inp.container.x = accWidth;
            accWidth += inp.container.getBounds().width + _constants__WEBPACK_IMPORTED_MODULE_1__.IO_PADDING_LR;
        });
        return accWidth;
    }
}


/***/ }),

/***/ "./src/outputs.ts":
/*!************************!*\
  !*** ./src/outputs.ts ***!
  \************************/
/*! namespace exports */
/*! export Output [provided] [no usage info] [missing usage info prevents renaming] */
/*! export Outputs [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Output": () => /* binding */ Output,
/* harmony export */   "Outputs": () => /* binding */ Outputs
/* harmony export */ });
/* harmony import */ var _createjs_easeljs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @createjs/easeljs */ "./node_modules/@createjs/easeljs/src/main.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants */ "./src/constants.ts");
/* harmony import */ var _editorElement__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./editorElement */ "./src/editorElement.ts");



class Output extends _editorElement__WEBPACK_IMPORTED_MODULE_2__.EditorElement {
    constructor(props) {
        super(props);
        this.handleUp = (event) => {
            if (!this.props.checkConnection(event, this)) {
                this.arrow.x = 0;
                this.arrow.y = 0;
                this.arrow.cp1x = 0;
                this.arrow.cp2x = 0;
                this.arrow.cp1y = 0;
                this.arrow.cp2y = 0;
            }
        };
        this.container = new _createjs_easeljs__WEBPACK_IMPORTED_MODULE_0__.Container();
        this.connections = {};
        this.inputName = new _createjs_easeljs__WEBPACK_IMPORTED_MODULE_0__.Text(props.name, "20px Inter", "#000");
        this.shape = new _createjs_easeljs__WEBPACK_IMPORTED_MODULE_0__.Shape();
        this.shape.graphics.beginStroke("#000");
        this.shape.graphics.setStrokeStyle(2);
        this.container.addChild(this.shape);
        this.container.addChild(this.inputName);
        this.rect = new _createjs_easeljs__WEBPACK_IMPORTED_MODULE_0__.Graphics.RoundRect(-_constants__WEBPACK_IMPORTED_MODULE_1__.IO_TEXT_PADDING_LR, -_constants__WEBPACK_IMPORTED_MODULE_1__.IO_TEXT_PADDING_UD - 1, 0, 0, 50, 50, 50, 50);
        this.arrow = new _createjs_easeljs__WEBPACK_IMPORTED_MODULE_0__.Graphics.BezierCurveTo(0, 0, 0, 0, 0, 0);
        //this.p1 = new Graphics.Circle(0, 0, 5)
        this.move = new _createjs_easeljs__WEBPACK_IMPORTED_MODULE_0__.Graphics.MoveTo(this.rect.w / 2, -_constants__WEBPACK_IMPORTED_MODULE_1__.IO_TEXT_PADDING_UD - 1);
        this.shape.graphics.beginFill("#0000");
        this.shape.graphics.append(this.move);
        this.shape.graphics.append(this.arrow);
        //this.shape.graphics.append(this.p1);
        //this.shape.graphics.append(this.p2);
        this.shape.graphics.beginFill("#fff");
        this.shape.graphics.append(this.rect);
        this.container.addEventListener("pressmove", (event) => {
            this.updateConnection(event.stageX, event.stageY);
            //this.p1.x = pt.x + 2.5;
            //this.p1.y = pt.y - 2.5;
            /*
            this.p2.x = this.arrow.cp2x;
            this.p2.y = this.arrow.cp2y;
            */
        });
        this.container.addEventListener("pressup", (event) => {
            console.log("clicked up! ");
            this.handleUp(event);
        });
        this.update();
    }
    updateConnection(gx, gy) {
        this.move.x = -_constants__WEBPACK_IMPORTED_MODULE_1__.IO_TEXT_PADDING_LR + this.rect.w / 2;
        this.shape.graphics.endFill();
        let pt = this.container.globalToLocal(gx, gy);
        pt.y += 5;
        pt.x += 5;
        this.arrow.x = pt.x;
        this.arrow.y = pt.y;
        this.arrow.cp1x = -_constants__WEBPACK_IMPORTED_MODULE_1__.IO_TEXT_PADDING_LR + this.rect.w / 2;
        this.arrow.cp1y = (pt.y + (-_constants__WEBPACK_IMPORTED_MODULE_1__.IO_TEXT_PADDING_UD - 1)) / 2;
        this.arrow.cp2x = pt.x;
        this.arrow.cp2y = (pt.y + (-_constants__WEBPACK_IMPORTED_MODULE_1__.IO_TEXT_PADDING_UD - 1)) / 2;
    }
    update() {
        let bounds = this.inputName.getBounds();
        this.rect.w = bounds.width + 2 * _constants__WEBPACK_IMPORTED_MODULE_1__.IO_TEXT_PADDING_LR;
        this.rect.h = bounds.height + 2 * _constants__WEBPACK_IMPORTED_MODULE_1__.IO_TEXT_PADDING_UD;
        this.container.setBounds(0, 0, this.rect.w, this.rect.h);
    }
}
class Outputs extends _editorElement__WEBPACK_IMPORTED_MODULE_2__.EditorElement {
    constructor(props) {
        super(props);
        this.inputs = [];
        this.addParent = (pair) => {
            // create a new moveTo and a new bezier curve
            let out = pair[0];
            let inp = pair[1];
            this.parents.push(pair);
            let move = new _createjs_easeljs__WEBPACK_IMPORTED_MODULE_0__.Graphics.MoveTo(inp.container.x + inp.rect.w / 2, -_constants__WEBPACK_IMPORTED_MODULE_1__.IO_TEXT_PADDING_UD - 1);
            let arrow = new _createjs_easeljs__WEBPACK_IMPORTED_MODULE_0__.Graphics.BezierCurveTo(0, 0, 0, 0, 0, 0);
            this.arrows.push([move, arrow]);
            this.arrowShapes.graphics.append(move);
            this.arrowShapes.graphics.append(arrow);
            this.updateConnections();
        };
        this.resetConnections = () => {
            this.arrowShapes.graphics.clear();
            this.arrowShapes.graphics.beginStroke("#000");
            this.arrowShapes.graphics.setStrokeStyle(3);
            this.arrows.forEach((graphic, idx) => {
                this.arrowShapes.graphics.append(graphic[0]);
                this.arrowShapes.graphics.append(graphic[1]);
            });
            this.updateConnections();
        };
        this.removeChild = (single) => {
            // since there can only be one connection to an input, 
            // specifying the input uniquely identifies the input AND the corresponding output
            for (let i = 0; i < this.parents.length; i++) {
                if (this.parents[i][1] == single) {
                    // remove this connection from the list of parents
                    this.parents.splice(i, 1);
                    this.arrows.splice(i, 1);
                    this.resetConnections();
                    break;
                }
            }
            console.log(this.parents);
            console.log(this.arrows);
        };
        this.container = new _createjs_easeljs__WEBPACK_IMPORTED_MODULE_0__.Container();
        this.arrows = [];
        this.arrowShapes = new _createjs_easeljs__WEBPACK_IMPORTED_MODULE_0__.Shape();
        this.arrowShapes.graphics.beginStroke("#000");
        this.arrowShapes.graphics.setStrokeStyle(3);
        this.parents = [];
        props.inputs.forEach((value, idx) => {
            let inp = new Output({ name: value, checkConnection: this.props.checkConnection, remove: this.removeChild, block: this.props.block });
            this.inputs.push(inp);
            this.container.addChild(inp.container);
        });
        this.container.addChild(this.arrowShapes);
        this.update();
    }
    update() {
        let accWidth = 0;
        this.inputs.forEach((inp, idx) => {
            inp.update();
            inp.container.x = accWidth;
            accWidth += inp.container.getBounds().width + _constants__WEBPACK_IMPORTED_MODULE_1__.IO_PADDING_LR;
        });
        return accWidth - _constants__WEBPACK_IMPORTED_MODULE_1__.IO_PADDING_LR;
    }
    updateConnections() {
        this.arrows.forEach((graphic, idx) => {
            graphic[0].x = this.parents[idx][0].container.x + this.parents[idx][0].rect.w / 2 - _constants__WEBPACK_IMPORTED_MODULE_1__.IO_TEXT_PADDING_LR;
            let inp = this.parents[idx][1];
            let out = this.parents[idx][0];
            let global = inp.container.localToGlobal(inp.rect.w / 2 - _constants__WEBPACK_IMPORTED_MODULE_1__.IO_TEXT_PADDING_LR, inp.rect.h / 2 + _constants__WEBPACK_IMPORTED_MODULE_1__.IO_TEXT_PADDING_UD);
            let local = this.container.globalToLocal(global.x, global.y);
            graphic[1].x = local.x;
            graphic[1].y = local.y;
            graphic[1].cp1x = -_constants__WEBPACK_IMPORTED_MODULE_1__.IO_TEXT_PADDING_LR + out.rect.w / 2;
            graphic[1].cp1y = (local.y + (-_constants__WEBPACK_IMPORTED_MODULE_1__.IO_TEXT_PADDING_UD - 1)) / 2;
            graphic[1].cp2x = local.x;
            graphic[1].cp2y = (local.y + (-_constants__WEBPACK_IMPORTED_MODULE_1__.IO_TEXT_PADDING_UD - 1)) / 2;
        });
    }
}


/***/ }),

/***/ "./src/sidebar.ts":
/*!************************!*\
  !*** ./src/sidebar.ts ***!
  \************************/
/*! namespace exports */
/*! export Sidebar [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Sidebar": () => /* binding */ Sidebar
/* harmony export */ });
/* harmony import */ var _createjs_easeljs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @createjs/easeljs */ "./node_modules/@createjs/easeljs/src/main.js");
/* harmony import */ var _block__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./block */ "./src/block.ts");


class Sidebar {
    // have buttons be Blocks so that pressmove can work. on mousbuttondown add a new block to the sidebar.
    // blocks should have a sidebar state where they look different.
    constructor(stage, screen, staticObjects) {
        this.container = new _createjs_easeljs__WEBPACK_IMPORTED_MODULE_0__.Container();
        this.container.x = 0;
        this.container.y = 0;
        this.screen = screen;
        this.blocks = [];
        this.sidebarBlocks = [];
        this.sidebarTexts = [];
        this.shape = new _createjs_easeljs__WEBPACK_IMPORTED_MODULE_0__.Shape();
        // this.shape.graphics.beginStroke("#fff");
        // this.shape.graphics.setStrokeStyle(5);
        this.shape.graphics.beginFill("#fff");
        this.rect = new _createjs_easeljs__WEBPACK_IMPORTED_MODULE_0__.Graphics.RoundRect(0, 0, 400, 1600, 0, 0, 0, 0);
        this.shape.graphics.append(this.rect);
        this.container.addChild(this.shape);
        stage.addChild(this.container);
        // TODO: make sidebar blocks a different class than just Block. 
        // TODO: move this block data mess to a different file, or maybe a config file
        let blockData = [
            {
                type: "separator",
                name: "layers"
            },
            {
                color: "#5B60E0",
                count: 0,
                default_name: "conv",
                params: {
                    "in_channels": {
                        type: "int",
                        value: 1
                    },
                    "out_channels": {
                        type: "int",
                        value: 1
                    },
                    "kernel_size": {
                        type: "int | [int, int]",
                        value: "[1, 1]"
                    },
                    "stride": {
                        type: "int | [int, int]",
                        value: "[1, 1]"
                    },
                    "padding": {
                        type: "int | [int, int]",
                        value: "[1, 1]"
                    },
                    "dilation": {
                        type: "int | [int, int]",
                        value: "[1, 1]"
                    },
                    "groups": {
                        type: "int",
                        value: 1
                    },
                    "bias": {
                        type: "bool",
                        value: "True"
                    },
                    "padding_mode": {
                        type: "zeros | reflect | replicate | circular",
                        value: "'zeros'"
                    }
                },
                inputs: [
                    {
                        name: 'weights',
                        params: [
                            'in_channels',
                            'out_channels',
                            'kernel_size'
                        ]
                    },
                    {
                        name: 'input'
                    },
                    {
                        name: 'params',
                        params: [
                            "in_channels",
                            "out_channels",
                            "kernel_size",
                            "stride",
                            "padding",
                            "dilation",
                            "groups",
                            "bias",
                            "padding_mode",
                        ]
                    }
                ],
                outputs: ['output'],
                type: "conv2d"
            },
            {
                color: "#5B60E0",
                count: 0,
                default_name: "maxpool",
                params: {
                    "kernel_size": {
                        type: "int | [int, int]",
                        value: "[2, 2]"
                    },
                    "stride": {
                        type: "int | [int, int]",
                        value: "[2, 2]"
                    },
                    "padding": {
                        type: "int | [int, int]",
                        value: "[0, 0]"
                    },
                    "dilation": {
                        type: "int | [int, int]",
                        value: "[1, 1]"
                    },
                },
                inputs: [
                    {
                        name: 'input'
                    },
                    {
                        name: 'params',
                        params: [
                            "kernel_size",
                            "stride",
                            "padding",
                            "dilation",
                        ]
                    }
                ],
                outputs: ['output'],
                type: "maxpool"
            },
            {
                color: "#5B60E0",
                count: 0,
                default_name: "dense",
                params: {
                    'in_features': {
                        type: "int",
                        value: "1"
                    },
                    'out_features': {
                        type: "int",
                        value: "1"
                    }
                },
                inputs: [{
                        name: 'weights',
                        params: [
                            'in_features',
                            'out_features'
                        ]
                    },
                    {
                        name: 'input'
                    }],
                outputs: ['output'],
                type: "dense"
            },
            {
                type: "separator",
                name: "activation functions"
            },
            {
                color: "#2B9D89",
                count: 0,
                default_name: "relu",
                inputs: [{
                        name: "input"
                    }],
                outputs: ['output'],
                type: "relu"
            },
            {
                color: "#2B9D89",
                count: 0,
                default_name: "sigmoid",
                inputs: [{
                        name: "input"
                    }],
                outputs: ['output'],
                type: "sigmoid"
            },
            {
                color: "#2B9D89",
                params: {
                    "dim": {
                        type: "int",
                        value: "1"
                    }
                },
                count: 0,
                default_name: "softmax",
                inputs: [{
                        name: "input"
                    }, {
                        name: "dimension",
                        params: ['dim']
                    }],
                outputs: ['output'],
                type: "softmax"
            },
            {
                color: "#2B9D89",
                count: 0,
                default_name: "tanh",
                inputs: [{
                        name: "input"
                    }],
                outputs: ['output'],
                type: "tanh"
            },
            {
                color: "#2B9D89",
                count: 0,
                default_name: "softplus",
                inputs: [{
                        name: "input"
                    }],
                outputs: ['output'],
                type: "softplus"
            },
            {
                type: "separator",
                name: "data functions"
            },
            {
                color: "#1480FF",
                count: 0,
                default_name: "add",
                inputs: [{
                        name: 'input1'
                    },
                    {
                        name: 'input2'
                    }],
                outputs: ['output'],
                type: "add"
            },
            {
                color: "#1480FF",
                count: 0,
                default_name: "flatten",
                params: {
                    start_dim: {
                        type: "int",
                        value: '1'
                    },
                    end_dim: {
                        type: "int",
                        value: '-1'
                    }
                },
                inputs: [{
                        name: 'input'
                    },
                ],
                outputs: ['output'],
                type: "flatten"
            },
        ];
        staticObjects.push([this.container, 0, 0]);
        let y = 10;
        blockData.forEach((data, idx) => {
            if (data.type == 'separator') {
                let text = new _createjs_easeljs__WEBPACK_IMPORTED_MODULE_0__.Text(data.name, "25px Inter");
                text.x = 50;
                text.y = y + 50;
                this.sidebarTexts.push([text, text.y]);
                y += 90;
                this.container.addChild(text);
            }
            else {
                // data.params are the archetypical parameters of 
                // the block, we need to copy it so we don't edit 
                // the parameters of other blocks
                // this will happen inside the block class though
                let block = new _block__WEBPACK_IMPORTED_MODULE_1__.Block(stage, data.params, this.blocks, 50, y, data.color, data.inputs, data.outputs, "test", data.type, true, screen, { count: 0 });
                staticObjects.push([block.container, 50, y]);
                block.sidebar = true;
                this.sidebarBlocks.push([block, y]);
                y += 60;
            }
        });
    }
}


/***/ }),

/***/ "./src/util.ts":
/*!*********************!*\
  !*** ./src/util.ts ***!
  \*********************/
/*! namespace exports */
/*! export draw [provided] [no usage info] [missing usage info prevents renaming] */
/*! export updateMax [provided] [no usage info] [missing usage info prevents renaming] */
/*! export updateParameterEditor [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "updateMax": () => /* binding */ updateMax,
/* harmony export */   "draw": () => /* binding */ draw,
/* harmony export */   "updateParameterEditor": () => /* binding */ updateParameterEditor
/* harmony export */ });
function updateMax(v, n) {
    if (n > v) {
        return n;
    }
    return v;
}
function draw(elements, container) {
}
function updateParameterEditor(inp) {
    console.log("event!");
    let type = document.getElementById("block-type");
    let name = document.getElementById("block-name");
    let inputName = document.getElementById("input-name");
    type.innerText = inp.props.block.blockBody.blockType.text;
    name.innerText = inp.props.block.blockBody.name;
    inputName.innerText = inp.props.name;
    let editor = document.getElementById("parameters");
    editor.innerHTML = '';
    inp.props.availableParams.forEach((param, idx) => {
        let p = inp.props.params[param];
        let element = document.createElement('div');
        element.className = 'input-parameter';
        element.innerHTML = `
            <span style = "">${param}</span>: <input id = input-${idx} class = 'inp' style = "color: ${inp.props.block.color}" value = "${p.value}"></input> 
            <br/>
            <span style = 'color: #aaa'>${p.type}</span>
        `;
        console.log(element);
        editor.appendChild(element);
        document.getElementById("input-" + idx).onchange = (e) => {
            inp.props.params[param].value = e.target.value;
        };
    });
    let text = document.createElement("div");
    text.style.marginTop = "50px";
    text.innerText = "Press ENTER to save";
    editor.appendChild(text);
}


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => module['default'] :
/******/ 				() => module;
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	// startup
/******/ 	// Load entry module
/******/ 	__webpack_require__("./src/index.ts");
/******/ 	// This entry module used 'exports' so it can't be inlined
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,